{
	"rss": {
		"@version": "2.0",
		"@xmlns:dc": "http://purl.org/dc/elements/1.1/",
		"@xmlns:trackback": "http://madskills.com/public/xml/rss/module/trackback/",
		"@xmlns:wfw": "http://wellformedweb.org/CommentAPI/",
		"@xmlns:slash": "http://purl.org/rss/1.0/modules/slash/",
		"channel": {
			"title": "\u535a\u5ba2\u56ed-CSGrandeur",
			"link": "http://www.cnblogs.com/CSGrandeur/",
			"description": "\u7231\u7b97\u6cd5\uff0c\u7231\u601d\u8003",
			"language": "zh-cn",
			"lastBuildDate": "Wed, 03 Jun 2015 13:00:02 GMT",
			"pubDate": "Wed, 03 Jun 2015 13:00:02 GMT",
			"ttl": "60",
			"item": [{
				"title": "CSGrandeur\u7684WebGL\u5b66\u4e60\u2014\u2014WebGL\u6559\u7a0b",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2015/05/20/4516517.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 20 May 2015 02:32:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2015/05/20/4516517.html",
				"description": "<p><span style=\"font-size: 16px;\">\u5728\u7ebf\u67e5\u770b\uff1a<a href=\"http://csgrandeur.gitbooks.io/webgl-learn/content/\" target=\"_blank\">http://csgrandeur.gitbooks.io/webgl-learn/content/</a></span></p>\n<p><span style=\"font-size: 16px;\">\u79bb\u7ebfmobi\uff1a<a href=\"http://files.cnblogs.com/files/CSGrandeur/csgrandeur-webgl-learn_mobi_20150520.rar\" target=\"_blank\">http://files.cnblogs.com/files/CSGrandeur/csgrandeur-webgl-learn_mobi_20150520.rar</a></span></p>\n<p><span style=\"font-size: 16px;\">\u79bb\u7ebfpdf\uff1a<a href=\"http://files.cnblogs.com/files/CSGrandeur/csgrandeur-webgl-learn_20150520.pdf\" target=\"_blank\">http://files.cnblogs.com/files/CSGrandeur/csgrandeur-webgl-learn_20150520.pdf</a></span></p>\n<p><span style=\"font-size: 16px;\">\u5728\u7ebf\u7248\u672c\u4f1a\u53ca\u65f6\u66f4\u65b0\uff0c\u79bb\u7ebf\u7248\u672c\u5728\u6709\u8f83\u5927\u6539\u52a8\u65f6\u66f4\u65b0\u3002</span></p>\n<p><span style=\"font-size: 16px;\"><strong>\u7b2c\u4e00\u7ae0\uff08\u76ee\u524d\u53ea\u6709\u4e00\u7ae0\uff09\u5185\u5bb9\u6765\u81ea&nbsp;<a href=\"http://learningwebgl.com/blog/?page_id=1217\" target=\"_blank\">Learning WebGL</a>&nbsp;</strong><span class=\"Apple-converted-space\"><strong>\uff0c\u4ed6\u7684\u7f51\u7ad9\u662f\uff1a<a href=\"http://learningwebgl.com\" target=\"_blank\"><span style=\"color: #3366ff;\">http://learningwebgl.com</span></a></strong>\u3002</span><span class=\"Apple-converted-space\">\u6211\u4fee\u6539\u4e86\u4ee3\u7801\u9002\u7528\u5230gl-matrix 2.x\u7684\u7248\u672c\uff0c\u628a\u64cd\u4f5cdom\u7684\u4ee3\u7801\u6539\u6210jQuery\u4e86\u3002\u6559\u7a0b\u6ca1\u6709\u7eaf\u7ffb\u8bd1\uff0c\u770b\u7740\u539f\u7248\u7406\u89e3\u7740\u5199\u7740\uff0c\u4e0d\u660e\u767d\u7684\u95ee\u9898\u5728\u641c\u4e86\u4e4b\u540e\u8865\u5145\u4e0a\u4e86\uff0c\u81ea\u5df1\u89c9\u5f97\u592a\u660e\u767d\u7684\u95ee\u9898\u5220\u51cf\u6389\u4e86\u3002</span></span></p>\n<p><span class=\"Apple-converted-space\" style=\"font-size: 16px;\">\u4e4b\u540e\u5b66\u4e60\u7684\u5185\u5bb9\u4f1a\u5f00\u8f9f\u65b0\u7684\u7ae0\u8282\u66f4\u65b0\u3002\u5982\u6709\u95ee\u9898\u6b22\u8fce\u6307\u6b63\u3002<span style=\"color: #ff0000;\"><strong>\u5efa\u4e86\u4e2a\u4ea4\u6d41QQ\u7fa4\uff0c\u6b22\u8fce\u8ba8\u8bba\uff1a217160095</strong></span></span></p>\n<p><span class=\"Apple-converted-space\" style=\"font-size: 16px;\">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;\u4ee5\u4e0b\u662f\u6559\u7a0b\u524d\u8a00&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</span></p>\n<h2 id=\"-%E7%AE%80%E4%BB%8B\" style=\"font: bold 1.75em/1.225 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; padding-bottom: 0.3em; margin-top: 1em; margin-bottom: 16px; word-spacing: 0px; border-bottom-color: #eeeeee; border-bottom-width: 1px; border-bottom-style: solid; white-space: normal; position: relative; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\"><strong>\u7b80\u4ecb</strong></h2>\n<h3 id=\"webgl%E6%98%AF%E4%BB%80%E4%B9%88\" style=\"font: bold 1.5em/1.43 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 1em; margin-bottom: 16px; word-spacing: 0px; white-space: normal; position: relative; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">WebGL\u662f\u4ec0\u4e48</h3>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">HTML5\u662f\u5f53\u524dHTML\u7684\u65b0\u6807\u51c6\uff0c\u5176\u4e2d\u4e00\u4e2a\u7279\u6027\u5c31\u53ef\u4ee5\u7528JavaScript\u5199\u8c03\u7528\u663e\u5361\u7684\u7a0b\u5e8f\uff0c\u5728\u65b0\u7684\u7f51\u9875\u5143\u7d20Canvas\u4e0a\u663e\u793a\u534e\u4e3d\u76843D\u6548\u679c\uff0c\u5f00\u53d1WebGL\u4e3b\u8981\u4f7f\u7528 JavaScript\u8bed\u8a00\u3002</p>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u6211\u5b66WebGL\u76ee\u524d\u6709\u4e24\u70b9\u76ee\u7684\uff1a</p>\n<ol style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; padding: 0px 0px 0px 2em; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\n<li>Web\u5e94\u8be5\u662f\u8de8\u5e73\u53f0\u6700\u8212\u670d\u7684\u624b\u6bb5\u4e86\uff0c\u6ca1\u6709\u54ea\u4e2a\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\uff08\u54ea\u6015\u624b\u673a\u7cfb\u7edf\uff09\u4e0d\u914d\u6d4f\u89c8\u5668\u5427\uff0cHTML5\u7684\u5230\u6765\uff0c\u611f\u89c9Web\u524d\u9014\u4e00\u7247\u5149\u660e\u3002</li>\n<li>JavaScript\u5f00\u53d13D\u597d\u50cf\u8212\u670d\u5f88\u591a\u554a\uff0c\u7528C++\u5199OpenGL\uff0c\u7f16\u8bd1\u8001\u534a\u5929\uff0c\u8c03\u8bd5\u4e00\u6b65\u4e00\u6b65\u626f\u5f97\u86cb\u75bc\u3002</li>\n</ol>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u5f53\u7136\u8fd9\u4e24\u70b9\u76ee\u7684\u53ef\u80fd\u5f88\u50bb\u5f88\u5929\u771f\uff0c\u4e0d\u8fc7\u5b66\u70b9\u6709\u7528\u7684\u4e1c\u897f\u603b\u662f\u597d\u7684\uff0c\u4e5f\u4e0d\u5fc5\u592a\u8f83\u771f\u513f\u4e86\u3002</p>\n<h3 id=\"%E5%AD%A6%E4%B9%A0webgl%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88%E5%9F%BA%E7%A1%80\" style=\"font: bold 1.5em/1.43 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 1em; margin-bottom: 16px; word-spacing: 0px; white-space: normal; position: relative; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u5b66\u4e60WebGL\u9700\u8981\u4ec0\u4e48\u57fa\u7840</h3>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u5f00\u59cb\u5b66\u4e60WebGL\u65f6\u6211\u7684\u57fa\u7840\uff1a</p>\n<ul style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; padding: 0px 0px 0px 2em; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\n<li>\u5177\u5907\u4e00\u70b9PHP\u3001HTML\u3001JS\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u505a\u8fc7\u51e0\u4e2aWeb\u7684\u5c0f\u9879\u76ee\u3002</li>\n<li>\u505a\u8fc7\u51e0\u5e74\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\uff0c\u5bf9C/C++\u8bed\u8a00\u8fd8\u7b97\u6bd4\u8f83\u719f\u6089\u3002</li>\n<li>\u8ddf\u7740\u300aOpenGL\u7f16\u7a0b\u6307\u5357\u300b\u7b2c\u516b\u7248\u5b66\u8fc7\u4e00\u70b9\u5165\u95e8\u77e5\u8bc6\uff0c\u61f5\u61c2\u4e86\u89e3\u53ef\u7f16\u7a0b\u6e32\u67d3\u7ba1\u7ebf\u7684\u6982\u5ff5\u3002</li>\n</ul>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u5efa\u8bae\uff1a</p>\n<ul style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; padding: 0px 0px 0px 2em; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\n<li>\u81f3\u5c11\u5177\u5907\u4e00\u4e9b\u57fa\u672c\u7684\u7f16\u7a0b\u6280\u80fd\uff0c\u7406\u89e3\u53d8\u91cf\u3001\u51fd\u6570\u7b49\u57fa\u7840\u77e5\u8bc6\u3002</li>\n<li>\u4e0d\u5fc5\u62c5\u5fc3\u5bf9Web\u76f8\u5173\u9886\u57df\u7684\u964c\u751f\uff0c\u6bd5\u7adf\u90a3\u4e0d\u662f\u91cd\u70b9\uff0c\u4e5f\u4e0d\u4f1a\u6210\u4e3a\u5b66\u4e60WebGL\u8fc7\u7a0b\u4e2d\u7684\u96be\u70b9\u3002</li>\n<li>WebGL\u7684\u5b66\u4e60\u8fc7\u7a0b\u548cOpenGL\u662f\u76f8\u4f3c\u76f8\u901a\u7684\uff0c\u6240\u4ee5\u4e5f\u4e0d\u5fc5\u62c5\u5fc3\u662f\u5426\u9700\u8981OpenGL\u7684\u57fa\u7840\u77e5\u8bc6</li>\n</ul>\n<h3 id=\"%E8%BF%99%E6%9C%AC%E4%B9%A6%E5%B9%B2%E4%BB%80%E4%B9%88\" style=\"font: bold 1.5em/1.43 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 1em; margin-bottom: 16px; word-spacing: 0px; white-space: normal; position: relative; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u8fd9\u672c\u4e66\u5e72\u4ec0\u4e48</h3>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u8fd9\u672c\u4e66\u662f\u6211\u5b66\u4e60WebGL\u8fc7\u7a0b\u7684\u8bb0\u5f55\uff0c\u4f1a\u6839\u636e\u5b66\u4e60\u7684\u7ecf\u9a8c\u5199\u6210\u6559\u7a0b\u7684\u5f62\u5f0f\u3002</p>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u7b2c\u4e00\u7ae0\u662f&ldquo;<a href=\"http://learningwebgl.com/\" target=\"_blank\">Learning WebGL</a>&rdquo;\u7684\u5185\u5bb9\uff0c\u90e8\u5206\u662f\u7ffb\u8bd1\uff0c\u90e8\u5206\u662f\u81ea\u5df1\u4e0d\u61c2\u7684\u5730\u65b9\u67e5\u9605\u8d44\u6599\u8865\u5145\u7684\uff0c\u4e5f\u7701\u7565\u4e86\u4e00\u4e9b\u89c9\u5f97\u4e0d\u5fc5\u89e3\u91ca\u8fc7\u7ec6\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a&ldquo;<a href=\"http://learningwebgl.com/\" target=\"_blank\">Learning WebGL</a>&rdquo;\u7684\u4e00\u4e2a\u4e2d\u6587\u7248\u3002\u4e4b\u540e\u5b66\u4e60\u7684\u5185\u5bb9\u4f1a\u5f00\u8f9f\u65b0\u7684\u7ae0\u8282\u3002</p>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u8fd9\u672c\u4e66\u7684GitBook\u4e3b\u9875\uff1a<a href=\"https://www.gitbook.com/book/csgrandeur/webgl-learn\" target=\"_blank\">https://www.gitbook.com/book/csgrandeur/webgl-learn</a></p>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u5bf9\u5e94\u7684Github\u4e3b\u9875\uff1a<a href=\"https://github.com/CSGrandeur/csgrandeur-webgl-learn\" target=\"_blank\">https://github.com/CSGrandeur/csgrandeur-webgl-learn</a></p>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u4ee3\u7801\u6f14\u793a\uff1a<a href=\"http://csgrandeur.github.io/WebGL_Learn_Code\" target=\"_blank\">http://csgrandeur.github.io/WebGL_Learn_Code</a></p>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u521d\u5b66\u8005\uff0c\u96be\u514d\u6709\u9519\u8bef\u4e0e\u758f\u6f0f\uff0c\u6b22\u8fce\u6307\u6b63\uff0c\u6211\u4f1a\u53ca\u65f6\u4fee\u6539\u66f4\u65b0\u3002</p>\n<h3 id=\"%E5%8F%82%E8%80%83\" style=\"font: bold 1.5em/1.43 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 1em; margin-bottom: 16px; word-spacing: 0px; white-space: normal; position: relative; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\">\u53c2\u8003</h3>\n<p style=\"font: 16px/25.6px 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 0px; margin-bottom: 16px; word-spacing: 0px; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px; -webkit-tap-highlight-color: transparent; -webkit-font-smoothing: antialiased;\"><a href=\"http://learningwebgl.com/\" target=\"_blank\">Learning WebGL</a><span class=\"Apple-converted-space\">&nbsp;\u4ed6\u7684\u7f51\u7ad9\u662f\uff1a<a href=\"http://learningwebgl.com/\" target=\"_blank\">http://learningwebgl.com</a><span class=\"Apple-converted-space\">&nbsp;\u3002</span></span></p>"
			}, {
				"title": "hihoCoder  1160 \u653b\u57ce\u7565\u5730",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2015/04/27/4459680.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Apr 2015 03:30:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2015/04/27/4459680.html",
				"description": "<p>&nbsp;</p>\n<p>\u539f\u56fe\u53ef\u80fd\u6709\u591a\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u5148DFS\u627e\u51fa\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\u6700\u5c0f\u8282\u70b9\uff0c\u8fd9\u4e9b\u5fc5\u7136\u662f\u8981\u653b\u5360\u7684\u57ce\u5e02\u3002</p>\n<p>\u8bbe n \u4e3a\u8282\u70b9\u6570\uff0c m \u4e3a\u8fb9\u6570\uff0c cnt \u4e3a\u521d\u59cb\u8fde\u901a\u5206\u91cf\u6570\uff0c\u5728\u5269\u4e0b\u7684\u8fb9\u6570\u4e0d\u5c0f\u4e8e m - (n - cnt) \u7684\u65f6\u5019\uff0c\u56fe\u7684\u8fde\u901a\u6027\u662f\u4e0d\u53d8\u7684\uff0c\u4e5f\u5c31\u662f\u5728\u8fd9\u4e4b\u524d\u53ef\u4ee5\u9002\u5f53\u7b56\u7565\u5220\u8fb9\u4fdd\u6301\u7ed3\u679c\u4e0d\u53d8\u3002</p>\n<p>\u5f53\u8fb9\u6570\u5c0f\u4e8e\u7b49\u4e8e m - (n - cnt) \u65f6\uff0c\u6bcf\u5220\u4e00\u6761\u8fb9\uff0c\u5fc5\u7136\u591a\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u6211\u4eec\u603b\u53ef\u4ee5\u505a\u5230\u8ba9\u591a\u51fa\u6765\u8fd9\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u6700\u5c0f\u7ed3\u70b9 \u662f\u6240\u6709\u8282\u70b9\u4e2d\u9664\u53bb\u5df2\u7ecf\u9009\u5b9a\u7684\u90a3\u4e9b\u8282\u70b9\u4e4b\u5916\u7684\u6700\u5c0f\u8282\u70b9\uff0c\u6240\u4ee5\u8fd9\u65f6\u5bf9\u8282\u70b9\u4ee5\u6743\u503c\u6392\u5e8f\u4ece\u5c0f\u5f80\u5927\u8bb0\u5230\u5220\u591f\u8fb9\u6570\u4e3a\u6b62\u3002</p>\n<p>&nbsp;</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\"> 5</span> typedef <span style=\"color: #0000ff;\">long</span> <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> LL;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">1111111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxm = <span style=\"color: #800080;\">2111111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, m, k;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> fst[maxn];\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> wt[maxn];\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> vis[maxn];\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nex[maxm], w[maxm], ntp;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #0000ff;\">void</span> AddEdge(<span style=\"color: #0000ff;\">int</span> a, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">15</span>     nex[ntp] =<span style=\"color: #000000;\"> fst[a];\n</span><span style=\"color: #008080;\">16</span>     w[ntp] =<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\">17</span>     fst[a] = ntp ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">19</span> inline <span style=\"color: #0000ff;\">int</span> min(<span style=\"color: #0000ff;\">int</span> a, <span style=\"color: #0000ff;\">int</span> b){<span style=\"color: #0000ff;\">return</span> a &lt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">int</span> nd, <span style=\"color: #0000ff;\">int</span> &amp;<span style=\"color: #000000;\">okcity)\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">if</span>(vis[nd]) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span>     vis[nd] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>     <span style=\"color: #0000ff;\">if</span>(okcity == -<span style=\"color: #800080;\">1</span> || wt[nd] &lt;<span style=\"color: #000000;\"> wt[okcity])\n</span><span style=\"color: #008080;\">25</span>         okcity =<span style=\"color: #000000;\"> nd;\n</span><span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = fst[nd]; i != -<span style=\"color: #800080;\">1</span>; i =<span style=\"color: #000000;\"> nex[i])\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        DFS(w[i], okcity);\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">31</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> t, ca;\n</span><span style=\"color: #008080;\">32</span>     <span style=\"color: #0000ff;\">for</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;t), ca = <span style=\"color: #800080;\">1</span>; ca &lt;= t; ca ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">34</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a, b;\n</span><span style=\"color: #008080;\">35</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;m, &amp;<span style=\"color: #000000;\">k);\n</span><span style=\"color: #008080;\">36</span>         memset(fst, -<span style=\"color: #800080;\">1</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(fst));\n</span><span style=\"color: #008080;\">37</span>         memset(vis, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(vis));\n</span><span style=\"color: #008080;\">38</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt;= n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">39</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">wt[i]);\n</span><span style=\"color: #008080;\">40</span>         ntp = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">41</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; m; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">43</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;a, &amp;<span style=\"color: #000000;\">b);\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">            AddEdge(a, b);\n</span><span style=\"color: #008080;\">45</span> <span style=\"color: #000000;\">            AddEdge(b, a);\n</span><span style=\"color: #008080;\">46</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">47</span>         <span style=\"color: #0000ff;\">int</span> cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">48</span>         LL ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">49</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt;= n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">50</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">51</span>             <span style=\"color: #0000ff;\">int</span> okcity = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">52</span> <span style=\"color: #000000;\">            DFS(i, okcity);\n</span><span style=\"color: #008080;\">53</span>             <span style=\"color: #0000ff;\">if</span>(okcity != -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">54</span>                 cnt ++, ans += wt[okcity], vis[okcity] = <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">55</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">56</span> \n<span style=\"color: #008080;\">57</span>         <span style=\"color: #0000ff;\">if</span>((k -= m - (n - cnt)) &gt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">58</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">59</span>             <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\">60</span>             <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>, j = <span style=\"color: #800080;\">1</span>; i &lt;= n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">61</span>                 <span style=\"color: #0000ff;\">if</span>(vis[i] != <span style=\"color: #800080;\">2</span>) wt[j ++] =<span style=\"color: #000000;\"> wt[i];\n</span><span style=\"color: #008080;\">62</span>             std::sort(wt + <span style=\"color: #800080;\">1</span>, wt +<span style=\"color: #000000;\"> j);\n</span><span style=\"color: #008080;\">63</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; k &gt; <span style=\"color: #800080;\">0</span> &amp;&amp; i &lt;= j; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">64</span>                 ans += wt[i], k --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">65</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">66</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Case #%d: %lld\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ca, ans);\n</span><span style=\"color: #008080;\">67</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">68</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">69</span> }</pre>\n</div>\n<p>&nbsp;</p>"
			}, {
				"title": "HDU 5212 Code",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2015/04/27/4459438.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Apr 2015 02:44:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2015/04/27/4459438.html",
				"description": "<p>&nbsp;</p>\n<p>\u7b5b\u6cd5\u3002</p>\n<p>\u7edf\u8ba1\u6240\u6709 [\u6570] \u7684\u6240\u6709 [\u500d\u6570] \u7684 [\u6570] \u7684\u4e2a\u6570\uff0c\u5373 i&nbsp;\u7684\u6240\u6709\u500d\u6570 i, 2i, 3i, 4i...\u4e2a\u6570\u4e3a dp[i]\uff0c</p>\n<p>\u5219\u6240\u6709&nbsp;\u500d\u6570\u4e24\u4e24\u7ed3\u5408\u5171\u6709 dp[i] * dp[i]&nbsp;\u4e2a\u3002</p>\n<p>\u6b64\u5904\u8986\u76d6 dp[i] = dp[i] * dp[i]\u3002</p>\n<p>\u5bf9\u4e8e\u65b0\u7684 dp[i]&nbsp;\u6570\u7ec4\uff0c\u4ece\u540e\u5f80\u524d\u9006\u63a8\uff0c\u8bbe\u5df2\u5b8c\u6210\u7684\u5b50\u95ee\u9898 d[j]&nbsp;\u4e3a&nbsp;j&nbsp;\u4f5c\u4e3a [\u6700\u5927\u516c\u7ea6\u6570] \u7684\u6240\u6709\u6570\u5bf9\u7684\u4e2a\u6570\u3002</p>\n<p>\u56e0\u4e3a dp[i] \u662f\u6240\u6709\u4ee5 i&nbsp;\u4e3a [\u516c\u7ea6\u6570] \u7684\u6570\u5bf9\u4e2a\u6570\uff0cdp[i] \u53bb\u6389 [ i&nbsp;\u662f\u516c\u7ea6\u6570] \u4f46&nbsp;[ i \u4e0d\u662f\u6700\u5927\u516c\u7ea6\u6570] \u7684\u90a3\u4e9b\u6570\u5bf9\u7684\u4e2a\u6570\uff08\u5373\u6240\u6709\u7684 [ j&nbsp;\u662f i&nbsp;\u7684\u500d\u6570 ]&nbsp;\u7684d[j]\uff09\u5219\u5f97\u5230 d[i]\uff08\u4ee3\u7801\u4e2d\u76f8\u5f53\u4e8e d[i]&nbsp;\u8986\u76d6 dp[i]\uff09\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> typedef <span style=\"color: #0000ff;\">long</span> <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> LL;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #0000ff;\">int</span> dp[<span style=\"color: #800080;\">11111</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">int</span> num[<span style=\"color: #800080;\">11111</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">int</span> sum[<span style=\"color: #800080;\">11111</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;n) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">int</span> maxnum = <span style=\"color: #800080;\">0</span>, ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>         memset(sum, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(sum));\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">17</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">num[i]);\n</span><span style=\"color: #008080;\">18</span>             sum[num[i]] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>             maxnum = maxnum &lt; num[i] ?<span style=\"color: #000000;\"> num[i] : maxnum;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         memset(dp, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(dp));\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">2</span>; i &lt;= maxnum; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">24</span> \n<span style=\"color: #008080;\">25</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = i; j &lt;= maxnum; j +=<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">27</span>                 dp[i] +=<span style=\"color: #000000;\"> sum[j];\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">29</span>             dp[i] *=<span style=\"color: #000000;\"> dp[i];\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">31</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = maxnum; i &gt;= <span style=\"color: #800080;\">2</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">33</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = i + i; j &lt;= maxnum; j +=<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">34</span>                 dp[i] -=<span style=\"color: #000000;\"> dp[j];\n</span><span style=\"color: #008080;\">35</span>             ans = (ans + (LL)i * (i - <span style=\"color: #800080;\">1</span>) * dp[i]) % <span style=\"color: #800080;\">10007</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">37</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">39</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">40</span> }</pre>\n</div>\n<p>&nbsp;</p>"
			}, {
				"title": "Ubuntu 14.04 MySQL\u540c\u6b65",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2014/10/10/4016186.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Fri, 10 Oct 2014 08:15:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2014/10/10/4016186.html",
				"description": "<p><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u4e3b\u670d\u52a1\u5668\uff1a192.168.2.212</span></p>\n<div><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u4ece\u670d\u52a1\u5668\uff1a192.168.2.211</span></div>\n<div><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">&nbsp;</span></div>\n<div><span style=\"color: #444444; font-family: \u5b8b\u4f53; font-size: 14px; background-color: #ffffff;\">\u4e3b\u670d\u52a1\u5668\uff08192.168.2.212\uff09\uff1a</span></div>\n<div><span style=\"color: #444444; font-family: \u5b8b\u4f53; font-size: 14px; background-color: #ffffff;\">\u5148\u5230/etc/mysql/my.cnf\u4e0b \u5c06</span></div>\n<div>\n<div class=\"cnblogs_code\">\n<pre>bind-address <span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span></pre>\n</div>\n<p><span style=\"color: #444444; font-family: \u5b8b\u4f53; font-size: 14px; background-color: #ffffff;\">\u6ce8\u91ca\u6389</span></p>\n</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre>#bind-address <span style=\"color: #800080;\">127.0</span>.<span style=\"color: #800080;\">0.1</span></pre>\n</div>\n<p><span style=\"color: #444444; font-family: \u5b8b\u4f53; font-size: 14px; background-color: #ffffff;\">\u5141\u8bb8\u975e\u672c\u673a\u8bbf\u95ee\u3002</span></p>\n</div>\n<div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u767b\u9646mysql</span></p>\n<div class=\"cnblogs_code\">\n<pre>mysql -uroot -p</pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">grant</span> <span style=\"color: #0000ff;\">replication</span> slave,reload,super <span style=\"color: #0000ff;\">on</span> <span style=\"color: #808080;\">*</span>.<span style=\"color: #808080;\">*</span> <span style=\"color: #0000ff;\">to</span> slave<span style=\"color: #008000;\">@192</span>.<span style=\"color: #800000; font-weight: bold;\">168.2</span>.<span style=\"color: #800000; font-weight: bold;\">211</span> identified <span style=\"color: #0000ff;\">by</span> <span style=\"color: #ff0000;\">'</span><span style=\"color: #ff0000;\">123456</span><span style=\"color: #ff0000;\">'</span></pre>\n</div>\n<p><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u53ef\u4ee5\u5728\u4ece\u670d\u52a1\u5668\uff08192.168.2.211\uff09\u8fdc\u7a0b\u6d4b\u8bd5\u4e00\u4e0b</span></p>\n<div class=\"cnblogs_code\">\n<pre>mysql -uslave -h192.<span style=\"color: #800080;\">168.2</span>.<span style=\"color: #800080;\">212</span> -p</pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u4fee\u6539\u4e3b\u670d\u52a1\u5668my.cnf</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> nano /etc/mysql/my.cnf</pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u4ee5\u4e0b\u5185\u5bb9\u5fc5\u987b\u5728[mysqld]\u6a21\u5757\u4e2d</span></p>\n<div class=\"cnblogs_code\">\n<pre>server-id=1<span style=\"color: #000000;\">\nlog_bin</span>=<span style=\"color: #000000;\">/var/log/mysql/mysql-bin.log\nbinlog_do_db</span>=<span style=\"color: #000000;\">ccs\nbinlog_ignore_db</span>=mysql</pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">do_db\u548cignore_db\u5206\u522b\u662f\u540c\u6b65\u7684\u6570\u636e\u5e93\u548c\u4e0d\u540c\u6b65\u7684\u6570\u636e\u5e93\uff0c\u6709\u591a\u6761\u5c31\u5199\u591a\u884c\u3002</span></p>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u91cd\u542fmysql</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> /etc/init.d/mysql restart</pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u8fdbmysql</span></p>\n<div class=\"cnblogs_code\">\n<pre>mysql <span style=\"color: #808080;\">-</span>uroot <span style=\"color: #808080;\">-</span>p</pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre>show variables <span style=\"color: #808080;\">like</span> <span style=\"color: #ff0000;\">'</span><span style=\"color: #ff0000;\">log%</span><span style=\"color: #ff0000;\">'</span>;</pre>\n</div>\n<p><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">log_bin\u5e94\u8be5\u4e3aON</span></p>\n<div class=\"cnblogs_code\">\n<pre>show master status;</pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u5219\u80fd\u770b\u5230\u5bf9\u5e94\u5f97file position \u4fe1\u606f\uff0c\u8fd9\u4e9b\u5728\u4ece\u673a\u8bbe\u7f6e\u7684\u65f6\u5019\u8981\u7528\u5230\u3002</span></p>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">&nbsp;</span></p>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u4ece\u670d\u52a1\u5668\uff08192.168.2.211\uff09\uff1a</span></p>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u914d\u7f6emy.cnf</span></p>\n<div class=\"cnblogs_code\">\n<pre>server-id=2<span style=\"color: #000000;\">\nlog_bin</span>=<span style=\"color: #000000;\">/var/log/mysql/mysql-bin.log\nreplicate_do_db</span>=ccs</pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u91cd\u542fmysql</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> /etc/init.d/mysql restart</pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u8fdbmysql\uff1a</span></p>\n<div class=\"cnblogs_code\">\n<pre>mysql <span style=\"color: #808080;\">-uroot <span style=\"color: #808080;\">-p</span></span></pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre>stop slave;</pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\">&nbsp;<span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u7136\u540e\u8bbe\u7f6e\u4ecemaster\u590d\u5236\u65e5\u5fd7\u914d\u7f6e</span></p>\n<div class=\"cnblogs_code\">\n<pre>CHANGE MASTER <span style=\"color: #0000ff;\">TO</span><span style=\"color: #000000;\">\nMASTER_HOST</span><span style=\"color: #808080;\">=</span><span style=\"color: #ff0000;\">'</span><span style=\"color: #ff0000;\">192.168.2.212</span><span style=\"color: #ff0000;\">'</span><span style=\"color: #000000;\">,\nMASTER_USER</span><span style=\"color: #808080;\">=</span><span style=\"color: #ff0000;\">'</span><span style=\"color: #ff0000;\">slave</span><span style=\"color: #ff0000;\">'</span><span style=\"color: #000000;\">,\nMASTER_PASSWORD</span><span style=\"color: #808080;\">=</span><span style=\"color: #ff0000;\">'</span><span style=\"color: #ff0000;\">123456</span><span style=\"color: #ff0000;\">'</span><span style=\"color: #000000;\">,\nMASTER_PORT</span><span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">3306</span><span style=\"color: #000000;\">,\nMASTER_LOG_FILE</span><span style=\"color: #808080;\">=</span><span style=\"color: #ff0000;\">'</span><span style=\"color: #ff0000;\">mysql-bin.000006</span><span style=\"color: #ff0000;\">'</span><span style=\"color: #000000;\">,\nMASTER_LOG_POS</span><span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">277</span><span style=\"color: #000000;\">,\nMASTER_CONNECT_RETRY</span><span style=\"color: #808080;\">=</span><span style=\"color: #800000; font-weight: bold;\">10</span>;</pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">LOG_FILE\u548cLOG_POS\u5219\u662f\u5728master\u4e0bshow master status\u65f6\u5019\u770b\u5230\u7684file position\u4fe1\u606f\u3002</span></p>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">CONNECT_RETRY\u662f\u6bcf\u6b21\u91cd\u8fde\u7684\u65f6\u95f4\u95f4\u9694</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">start slave;\nshow slave status\\G</span></pre>\n</div>\n<p style=\"margin: 5px 0px; color: #444444; font-family: 'Microsoft Yahei', 'Helvetica Neue', 'Luxi Sans', 'DejaVu Sans', Tahoma, 'Hiragino Sans GB', STHeiti; font-size: 16px; background-color: inherit;\"><span style=\"font-family: \u5b8b\u4f53; font-size: 14px;\">\u5728\u51fa\u73b0\u7684\u4fe1\u606f\u4e2d\u627e\u5230 Slave_IO_Running/Slave_SQL_Running \uff0c\u90fd\u4e3aYES\u5219\u6210\u529f\u4e86\u3002</span></p>\n</div>"
			}, {
				"title": "Ubuntu \u7528vsftpd \u914d\u7f6eFTP\u670d\u52a1\u5668",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2014/05/26/3754126.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 26 May 2014 14:59:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2014/05/26/3754126.html",
				"description": "<p><span style=\"font-size: 14px;\"><span style=\"color: #333333; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: 'Microsoft Yahei'; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">\u7f51\u4e0a\u7684\u6587\u7ae0\u597d\u96be\u61c2\u554a\u3002\u3002\u53ea\u60f3\u8981\u7b80\u5355\u7c97\u66b4\uff0c\u5f04\u597d\u80fd\u7528\u5c31\u884c\u554a\uff0c\u590d\u6742\u7684\u4ee5\u540e\u7814\u7a76\u4e0d\u884c\u5417\u3002\u3002\u3002\u6298\u817e\u597d\u4e45\uff0c\u5176\u5b9e\u5f04\u51fa\u6765\u80fd\u7528\u4e0d\u5c31\u8fd9\u4e48\u70b9\u5185\u5bb9\u5417\u3002\u3002\u3002</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"color: #333333; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: 'Microsoft Yahei'; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">\u672c</span></span><span style=\"font-size: 14px;\"><span style=\"color: #333333; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: 'Microsoft Yahei'; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">\u6587\u5728Ubuntu Server 14.04 amd64\u7cfb\u7edf\u6d4b\u8bd5\u3002</span></span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"color: #333333; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: 'Microsoft Yahei'; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Made By\uff1a<a href=\"http://www.cnblogs.com/CSGrandeur/\">CSGrandeur</a></span></span></p>\n<p><strong style=\"color: #333333; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: 'Microsoft Yahei'; font-size: large; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">\u5b89\u88c5ftp</strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> apt-get <span style=\"color: #0000ff;\">install</span> vsftpd</pre>\n</div>\n<p><strong style=\"color: #333333; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: 'Microsoft Yahei'; font-size: large; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"color: #333333; font-family: Microsoft Yahei; font-size: large; background-color: #ffffff;\">\u914d\u7f6evsftpd.conf</span></strong></strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> nano /etc/vsftpd.conf</pre>\n</div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">#\u7981\u6b62\u533f\u540d\u8bbf\u95ee\nanonymous_enable=NO\n#\u63a5\u53d7\u672c\u5730\u7528\u6237\nlocal_enable=YES\n#\u5141\u8bb8\u4e0a\u4f20\nwrite_enable=YES\n#\u7528\u6237\u53ea\u80fd\u8bbf\u95ee\u9650\u5236\u7684\u76ee\u5f55\nchroot_local_user=YES\n#\u8bbe\u7f6e\u56fa\u5b9a\u76ee\u5f55\uff0c\u5728\u7ed3\u5c3e\u6dfb\u52a0\u3002\u5982\u679c\u4e0d\u6dfb\u52a0\u8fd9\u4e00\u884c\uff0c\u5404\u7528\u6237\u5bf9\u5e94\u81ea\u5df1\u7684\u76ee\u5f55\uff0c\u5f53\u7136\u8fd9\u4e2a\u6587\u4ef6\u5939\u81ea\u5df1\u5efa\nlocal_root=/home/ftp</span></pre>\n</div>\n<p><span style=\"font: 14px/normal Arial; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">\u770b\u7f51\u4e0a\u8bf4\u52a0\u4e00\u884c&ldquo;pam_service_name=vsftpd&rdquo;\uff0c\u6211\u770b\u6211\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u672c\u6765\u5c31\u6709\uff0c\u5c31\u4e0d\u7ba1\u4e86\u3002</span></p>\n<p><span style=\"font: 14px/normal Arial; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"color: #333333; font-family: Microsoft Yahei; font-size: large; background-color: #ffffff;\">\u6dfb\u52a0ftp\u7528\u6237</span></strong></span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> useradd -d /home/<span style=\"color: #0000ff;\">ftp</span> -<span style=\"color: #000000;\">M ftpuser\n</span><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">passwd</span> ftpuser</pre>\n</div>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"color: #333333; font-family: Microsoft Yahei; font-size: large; background-color: #ffffff;\">\u8c03\u6574\u6587\u4ef6\u5939\u6743\u9650</span></strong></p>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"background-color: inherit;\">\u8fd9\u4e2a\u662f\u907f\u514d</span></span><span style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">&ldquo;500 OOPS: vsftpd: refusing to run with writable root inside chroot()&rdquo;</span></strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">chmod</span> a-<span style=\"color: #0000ff;\">w</span> /home/<span style=\"color: #0000ff;\">ftp</span>\n<span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">mkdir</span> /home/<span style=\"color: #0000ff;\">ftp</span>/data</pre>\n</div>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;\">\u8fd9\u6837\u767b\u5f55\u4e4b\u540e\u4f1a\u770b\u5230data\u6587\u4ef6\u5939\uff0c\u867d\u7136\u7a0d\u9ebb\u70e6\uff0c\u539f\u56e0\u4e0d\u8868\u4e86\u3002\u3002\u67e5\u8d44\u6599\u8fd9\u4e48\u8f9b\u9178\u5df2\u7ecf\u4e0d\u6613\u3002\u3002</span></span></strong></p>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"color: #333333; font-family: Microsoft Yahei; font-size: large; background-color: #ffffff;\">\u6539pam.d/vsftpd</span></strong></p>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;\">\u8fd9\u65f6\u5019\u76f4\u63a5\u7528useradd\u7684\u5e10\u53f7\u767b\u5f55ftp\u4f1a530 login incorrect</span></strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> nano /etc/pam.d/vsftpd</pre>\n</div>\n<p><span style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;\">\u6ce8\u91ca\u6389&nbsp;</span></p>\n<div class=\"cnblogs_code\">\n<pre>#auth    required pam_shells.so</pre>\n</div>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><strong style=\"color: #333333; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: 'Microsoft Yahei'; font-size: large; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u91cd\u542fvsftpd</strong></span></strong></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> service vsftpd restart</pre>\n</div>\n<p>\u8fd9\u65f6\u5c31\u53ef\u4ee5\u7528\u521a\u624d\u5efa\u7684ftpuser\u8fd9\u4e2a\u7528\u6237\u767b\u5f55ftp\u4e86\uff0c\u770b\u5230\u7684\u662flocal_root\u8bbe\u7f6e\u7684/home/ftp\uff0c\u5e76\u4e14\u9650\u5236\u5728\u8be5\u76ee\u5f55\u3002</p>\n<p style=\"font: 14px/normal Arial; margin: 5px 0px; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u7528<a href=\"ftp://xxx.xxx.xxx.xxx\">ftp://xxx.xxx.xxx.xxx</a>\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u7528ftp\u8f6f\u4ef6\u6bd4\u5982flashFXP\uff0c\u5bc6\u7801\u5c31\u662fftpuser\u7684\u5bc6\u7801\u3002</p>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #333333; font-family: Microsoft Yahei; font-size: large; background-color: inherit;\">\u5173\u4e8e\u7528\u6237\u8bbf\u95ee\u6587\u4ef6\u5939\u9650\u5236</span></strong></p>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font: 14px/normal Arial; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">\u7531chroot_local_user\u3001</span><span style=\"font: 14px/normal Arial; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">chroot_list_enable\u3001</span><span style=\"font: 14px/normal Arial; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">chroot_list_file\u8fd9\u4e09\u4e2a\u6587\u4ef6\u63a7\u5236\uff0c\u8f6c<a href=\"http://blog.csdn.net/dongtingzhizi/article/details/12028627\">\u522b\u4eba</a>\u7684\u4e00\u6bb5\u8bdd\uff1a</span></strong></p>\n<p><span style=\"color: #808080; font-family: \u6977\u4f53; font-size: 14px;\">\u9996\u5148\uff0cchroot_list_enable\u597d\u7406\u89e3\uff0c\u5c31\u662f\uff1a\u662f\u5426\u542f\u7528chroot_list_file\u914d\u7f6e\u7684\u6587\u4ef6\uff0c\u5982\u679c\u4e3aYES\u8868\u793achroot_list_file\u914d\u7f6e\u7684\u6587\u4ef6\u751f\u6548\uff0c\u5426\u5219\u4e0d\u751f\u6548\uff1b</span><br /><span style=\"color: #808080; font-family: \u6977\u4f53; font-size: 14px;\">\u7b2c\u4e8c\uff0cchroot_list_file\u4e5f\u7b80\u5355\uff0c\u914d\u7f6e\u4e86\u4e00\u4e2a\u6587\u4ef6\u8def\u5f84\uff0c\u9ed8\u8ba4\u662f/etc/vsftpd.chroot_list\uff0c\u8be5\u6587\u4ef6\u4e2d\u4f1a\u586b\u5165\u4e00\u4e9b\u8d26\u6237\u540d\u79f0\u3002\u4f46\u662f\u8fd9\u4e9b\u8d26\u6237\u7684\u610f\u4e49\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u662f\u8ddf\u914d\u7f6e\u9879chroot_local_user\u6709\u5173\u7684\u3002\u540e\u4e00\u6761\u4e2d\u8bf4\u660e\uff1b</span><br /><span style=\"color: #808080; font-family: \u6977\u4f53; font-size: 14px;\">\u7b2c\u4e09\uff0cchroot_local_user\u4e3aYES\u8868\u793a\u6240\u6709\u7528\u6237\u90fd*\u4e0d\u80fd*\u5207\u6362\u5230\u4e3b\u76ee\u5f55\u4e4b\u5916\u5176\u4ed6\u76ee\u5f55\uff0c\u4f46\u662f\uff01\u9664\u4e86chroot_list_file\u914d\u7f6e\u7684\u6587\u4ef6\u5217\u51fa\u7684\u7528\u6237\u3002chroot_local_user\u4e3aNO\u8868\u793a\u6240\u6709\u7528\u6237\u90fd*\u80fd*\u5207\u6362\u5230\u4e3b\u76ee\u5f55\u4e4b\u5916\u5176\u4ed6\u76ee\u5f55\uff0c\u4f46\u662f\uff01\u9664\u4e86chroot_list_file\u914d\u7f6e\u7684\u6587\u4ef6\u5217\u51fa\u7684\u7528\u6237\u3002\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0cchroot_list_file\u5217\u51fa\u7684&ldquo;\u4f8b\u5916\u60c5\u51b5&rdquo;\u7684\u7528\u6237\u3002</span></p>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"color: #333333; font-family: Microsoft Yahei; font-size: large; background-color: #ffffff;\">&nbsp;\u5982\u679c\u5ba2\u6237\u7aef\u767b\u5f55\u65f6\u5019\u63d0\u793a&ldquo;\u4ee5pasv\u6a21\u5f0f\u8fde\u63a5\u5931\u8d25&rdquo;</span></strong></p>\n<p style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; margin: 5px 0px; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u7f16\u8f91/etc/vsftpd.conf</span></p>\n<p style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; margin: 5px 0px; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u6700\u540e\u6dfb\u52a0</span></p>\n<div class=\"cnblogs_code\">\n<pre>pasv_promiscuous=YES</pre>\n</div>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;\">\u7136\u540e\u518d\u91cd\u542fvsftpd\u670d\u52a1\u3002</span></strong></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>"
			}, {
				"title": "Ubuntu14.04 Server amd64 \u914d\u7f6e Apache+MySQL+Django",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2014/05/21/3741871.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 21 May 2014 10:23:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2014/05/21/3741871.html",
				"description": "<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font-size: 18px;\"><strong>\u5199\u5728\u524d\u9762</strong></span></div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u56e0\u4e3a\u4e0d\u540c\u7248\u672c\u7684apache\u7b49\u8f6f\u4ef6\u6587\u4ef6\u5939\u548c\u914d\u7f6e\u6587\u4ef6\u7684\u540d\u79f0\u8bbe\u7f6e\u90fd\u4e0d\u5c3d\u76f8\u540c\uff0c\u7f51\u4e0a\u7d2f\u6b7b\u7d2f\u6d3b\u67e5\u4e86\u597d\u591a\u4e2a\u535a\u5ba2\u5c31\u6ca1\u4e00\u4e2a\u80fd\u6210\u529f\u914d\u51fa\u6765\u7684\u3002</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u6240\u4ee5\u672c\u6587\u4e5f\u4e0d\u4e00\u5b9a\u80fd\u5e2e\u5230\u4f60\uff0c\u8bf7\u5728\u786e\u5b9a\u5bf9\u81ea\u5df1\u6709\u7528\u4e4b\u524d\u4e0d\u8981\u76f2\u76ee\u8f6c\u8f7d\uff0c\u4ee5\u514d\u7ed9\u540e\u6765\u4eba\u5236\u9020\u66f4\u591a\u7684\u4fe1\u606f\u7b5b\u9009\u8d1f\u62c5\u3002</div>\n</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">Made By\uff1a<a href=\"http://www.cnblogs.com/CSGrandeur/\">CSGrandeur</a></div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">&nbsp;</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><strong><span style=\"font-size: 18px;\">\u5199\u672c\u6587\u65f6\u5404\u8f6f\u4ef6\u7684\u7248\u672c</span></strong></div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">apache2\uff1a2.4</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">Django\uff1a1.6.1</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">MySQL\uff1a5.5.37</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">Python\uff1a2.7.6</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">apache\u7248\u672c\u4e0d\u540c\uff0c\u914d\u7f6e\u6587\u4ef6\u7684\u5730\u65b9\u548c\u540d\u79f0\u53ef\u80fd\u4e0d\u540c\u3002\u6bd4\u5982\u770b\u7f51\u4e0a\u7684\u6559\u7a0b\uff0c\u4f5c\u6b7b\u4e5f\u627e\u4e0d\u5230httpd.conf\u3002\u3002\u3002</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">&nbsp;</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font-size: large; background-color: inherit;\">\u5404\u79cd\u5b89\u88c5</span></strong></div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u5148\u8003\u8651\u8981\u4e0d\u8981</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> apt-<span style=\"color: #000000;\">get update\n</span><span style=\"color: #0000ff;\">sudo</span> apt-get upgrade</pre>\n</div>\n<p>\u7136\u540e</p>\n</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">python\u662f\u9884\u88c5\u7684\uff0cpython --version\u67e5\u770b</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u88c5Apache\u3001wsgi\u3001Django\u3001MySQL\u3001MySQLdb</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> apt-get <span style=\"color: #0000ff;\">install</span><span style=\"color: #000000;\"> apache2 \n</span><span style=\"color: #0000ff;\">sudo</span> apt-get <span style=\"color: #0000ff;\">install</span> libapache2-mod-<span style=\"color: #000000;\">wsgi\n</span><span style=\"color: #0000ff;\">sudo</span> apt-get <span style=\"color: #0000ff;\">install</span> python-<span style=\"color: #000000;\">django\n</span><span style=\"color: #0000ff;\">sudo</span> apt-get <span style=\"color: #0000ff;\">install</span> mysql-server mysql-<span style=\"color: #000000;\">client\n</span><span style=\"color: #0000ff;\">sudo</span> apt-get <span style=\"color: #0000ff;\">install</span> python-mysqldb</pre>\n</div>\n<p>&nbsp;</p>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font-size: large; background-color: inherit;\">\u8bbe\u7f6eapache\u6587\u4ef6\u5939\u6743\u9650</span></strong></p>\n</div>\n<div style=\"background-color: inherit;\">\n<div class=\"cnblogs_code\">\n<pre>cd /etc/<span style=\"color: #000000;\">apache2\n</span><span style=\"color: #0000ff;\">sudo</span> nano apache2.conf</pre>\n</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u627e\u5230</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">Directory </span><span style=\"color: #0000ff;\">/&gt;</span><span style=\"color: #000000;\">\n        Options FollowSymLinks\n        AllowOverride None\n        #Require all denied\n        Allow from all\n</span><span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">Directory</span><span style=\"color: #0000ff;\">&gt;</span></pre>\n</div>\n<p>\u4e95\u53f7\u662f\u6211\u52a0\u7684\uff0cAlow from all\u4e5f\u662f\u52a0\u7684\uff0c\u6539\u6210\u8fd9\u4e2a\u6837\u5b50\u5c31\u662f\u4e86\u3002</p>\n</div>\n</div>\n<div style=\"background-color: inherit;\">&nbsp;</div>\n<div style=\"background-color: inherit;\"><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: large; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u5efa\u7acbDjango\u5de5\u7a0b\u76ee\u5f55</strong></div>\n<div style=\"background-color: inherit;\">\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u4e0d\u5efa\u8bae\u5efa\u5728/var/www\uff0c\u5982\u679c\u7cfb\u7edf\u8bbe\u7f6e\u95ee\u9898\u5bfc\u81f4\u4e0d\u8bc6\u522b.py\u4e3a\u7f51\u9875\u6587\u4ef6\u65f6\uff0c/var/www\u4f5c\u4e3aApache\u9ed8\u8ba4Web\u6587\u4ef6\u5939\uff0c.py\u6e90\u6587\u4ef6\u5c06\u53ef\u4ee5\u88ab\u4e0b\u8f7d\u800c\u6cc4\u6f0f\u3002</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u6211\u628a\u6587\u4ef6\u653e\u5728\u4e86/home/djangoapps/</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">mkdir</span> /home/<span style=\"color: #000000;\">djangoapps\n</span><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">mkdir</span> /home/djangoapps/work</pre>\n</div>\n<p>\u521b\u5efaDjango\u5de5\u7a0b\uff08\u7f51\u9875\u6587\u4ef6\u5939\uff09</p>\n</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre>cd /home/djangoapps/<span style=\"color: #000000;\">work\ndjango</span>-admin startproject mysite</pre>\n</div>\n<p>&nbsp;</p>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font-size: large; background-color: inherit;\">\u5efawsgi</span></strong></p>\n\u5728\u968f\u4fbf\u54ea\u91cc\u5efawsgi\uff0c\u6bd4\u5982<br />\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> nano /home/djangoapps/work/mysite/apache/django.wsgi</pre>\n</div>\n<p>\u586b\u5165\u5982\u4e0b\u5185\u5bb9</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> os\n</span><span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> sys\npath </span>= <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">/home/djangoapps/work/mysite</span><span style=\"color: #800000;\">'</span>\n<span style=\"color: #0000ff;\">if</span> path <span style=\"color: #0000ff;\">not</span> <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> sys.path:\n    sys.path.insert(0, </span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">/home/djangoapps/work/mysite</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\nos.environ[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">DJANGO_SETTINGS_MODULE</span><span style=\"color: #800000;\">'</span>] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">mysite.settings</span><span style=\"color: #800000;\">'</span>\n<span style=\"color: #0000ff;\">import</span><span style=\"color: #000000;\"> django.core.handlers.wsgi\napplication </span>= django.core.handlers.wsgi.WSGIHandler()</pre>\n</div>\n<p>path\u662f\u521a\u521b\u5efa\u7684\u5de5\u7a0b\u6587\u4ef6\u5939\u4f4d\u7f6e\uff0c\u5bf9\u5e94\"mysite\"\u7684\u5730\u65b9\u90fd\u662f\u5bf9\u5e94\u90a3\u4e2a\u5de5\u7a0b\u7684\u540d\u5b57\u3002</p>\n<p>&nbsp;</p>\n<p><strong style=\"color: #000000; text-transform: none; line-height: normal; text-indent: 0px; letter-spacing: normal; font-family: \u5fae\u8f6f\u96c5\u9ed1; font-size: 14px; font-style: normal; font-variant: normal; word-spacing: 0px; white-space: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><span style=\"font-size: large; background-color: inherit;\">\u5efa\u7ad9\u70b9\u8bbe\u7f6e\u6587\u4ef6</span></strong></p>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u53bb/etc/apache2/sites-available/\u5efa\u7ad9\u70b9\u8bbe\u7f6e\u6587\u4ef6</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre>cd /etc/apache2/sites-<span style=\"color: #000000;\">available\n</span><span style=\"color: #0000ff;\">sudo</span> nano mysite.conf</pre>\n</div>\n<p>\u586b\u5165\u5982\u4e0b\u5185\u5bb9</p>\n</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div style=\"background-color: inherit;\">\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">VirtualHost </span><span style=\"color: #ff0000;\">*:80</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">\n    #ServerName hello.djangoserver\n    DocumentRoot /home/djangoapps/work/mysite \n    </span><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">Directory </span><span style=\"color: #ff0000;\">/home/djangoapps/work/mysite</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">  \n        Order allow,deny\n        Allow from all\n    </span><span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">Directory</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">\n    WSGIDaemonProcess mydjangosite processes=2 threads=15 display-name=%{GROUP}\n    WSGIProcessGroup mydjangosite\n    WSGIScriptAlias / /home/djangoapps/work/mysite/apache/django.wsgi\n</span><span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">VirtualHost</span><span style=\"color: #0000ff;\">&gt;</span></pre>\n</div>\n<p>\u4e3a\u4e86\u8ba9\u5185\u5bb9\u5e72\u51c0\uff0c\u89e3\u91ca\u5c31\u5728\u5916\u9762\u8bf4\u4e86\uff1a</p>\n</div>\n</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">ServerName\u8fd9\u91cc\u6ce8\u91ca\u6389\u4e86\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u57df\u540d\u7684\uff0c\u8bbe\u7f6e\u8fd9\u91cc\u7684\u8bdd\u5176\u4ed6\u5730\u65b9\u4e5f\u8981\u914d\u5408\u8bbe\u7f6e</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u4e24\u4e2a\u8def\u5f84\u90fd\u662f\u521a\u521a\u5efa\u7684\u5de5\u7a0b\u7684\u8def\u5f84</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u5173\u4e8eWSGIxxxx\u4e09\u6761\u8bbe\u7f6e\u540e\u9762\u518d\u8bf4\u3002</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">WSGIScriptAlias \u7a7a\u683c / \u7a7a\u683c /wsgi\u7684\u8def\u5f84\u3002\u524d\u9762\u90a3\u4e2a'/'\u53ef\u4ee5\u662f/xxxx\u4ec0\u4e48\u7684\uff0c\u8bbf\u95ee\u7684\u65b9\u5f0f\u662f localhost/xxxx\uff0c\u4e0d\u8fc7\u6211\u6ca1\u6210\u529f@_@\uff0c\u6240\u4ee5\u5c31\u4e00\u4e2a\u5b64\u96f6\u96f6\u7684 '/'\u5427\u3002</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">&nbsp;</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><strong style=\"background-color: inherit;\"><span style=\"font-size: large; background-color: inherit;\">\u542f\u52a8\u7ad9\u70b9</span></strong></div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u522b\u79bb\u5f00/etc/apache2/sites-available</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span><span style=\"color: #000000;\"> a2ensite mysite\n</span><span style=\"color: #0000ff;\">sudo</span> service apache2 reload</pre>\n</div>\n<p>Django\u7ad9\u70b9\u5df2\u7ecf\u914d\u7f6e\u597d\u4e86\uff0c\u4f46\u662f\u8fd9\u65f6\u8bbf\u95ee127.0.0.1\u770b\u5230\u7684\u662fapache\u9875\u9762\u3002</p>\n</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">&nbsp;</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><strong style=\"background-color: inherit;\"><span style=\"font-size: large; background-color: inherit;\">\u5173\u4e8e\u7aef\u53e3</span></strong></div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u5728/etc/apache2/sites-available\u53ef\u4ee5\u770b\u5230000-default.conf\uff0c\u8fd9\u4e2a\u5c31\u662fapache\u9ed8\u8ba4\u7684\u7ad9\u70b9\uff0c\u5bf9\u5e94/var/www/html</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u5982\u679c\u90fd\u752880\u7aef\u53e3\u7684\u8bdd\uff0c\u8bbf\u95ee\u5230\u7684\u662fapache\uff0c\u800c\u4e0d\u662f\u521a\u5efa\u7684django\u3002</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u53ef\u4ee5\u5173\u95ed\u8fd9\u4e2a\u7ad9\u70b9\uff0c</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> a2dissite <span style=\"color: #800080;\">000</span>-<span style=\"color: #000000;\">default\n</span><span style=\"color: #0000ff;\">sudo</span> service apache2 reload</pre>\n</div>\n<p>\u8fd9\u65f6\u5c31\u80fd\u6b63\u5e38\u8bbf\u95ee\u521a\u5efa\u7684django\u7ad9\u70b9\u4e86\u3002</p>\n<p><img src=\"http://images.cnitblog.com/i/441540/201405/211820194025710.png\" alt=\"\" /></p>\n</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u4e5f\u53ef\u4ee5\u6362\u4e2a\u7aef\u53e3\uff0c\u5728mysite.conf\u6587\u4ef6\u4e2d\uff0c&lt;VirtualHost *:80&gt;\u6539\u6210&lt;VirtualHost *:xxxx&gt;\u81ea\u5df1\u8981\u7684\u7aef\u53e3\uff0c\u6bd4\u59828000\u3002</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u7136\u540e\u6539ports.conf</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre>cd /etc/<span style=\"color: #000000;\">apache2\n</span><span style=\"color: #0000ff;\">sudo</span> nano ports.conf</pre>\n</div>\n<p>\u770b\u5230Listen 80\u4e86\u5427\uff0c\u4e0b\u9762\u52a0\u4e00\u884c Listen 8000\uff0c\u5c31\u80fd\u75288000\u7aef\u53e3\u4e86\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> service apache2 reload</pre>\n</div>\n<p>\u8fd9\u6837127.0.0.1\u8bbf\u95ee\u7684\u662fapache\u7ad9\u70b9\uff0c127.0.0.1:8000\u8bbf\u95ee\u7684\u5c31\u662f\u6211\u4eec\u7684django\u7ad9\u70b9\u4e86\u3002</p>\n<p>&nbsp;</p>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\"><strong style=\"background-color: inherit;\"><span style=\"font-size: large; background-color: inherit;\">\u5173\u4e8eWSGIxxxx</span></strong></div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: inherit; -webkit-text-stroke-width: 0px;\">\u4ee5\u4e0b\u662f\u8f6c\u8f7d<a href=\"http://ssmax.net/archives/977.html\">http://ssmax.net/archives/977.html</a>\uff1a</div>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('ee4f281e-796a-4e54-bcd3-9a2f7b609e17')\"><img id=\"code_img_closed_ee4f281e-796a-4e54-bcd3-9a2f7b609e17\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_ee4f281e-796a-4e54-bcd3-9a2f7b609e17\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('ee4f281e-796a-4e54-bcd3-9a2f7b609e17',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_ee4f281e-796a-4e54-bcd3-9a2f7b609e17\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #000000;\">mod_wsgi \u6709\u4e24\u79cd\u8fd0\u884c\u6a21\u5f0f\uff0c\n\u7b2c\u4e00\u79cd\u662f\u5d4c\u5165\u6a21\u5f0f\uff0c\u7c7b\u4f3c\u4e8emod_python\uff0c\u76f4\u63a5\u5728apache\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff0c\u8fd9\u6837\u7684\u597d\u5904\u662f\u4e0d\u9700\u8981\u53e6\u5916\u589e\u52a0\u8fdb\u7a0b\uff0c\u4f46\u662f\u574f\u5904\u4e5f\u5f88\u660e\u663e\uff0c\u6240\u6709\u5185\u5b58\u90fd\u548capache\u5171\u4eab\uff0c\u5982\u679c\u548cmod_python\u4e00\u6837\u9020\u6210\u5185\u5b58\u6f0f\u6d1e\u7684\u8bdd\uff0c\u5c31\u4f1a\u5371\u5bb3\u6574\u4e2aapache\u3002\u800c\u4e14\u5982\u679capache\u662f\u7528worker mpm\uff0cmod_wsgi\u4e5f\u5c31\u5f3a\u5236\u8fdb\u5165\u4e86\u7ebf\u7a0b\u6a21\u5f0f\uff0c\u8fd9\u6837\u5b50\u5bf9\u4e8e\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u7a0b\u5e8f\u6765\u8bf4\u5c31\u6ca1\u6cd5\u7528\u4e86\u3002\n\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u53ea\u9700\u8981\u5728apache\u4e0b\u9762\u8bbe\u7f6e\nWSGIScriptAlias /path /path-to-wsgi\n\u5373\u53ef\u751f\u6548\uff0c\u5bf9\u4e8e\u5c0f\u578b\u811a\u672c\u7684\u8bdd\uff0c\u76f4\u63a5\u7528\u8fd9\u79cd\u6a21\u5f0f\u5373\u53ef\u3002\n\u7b2c\u4e8c\u79cd\u662f\u540e\u53f0\u6a21\u5f0f\uff0c\u7c7b\u4f3c\u4e8eFastCGI\u7684\u540e\u53f0\uff0cmod_wsgi\u4f1a\u501fapache\u7684\u5916\u58f3\uff0c\u53e6\u5916\u542f\u52a8\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\uff0c\u7136\u540e\u901a\u8fc7socket\u901a\u4fe1\u548capache\u7684\u8fdb\u7a0b\u8054\u7cfb\u3002\n\u8fd9\u79cd\u65b9\u5f0f\u53ea\u8981\u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u5373\u53ef\u5f00\u542f\uff1a\n#\u542f\u52a8WSGI\u540e\u53f0\uff0csite1\u662f\u540e\u53f0\u540d\u5b57\nWSGIDaemonProcess site1 processes=2 threads=15 display-name=%{GROUP}\n#\u5206\u914d\u5f53\u524d\u4e0a\u4e0b\u6587\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2aWSGI\u540e\u53f0\uff0c\u53ef\u4ee5\u653e\u5728Location\u91cc\u9762\u6307\u5b9a\nWSGIProcessGroup site1\n#\u6839\u636e\u5f53\u524d\u4e0a\u4e0b\u6587\u7684ProcessGroup\u5206\u914d\u5230\u5bf9\u5e94\u7684\u540e\u53f0\nWSGIScriptAlias /path /path-to-wsgi\n\u540e\u53f0\u6a21\u5f0f\u7531\u4e8e\u662f\u4e0eapache\u8fdb\u7a0b\u5206\u79bb\u4e86\uff0c\u5185\u5b58\u72ec\u7acb\uff0c\u800c\u4e14\u53ef\u4ee5\u72ec\u7acb\u91cd\u542f\uff0c\u4e0d\u4f1a\u5f71\u54cdapache\u7684\u8fdb\u7a0b\uff0c\u5982\u679c\u4f60\u6709\u591a\u4e2a\u9879\u76ee\uff08django\uff09\uff0c\u53ef\u4ee5\u9009\u62e9\u5efa\u7acb\u591a\u4e2a\u540e\u53f0\u6216\u8005\u5171\u540c\u4f7f\u7528\u4e00\u4e2a\u540e\u53f0\u3002\n\u6bd4\u5982\u5728\u540c\u4e00\u4e2aVirtualHost\u91cc\u9762\uff0c\u4e0d\u540c\u7684path\u5bf9\u5e94\u4e0d\u540c\u7684django\u9879\u76ee\uff0c\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u4e00\u4e2aDaemon\uff1a\nWSGIDaemonProcess default processes=1 threads=1 display-name=%{GROUP}\nWSGIProcessGroup default\nWSGIScriptAlias /project1 &ldquo;/home/website/project1.wsgi&rdquo;\nWSGIScriptAlias /project2 &ldquo;/home/website/project2.wsgi&rdquo;\n\u8fd9\u6837\u5b50\u4e24\u4e2adjango\u90fd\u4f7f\u7528\u540c\u4e00\u4e2aWSGI\u540e\u53f0\u3002\n\u4e5f\u53ef\u4ee5\u628a\u4e0d\u540c\u7684\u9879\u76ee\u5206\u5f00\uff0c\u5206\u5f00\u4f7f\u7528\u4e0d\u540c\u7684\u540e\u53f0\uff0c\u8fd9\u6837\u5f00\u9500\u6bd4\u8f83\u5927\uff0c\u4f46\u5c31\u4e0d\u4f1a\u8026\u5408\u5728\u4e00\u8d77\u4e86\u3002\ndisplay-name\u662f\u540e\u53f0\u8fdb\u7a0b\u7684\u540d\u5b57\uff0c\u8fd9\u6837\u65b9\u4fbf\u91cd\u542f\u5bf9\u5e94\u7684\u8fdb\u7a0b\uff0c\u800c\u4e0d\u9700\u8981\u5168\u90e8\u6740\u6389\u3002\nWSGIDaemonProcess site1 processes=1 threads=1 display-name=%{GROUP}\nWSGIDaemonProcess site2 processes=1 threads=1 display-name=%{GROUP}\n</span><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">Location </span><span style=\"color: #ff0000;\">&ldquo;/project1&Prime;</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">\nWSGIProcessGroup site1\n</span><span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">Location</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">\nWSGIScriptAlias /project1 &ldquo;/home/website/project1.wsgi&rdquo;\n</span><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">Location </span><span style=\"color: #ff0000;\">&ldquo;/project1&Prime;</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">\nWSGIProcessGroup site2\n</span><span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">Location</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">\nWSGIScriptAlias /project2 &ldquo;/home/website/project2.wsgi&rdquo;\n\u5bf9\u4e8edjango 1.0\u4ee5\u4e0b\u7684\u7248\u672c\uff0c\u7531\u4e8e\u5b98\u65b9\u8ba4\u5b9a\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6240\u4ee5\u5efa\u8bae\u4f7f\u7528\u591a\u8fdb\u7a0b\u5355\u7ebf\u7a0b\u6a21\u5f0f\nprocesses=n threads=1\n\u4f46\u662f\u6211\u81ea\u5df1\u5728\u7528django 0.9.6\uff0c\u4f7f\u7528\u591a\u7ebf\u7a0b\u6a21\u5f0f\u5728\u5f88\u591a\u9879\u76ee\u91cc\u9762\u57fa\u672c\u90fd\u6ca1\u6709\u95ee\u9898\uff0c\u5305\u62ec\u5728worker\u6a21\u5f0f\u4e0b\u9762\u4f7f\u7528mod_python\uff0c\u5176\u5b9e\u662f\u4e00\u6837\u7684\u9053\u7406\uff0c\u5475\u5475\u3002\n\u5347\u7ea7\u5230django 1.0\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u653e\u5fc3\u7684\u4f7f\u7528\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u6a21\u5f0f\u4e86\uff1a\nprocesses=2 threads=64\n\u8fd9\u6837\u5b50\u6027\u80fd\u4f1a\u66f4\u597d\u3002\n\u4e0b\u9762\u662f\u4e24\u79cd\u6a21\u5f0f\u7684\u82f1\u6587\u539f\u6587\uff1a\nWhen hosting WSGI applications using mod_wsgi, one of two primary modes of operation can be used. In &lsquo;embedded&rsquo; mode, mod_wsgi works in a similar way to mod_python in that the Python application code will be executed within the context of the normal Apache child processes. WSGI applications when run in this mode will therefore share the same processes as other Apache hosted applications using Apache modules for PHP and Perl.\nAn alternate mode of operation available with Apache 2.X on UNIX is &lsquo;daemon&rsquo; mode. This mode operates in similar ways to FASTCGI/SCGI solutions, whereby distinct processes can be dedicated to run a WSGI application. Unlike FASTCGI/SCGI solutions however, a separate infrastructure is not needed when implementing the WSGI application and everything is handled automatically by mod_wsgi.\nBecause the WSGI applications in daemon mode are being run in their own processes, the impact on the normal Apache child processes used to serve up static files and host applications using Apache modules for PHP, Perl or some other language is much reduced. Daemon processes may if required also be run as a distinct user ensuring that WSGI applications cannot interfere with each other or access information they shouldn&rsquo;t be able to.</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">\u67e5\u770b</span></div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>"
			}, {
				"title": "LeetCode OJ \u9898\u89e3",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2014/01/15/3520937.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 15 Jan 2014 07:34:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2014/01/15/3520937.html",
				"description": "<p>&nbsp;LeetCode OJ \u9898\u89e3</p>\n<p><span style=\"font: 200 21px/29px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #eeeeee; -webkit-text-stroke-width: 0px;\">LeetCode OJ is a platform for preparing technical coding interviews.</span></p>\n<p><span style=\"font-size: 14px;\">LeetCode OJ \u662f\u4e3a\u4e0e\u5199\u4ee3\u7801\u6709\u5173\u7684\u6280\u672f\u5de5\u4f5c\u9762\u8bd5\u8005\u8bbe\u8ba1\u7684\u8bad\u7ec3\u5e73\u53f0\u3002</span></p>\n<p>LeetCode OJ:<a href=\"http://oj.leetcode.com/\">http://oj.leetcode.com/</a></p>\n<p>\u9ed8\u8ba4\u9898\u76ee\u987a\u5e8f\u4e3a\u9898\u76ee\u6dfb\u52a0\u65f6\u95f4\u5012\u53d9\uff0c\u672c\u6587\u9898\u89e3\u987a\u5e8f\u4e0eOJ\u9898\u76ee\u987a\u5e8f\u4e00\u81f4\uff08OJ\u4f1a\u66f4\u65b0\uff0c\u81f3\u5c11\u76ee\u524d\u4e00\u81f4\u3002\u3002\u3002\uff09\uff0c\u76ee\u524d\u5171152\u9898\u3002</p>\n<p>Made By\uff1a<a href=\"http://www.cnblogs.com/CSGrandeur/\">CSGrandeur</a></p>\n<p>\u53e6\u5916\uff0c<a href=\"http://c4fun.cn/\">Vimer</a>\u505a\u4e86Python\u7248\u7684\u9898\u89e3\uff1a<a href=\"http://c4fun.cn/blog/2014/03/20/leetcode-solution-02/\">http://c4fun.cn/blog/2014/03/20/leetcode-solution-02/</a></p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Maximum Product Subarray</h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u7ef4\u62a4\u5f53\u524d\u4f4d\u7f6e\u8fde\u7eed\u4e58\u79ef\u7684\u6700\u5927\u503c tmpp \u548c\u6700\u5c0f\u503c tmpn \uff0c\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u90fd\u53ef\u80fd\u7531\u4e09\u79cd\u60c5\u51b5\u5f97\u5230\uff1a\u4e0a\u4e00\u4e2a\u6570\u7684 tmpp*A[i]\uff0c\u4e0a\u4e00\u4e2a\u6570\u7684 tmpn*A[i]\uff0cA[i]\u672c\u8eab\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4e0d\u65ad\u66f4\u65b0\u7b54\u6848\uff0c\u6700\u7ec8\u8f93\u51fa\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('81b5e6b6-fc2a-432c-b03b-fc12803b59b5')\"><img id=\"code_img_closed_81b5e6b6-fc2a-432c-b03b-fc12803b59b5\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_81b5e6b6-fc2a-432c-b03b-fc12803b59b5\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('81b5e6b6-fc2a-432c-b03b-fc12803b59b5',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_81b5e6b6-fc2a-432c-b03b-fc12803b59b5\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> maxProduct(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> tmpp = A[<span style=\"color: #800080;\">0</span>], tmpn = A[<span style=\"color: #800080;\">0</span>], tmp, ans = A[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             tmp =<span style=\"color: #000000;\"> tmpp;\n</span><span style=\"color: #008080;\"> 8</span>             tmpp = max(max(A[i], A[i] * tmpp), A[i] *<span style=\"color: #000000;\"> tmpn);\n</span><span style=\"color: #008080;\"> 9</span>             tmpn = min(min(A[i], A[i] * tmp), A[i] *<span style=\"color: #000000;\"> tmpn);\n</span><span style=\"color: #008080;\">10</span>             ans =<span style=\"color: #000000;\"> max(ans, tmpp);\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">14</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/reverse-words-in-a-string/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Reverse Words in a String</span></a></p>\n<p>&nbsp;\u5148\u7ffb\u8f6c\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u4ece\u524d\u5f80\u540e\u4e00\u4e2a\u5355\u8bcd\u4e00\u4e2a\u5355\u8bcd\u5730\u518d\u7ffb\u8f6c\u4e00\u6b21\uff0c\u540c\u65f6\u53bb\u9664\u591a\u4f59\u7a7a\u683c\uff0c\u7b49\u4e8e\u662f\u626b\u63cf\u4e24\u904d\uff0cO(n)\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('df65fc24-070a-443a-81ca-ee003db0f090')\"><img id=\"code_img_closed_df65fc24-070a-443a-81ca-ee003db0f090\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_df65fc24-070a-443a-81ca-ee003db0f090\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('df65fc24-070a-443a-81ca-ee003db0f090',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_df65fc24-070a-443a-81ca-ee003db0f090\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">void</span> reverseWords(<span style=\"color: #0000ff;\">string</span> &amp;<span style=\"color: #000000;\">s) {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">        reverse(s.begin(), s.end());\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> start = <span style=\"color: #800080;\">0</span>, end = <span style=\"color: #800080;\">0</span>, j = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">while</span>(start !=<span style=\"color: #000000;\"> s.length())\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">while</span>(start != s.length() &amp;&amp; s[start] == <span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>) start ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">for</span>(end = start; end != s.length() &amp;&amp; s[end] != <span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>; end ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(j != <span style=\"color: #800080;\">0</span> &amp;&amp; start &lt;= end - <span style=\"color: #800080;\">1</span>) s[j ++] = <span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = end - <span style=\"color: #800080;\">1</span>; start &lt; i; start ++, i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">12</span>                 swap(s[i], s[start]), s[j ++] =<span style=\"color: #000000;\"> s[start];\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">while</span>(start &lt; end) s[j ++] = s[start ++<span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        s.resize(j);\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">17</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/evaluate-reverse-polish-notation/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Evaluate Reverse Polish Notation</span></a></p>\n<p><span style=\"font-size: 14px;\"> \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u8ba1\u7b97\u56db\u5219\u8fd0\u7b97\u3002\u7528\u6808\u3002</span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('7f277e19-7ff3-4113-9a72-3ea7aad46370')\"><img id=\"code_img_closed_7f277e19-7ff3-4113-9a72-3ea7aad46370\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_7f277e19-7ff3-4113-9a72-3ea7aad46370\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('7f277e19-7ff3-4113-9a72-3ea7aad46370',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_7f277e19-7ff3-4113-9a72-3ea7aad46370\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> evalRPN(vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; &amp;<span style=\"color: #000000;\">tokens) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a, b;\n</span><span style=\"color: #008080;\"> 5</span>         stack&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> s;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; tokens.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(isdigit(tokens[i][<span style=\"color: #800080;\">0</span>]) || tokens[i].length() &gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">                s.push(atoi(tokens[i].c_str()));\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">13</span>             a =<span style=\"color: #000000;\"> s.top();s.pop();\n</span><span style=\"color: #008080;\">14</span>             b =<span style=\"color: #000000;\"> s.top();s.pop();\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">switch</span>(tokens[i][<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">17</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">+</span><span style=\"color: #800000;\">'</span>: s.push(b + a); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">-</span><span style=\"color: #800000;\">'</span>: s.push(b - a); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">*</span><span style=\"color: #800000;\">'</span>: s.push(b * a); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">/</span><span style=\"color: #800000;\">'</span>: s.push(b / a); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> s.top();\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">25</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/max-points-on-a-line/\">Max Points on a Line</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5e73\u9762\u4e0a\u4e00\u6761\u76f4\u7ebf\u6700\u591a\u7a7f\u8fc7\u591a\u5c11\u70b9\u3002\u4e4d\u4e00\u770b\u597d\u719f\u6089\u7684\u95ee\u9898\uff0c\u505a\u4e86\u8fd9\u4e48\u4e45\u8ba1\u7b97\u51e0\u4f55\u3002\u3002\u3002\u5374\u8fd8\u771f\u6ca1\u505a\u8fc7\u8fd9\u4e2a\u5c0f\u95ee\u9898\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u7b2c\u4e00\u53cd\u5e94\u5f53\u7136\u4e0d\u80fdO(n^3)\u679a\u4e3e\u4e86\uff0c\u679a\u4e3e\u5706\u5468\u597d\u50cf\u4e5f\u4e0d\u884c\uff0c\u6bd5\u7adf\u662f\u8003\u5bdf\u6240\u6709\u70b9\uff0c\u4e0d\u662f\u67d0\u4e2a\u70b9\u3002\u90a3\u4e48\u5e94\u8be5\u5c31\u662f\u54c8\u5e0c\u659c\u7387\u4e86\u5427\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u80af\u5b9a\u5c11\u4e0d\u4e86\u7ad6\u76f4\u7684\u7ebf\uff0c\u54c8\u5e0c\u659c\u7387\u8fd9\u4e0d\u50cf\u662f\u8fd9\u7c7bOJ\u8ba9\u5199\u7684\u9898\u5427\u3002\u3002\u5fd8\u4e86map\u8fd9\u56de\u4e8b\u4e86\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u786e\u5b9a\u601d\u8def\u4e4b\u540e\uff0c\u8fd8\u662f\u770b\u770b\u522b\u4eba\u535a\u5ba2\u5427\uff0c\u5c11\u8d70\u70b9\u5f2f\u8def\uff0c\u7136\u540e\u5c31\u5b66\u4e60\u4e86\u8fd8\u6709unordered_map\u8fd9\u4e48\u4e2a\u4e1c\u897f\uff0c<a href=\"http://blog.csdn.net/tontkeng/article/details/17244361\">\u8fd8\u6709\u4e00\u4e2a\u535a\u5ba2</a>\u7684\u601d\u8def\u633a\u597d\uff0c\u907f\u514ddouble\u95ee\u9898\uff0c\u628a\u659c\u7387\u8f6c\u5316\u6210\u5316\u7b80\u7684x\u3001y\u7ec4\u6210\u5b57\u7b26\u4e32\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u518d\u53e6\u5916\u5c31\u662f\u91cd\u53e0\u7684\u70b9\u4e86\uff0c\u60f3\u8ba9\u9898\u76ee\u5751\u4e00\u70b9\uff0c\u600e\u80fd\u5c11\u5f97\u4e86\u8fd9\u79cd\u6570\u636e\uff0c\u5355\u72ec\u5904\u7406\u4e00\u4e0b\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('53afe24f-4d25-458e-bb68-68157b46e690')\"><img id=\"code_img_closed_53afe24f-4d25-458e-bb68-68157b46e690\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_53afe24f-4d25-458e-bb68-68157b46e690\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('53afe24f-4d25-458e-bb68-68157b46e690',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_53afe24f-4d25-458e-bb68-68157b46e690\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for a point.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct Point {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int x;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     int y;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     Point() : x(0), y(0) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     Point(int a, int b) : x(a), y(b) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span> maxPoints(vector&lt;Point&gt; &amp;<span style=\"color: #000000;\">points) {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; points.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">16</span>             unordered_map&lt;<span style=\"color: #0000ff;\">string</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> mp;\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">int</span> tmpans = <span style=\"color: #800080;\">0</span>, same = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = i + <span style=\"color: #800080;\">1</span>; j &lt; points.size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">20</span>                 <span style=\"color: #0000ff;\">int</span> x = points[j].x - points[i].x, y = points[j].y -<span style=\"color: #000000;\"> points[i].y;\n</span><span style=\"color: #008080;\">21</span>                 <span style=\"color: #0000ff;\">int</span> g =<span style=\"color: #000000;\"> gcd(x, y);\n</span><span style=\"color: #008080;\">22</span>                 <span style=\"color: #0000ff;\">if</span>(g != <span style=\"color: #800080;\">0</span>) x /= g, y /=<span style=\"color: #000000;\"> g;\n</span><span style=\"color: #008080;\">23</span>                 <span style=\"color: #0000ff;\">else</span> {same ++; <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\">24</span>                 <span style=\"color: #0000ff;\">if</span>(x &lt; <span style=\"color: #800080;\">0</span>) x = -x, y = -<span style=\"color: #000000;\">y;\n</span><span style=\"color: #008080;\">25</span>                 <span style=\"color: #0000ff;\">string</span> tmp = to_string(x) + <span style=\"color: #800000;\">\"</span> <span style=\"color: #800000;\">\"</span> +<span style=\"color: #000000;\"> to_string(y);\n</span><span style=\"color: #008080;\">26</span>                 <span style=\"color: #0000ff;\">if</span>(!mp.count(tmp)) mp[tmp] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span>                 <span style=\"color: #0000ff;\">else</span> mp[tmp] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">28</span>                 tmpans =<span style=\"color: #000000;\"> max(tmpans, mp[tmp]);\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">30</span>             ans = max(tmpans + <span style=\"color: #800080;\">1</span> +<span style=\"color: #000000;\"> same, ans);\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">32</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">34</span>     <span style=\"color: #0000ff;\">int</span> gcd(<span style=\"color: #0000ff;\">int</span> a, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">36</span>         <span style=\"color: #0000ff;\">return</span> a ? gcd(b %<span style=\"color: #000000;\"> a, a) : b;\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">38</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/sort-list/\">Sort List</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u53c8\u957f\u89c1\u8bc6\u4e86\uff0c\u539f\u6765\u94fe\u8868\u4e5f\u53ef\u4ee5O(nlogn)\u6392\u5e8f\u7684\u3002\u6ca1\u5f80\u4e0b\u60f3\u5c31\u67e5\u4e86\u4e00\u4e0b\uff0c\u770b\u5230\u4eba\u8bf4\u7528\u5f52\u5e76\uff0c\u4e8e\u662f\u624d\u5f00\u59cb\u60f3\u80fd\u4e0d\u80fd\u5b9e\u73b0\u3002\u3002\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">O(n)\u627e\u5230\u4e2d\u70b9\uff0c\u628a\u4e2d\u70b9\u7684next\u53d8\u6210NULL\uff0c\u5bf9\u4e24\u90e8\u5206\u9012\u5f52\u3002\u9012\u5f52\u7ed3\u675f\u540e\u5bf9\u4e24\u90e8\u5206\u5f52\u5e76\uff0c\u5148\u627e\u5230newhead\uff0c\u5373\u4e24\u90e8\u5206\u7684\u5934\u90e8val\u8f83\u5c0f\u7684\u90a3\u4e2a\uff0c\u7136\u540e\u5f52\u5e76\u5c31\u628a\u5c0f\u7684\u4ecenewhead\u5f80\u540e\u7eed\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u628a\u6700\u540e\u7684next\u8d4b\u503cNULL\uff0c\u8fd4\u56denewhead\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u53c8\u6709\u7a7a\u6570\u636e@_@.</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('7997fb39-6fcd-4c0f-9bd5-13ac034d1c28')\"><img id=\"code_img_closed_7997fb39-6fcd-4c0f-9bd5-13ac034d1c28\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_7997fb39-6fcd-4c0f-9bd5-13ac034d1c28\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('7997fb39-6fcd-4c0f-9bd5-13ac034d1c28',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_7997fb39-6fcd-4c0f-9bd5-13ac034d1c28\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *sortList(ListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">int</span> n = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>         ListNode *p =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">15</span>             n ++, p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">if</span>(n &lt;= <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">17</span>         n &gt;&gt;= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>         p =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">while</span>(--<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">20</span>             p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">21</span>         ListNode *tmp = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">22</span>         p-&gt;next =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">23</span>         ListNode *nl =<span style=\"color: #000000;\"> sortList(head);\n</span><span style=\"color: #008080;\">24</span>         ListNode *nr =<span style=\"color: #000000;\"> sortList(tmp);\n</span><span style=\"color: #008080;\">25</span>         ListNode *<span style=\"color: #000000;\">newhead;\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">if</span>(nl-&gt;val &lt; nr-&gt;<span style=\"color: #000000;\">val)\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">28</span>             newhead =<span style=\"color: #000000;\"> nl;\n</span><span style=\"color: #008080;\">29</span>             nl = nl-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">31</span>         <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">33</span>             newhead =<span style=\"color: #000000;\"> nr;\n</span><span style=\"color: #008080;\">34</span>             nr = nr-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">36</span>         p =<span style=\"color: #000000;\"> newhead;\n</span><span style=\"color: #008080;\">37</span>         <span style=\"color: #0000ff;\">while</span>(nl != NULL &amp;&amp; nr !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">39</span>             <span style=\"color: #0000ff;\">if</span>(nl-&gt;val &lt; nr-&gt;val) p-&gt;next = nl, p = p-&gt;next, nl = nl-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">40</span>             <span style=\"color: #0000ff;\">else</span> p-&gt;next = nr, p = p-&gt;next, nr = nr-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">42</span>         <span style=\"color: #0000ff;\">while</span>(nl != NULL) p-&gt;next = nl, p = p-&gt;next, nl = nl-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">43</span>         <span style=\"color: #0000ff;\">while</span>(nr != NULL) p-&gt;next = nr, p = p-&gt;next, nr = nr-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">44</span>         p-&gt;next =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">45</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> newhead;\n</span><span style=\"color: #008080;\">46</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">47</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/insertion-sort-list/\">Insertion Sort List</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u6307\u9488\u64cd\u4f5c\u5f88\u70e6\u554a\u3002\u3002\u66b4\u529b\u679a\u4e3e\u63d2\u5165\u4f4d\u7f6e\uff0c\u6ce8\u610f\u7ec6\u8282\u5c31\u80fd\u8fc7\u4e86\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('0ae682bf-dcb0-49d7-8f1f-1449751f2302')\"><img id=\"code_img_closed_0ae682bf-dcb0-49d7-8f1f-1449751f2302\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_0ae682bf-dcb0-49d7-8f1f-1449751f2302\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('0ae682bf-dcb0-49d7-8f1f-1449751f2302',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_0ae682bf-dcb0-49d7-8f1f-1449751f2302\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *insertionSortList(ListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">12</span>         ListNode *newhead =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">if</span>(head == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">14</span>         head = head-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">15</span>         newhead-&gt;next =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">while</span>(head !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">18</span>             <span style=\"color: #0000ff;\">if</span>(head-&gt;val &lt; newhead-&gt;<span style=\"color: #000000;\">val)\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">20</span>                 ListNode *tmp = head-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">21</span>                 head-&gt;next =<span style=\"color: #000000;\"> newhead;\n</span><span style=\"color: #008080;\">22</span>                 newhead =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">23</span>                 head =<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">24</span>                 <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">26</span>             ListNode *pre = newhead, *p = newhead-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">27</span>             <span style=\"color: #0000ff;\">while</span>(p != NULL &amp;&amp; p-&gt;val &lt; head-&gt;<span style=\"color: #000000;\">val)\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">29</span>                 p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">30</span>                 pre = pre-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">32</span>             pre-&gt;next =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">33</span>             head = head-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">34</span>             pre = pre-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">35</span>             pre-&gt;next =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">37</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> newhead;\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">39</span>     \n<span style=\"color: #008080;\">40</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/lru-cache/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">LRU Cache</span></a></p>\n<p><span style=\"font-size: 14px;\">\u65b0\u5efa\u6570\u636e\u7c7bclass Val\uff0c\u4fdd\u5b58key\u3001val\u548c\u8bbf\u95ee\u81ea\u589e\u6807\u8bb0updatecnt\u3002</span></p>\n<p><span style=\"font-size: 14px;\">\u7528unordered_map\u66f4\u65b0\u6570\u636e\uff0c\u589e\u52a0updatecnt\uff0c\u5e76\u628a\u66f4\u65b0\u7684\u6570\u636e\u653e\u5165\u961f\u5217\uff0c\u6700\u5173\u952e\u662f\u5904\u7406capacity\u6ee1\u4e86\u7684\u65f6\u5019\uff0c\u961f\u5217\u4f9d\u6b21\u51fa\u961f\uff0cmap\u4e2d\u4e0d\u5b58\u5728\u7684\u548cupdatecnt\u548c\u6700\u65b0\u6570\u636e\u4e0d\u76f8\u7b49\u7684\u9879\u76ee\u90fd\u5ffd\u7565\uff0c\u76f4\u5230\u53d1\u73b0updatecnt\u548cmap\u4e2d\u5b58\u7684\u6700\u65b0\u72b6\u6001\u76f8\u7b49\uff0c\u5219\u4e3a&ldquo;\u6700\u8fd1\u672a\u4f7f\u7528&rdquo;\u6570\u636e\uff0c\u51fa\u961f\u540e\u5728map\u4e2derase\u3002\u601d\u8def\u6709\u70b9\u50cfSTL\u961f\u5217\u5b9e\u73b0\u7248\u672c\u7684Dijkstra\u3002</span></p>\n<p><span style=\"font-size: 14px;\"><a href=\"http://blog.csdn.net/doc_sgl/article/details/15378513\">\u6709\u4e00\u4e2a\u535a\u5ba2</a>\u7684\u65b9\u6cd5\u66f4\u597d\uff0cmap\u4e2d\u5b58\u7684\u662f\u94fe\u8868\u7684\u8282\u70b9\u6307\u9488\uff0c\u94fe\u8868\u987a\u5e8f\u8868\u793a\u8bbf\u95ee\u60c5\u51b5\uff0c\u8fd9\u6837\u5c31\u628amap\u5185\u5bb9\u548c\u94fe\u8868\u7684\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e00\u5bf9\u5e94\u4e86\uff0c\u6ca1\u6709\u5197\u4f59\u8282\u70b9\uff0c\u4e14\u66f4\u65b0\u64cd\u4f5c\u4e5f\u662fO(1)\u7684\u3002</span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b5248e67-4024-44ec-8f0e-d937d8ea371e')\"><img id=\"code_img_closed_b5248e67-4024-44ec-8f0e-d937d8ea371e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b5248e67-4024-44ec-8f0e-d937d8ea371e\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b5248e67-4024-44ec-8f0e-d937d8ea371e',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b5248e67-4024-44ec-8f0e-d937d8ea371e\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Val{\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> key;\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> val;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> updatecnt;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> LRUCache{\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 9</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cap;\n</span><span style=\"color: #008080;\">10</span>     unordered_map&lt;<span style=\"color: #0000ff;\">int</span>, Val&gt;<span style=\"color: #000000;\"> mp;\n</span><span style=\"color: #008080;\">11</span>     queue&lt;Val&gt;<span style=\"color: #000000;\"> q;\n</span><span style=\"color: #008080;\">12</span>     LRUCache(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> capacity) {\n</span><span style=\"color: #008080;\">13</span>         cap =<span style=\"color: #000000;\"> capacity;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> \n<span style=\"color: #008080;\">16</span>     <span style=\"color: #0000ff;\">int</span> <span style=\"color: #0000ff;\">get</span>(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> key) {\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(mp.count(key))\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">19</span>             mp[key].updatecnt ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            q.push(mp[key]);\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> mp[key].val;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">25</span> \n<span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">void</span> <span style=\"color: #0000ff;\">set</span>(<span style=\"color: #0000ff;\">int</span> key, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> value) {\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(mp.count(key))\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">29</span>             mp[key].val =<span style=\"color: #000000;\"> value;\n</span><span style=\"color: #008080;\">30</span>             mp[key].updatecnt ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">            q.push(mp[key]);\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">35</span>             <span style=\"color: #0000ff;\">if</span>(mp.size() ==<span style=\"color: #000000;\"> cap)\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">                Val tmp;\n</span><span style=\"color: #008080;\">38</span>                 <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">q.empty())\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">40</span>                     tmp =<span style=\"color: #000000;\"> q.front();\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">                    q.pop();\n</span><span style=\"color: #008080;\">42</span>                     <span style=\"color: #0000ff;\">if</span>(mp.count(tmp.key) &amp;&amp; tmp.updatecnt ==<span style=\"color: #000000;\"> mp[tmp.key].updatecnt)\n</span><span style=\"color: #008080;\">43</span>                         <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">45</span> <span style=\"color: #000000;\">                mp.erase(mp.find(tmp.key));\n</span><span style=\"color: #008080;\">46</span>                 mp[key].key =<span style=\"color: #000000;\"> key;\n</span><span style=\"color: #008080;\">47</span>                 mp[key].val =<span style=\"color: #000000;\"> value;\n</span><span style=\"color: #008080;\">48</span>                 mp[key].updatecnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #000000;\">                q.push(mp[key]);\n</span><span style=\"color: #008080;\">50</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">51</span>             mp[key].key =<span style=\"color: #000000;\"> key;\n</span><span style=\"color: #008080;\">52</span>             mp[key].val =<span style=\"color: #000000;\"> value;\n</span><span style=\"color: #008080;\">53</span>             mp[key].updatecnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">54</span> <span style=\"color: #000000;\">            q.push(mp[key]);\n</span><span style=\"color: #008080;\">55</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">56</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">57</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/binary-tree-postorder-traversal/\">Binary Tree Postorder Traversal</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u4e8c\u53c9\u6811\u7684\u975e\u9012\u5f52\u540e\u5e8f\u904d\u5386\uff0c\u8003\u7814\u7684\u65f6\u5019\u975e\u5e38\u719f\u6089\u4e86\uff0c\u73b0\u5728\u5199\u53c8\u8981\u60f3\u597d\u4e45\u3002\u91cd\u70b9\u662f\u5173\u4e8e\u53f3\u5b50\u6811\u904d\u5386\u65f6\u5019\u9700\u8981\u4e00\u4e2a\u6807\u8bb0\uff0c\u6216\u8005\u6807\u8bb0\u6839\u8282\u70b9\u51fa\u6808\u6b21\u6570\uff0c\u6216\u8005\u6807\u8bb0\u53f3\u5b50\u6811\u662f\u5426\u8bbf\u95ee\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('46231332-accd-4ead-a570-db2496dac01e')\"><img id=\"code_img_closed_46231332-accd-4ead-a570-db2496dac01e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_46231332-accd-4ead-a570-db2496dac01e\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('46231332-accd-4ead-a570-db2496dac01e',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_46231332-accd-4ead-a570-db2496dac01e\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; postorderTraversal(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">13</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">15</span>         stack&lt;TreeNode*&gt;<span style=\"color: #000000;\"> s;\n</span><span style=\"color: #008080;\">16</span>         TreeNode *<span style=\"color: #000000;\">visited;\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">while</span>(root != NULL || !<span style=\"color: #000000;\">s.empty())\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">while</span>(root !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">20</span>                 s.push(root), root = root-&gt;<span style=\"color: #000000;\">left;\n</span><span style=\"color: #008080;\">21</span>             root =<span style=\"color: #000000;\"> s.top();\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">if</span>(root-&gt;right == NULL || visited == root-&gt;<span style=\"color: #000000;\">right)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">24</span>                 ans.push_back(root-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">                s.pop();\n</span><span style=\"color: #008080;\">26</span>                 visited =<span style=\"color: #000000;\"> root;\n</span><span style=\"color: #008080;\">27</span>                 root =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">31</span>                 root = root-&gt;<span style=\"color: #000000;\">right;\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">34</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">36</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/binary-tree-preorder-traversal/\">Binary Tree Preorder Traversal</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u524d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5c31\u5bb9\u6613\u591a\u4e86\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('9a33d810-bc5c-4f34-afcd-b99187197f01')\"><img id=\"code_img_closed_9a33d810-bc5c-4f34-afcd-b99187197f01\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_9a33d810-bc5c-4f34-afcd-b99187197f01\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('9a33d810-bc5c-4f34-afcd-b99187197f01',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_9a33d810-bc5c-4f34-afcd-b99187197f01\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; preorderTraversal(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">13</span>         stack&lt;TreeNode*&gt;<span style=\"color: #000000;\"> s;\n</span><span style=\"color: #008080;\">14</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        s.push(root);\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">s.empty())\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">19</span>             root =<span style=\"color: #000000;\"> s.top();\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            s.pop();\n</span><span style=\"color: #008080;\">21</span>             ans.push_back(root-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">if</span>(root-&gt;right != NULL) s.push(root-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">23</span>             <span style=\"color: #0000ff;\">if</span>(root-&gt;left != NULL) s.push(root-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">26</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/reorder-list/\">Reorder List</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u627e\u5230\u4e2d\u95f4\u4f4d\u7f6e\uff0c\u628a\u4e2d\u95f4\u4e4b\u540e\u7684\u94fe\u8868\u53cd\u8f6c\uff0c\u4e24\u4e2a\u6307\u9488\u4e00\u4e2a\u4ece\u5934\u4e00\u4e2a\u4ece\u5c3e\u5f00\u59cb\u4e92\u63d2\uff0c\u5947\u5076\u548c\u6307\u9488\u7ed5\u5f97\u6709\u70b9\u6655\uff0c\u7406\u6e05\u5c31\u597d\u4e86\u3002\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('e022098f-aed4-4213-994b-88ba0f25e53f')\"><img id=\"code_img_closed_e022098f-aed4-4213-994b-88ba0f25e53f\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_e022098f-aed4-4213-994b-88ba0f25e53f\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('e022098f-aed4-4213-994b-88ba0f25e53f',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_e022098f-aed4-4213-994b-88ba0f25e53f\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">void</span> reorderList(ListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">int</span> n = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>         ListNode *pre, *p =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\">(p)\n</span><span style=\"color: #008080;\">15</span>             n ++, p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">if</span>(n &lt; <span style=\"color: #800080;\">3</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>         n &gt;&gt;= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>         pre = p =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">19</span>         p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">while</span>(n --) p = p-&gt;next, pre = pre-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL) \n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">23</span>             ListNode *tmp = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">24</span>             p-&gt;next =<span style=\"color: #000000;\"> pre;\n</span><span style=\"color: #008080;\">25</span>             pre =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">26</span>             p =<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">28</span>         ListNode *tail =<span style=\"color: #000000;\"> pre;\n</span><span style=\"color: #008080;\">29</span>         p =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">30</span>         <span style=\"color: #0000ff;\">while</span>(<span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">32</span>             ListNode *tmp1 = p-&gt;next, *tmp2 = tail-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">33</span>             p-&gt;next =<span style=\"color: #000000;\"> tail;\n</span><span style=\"color: #008080;\">34</span>             tail-&gt;next =<span style=\"color: #000000;\"> tmp1;\n</span><span style=\"color: #008080;\">35</span>             p =<span style=\"color: #000000;\"> tmp1;\n</span><span style=\"color: #008080;\">36</span>             <span style=\"color: #0000ff;\">if</span>(p == tail || p == tmp2) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">37</span>             tail =<span style=\"color: #000000;\"> tmp2;\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">39</span>         p-&gt;next =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">40</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">41</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/linked-list-cycle-ii/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #ff0000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Linked List Cycle II</span></a></span></p>\n<p>\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488slow\u548cfast\uff0c\u4ecehead\u5f00\u59cb\uff0cslow\u4e00\u6b21\u4e00\u6b65\uff0cfast\u4e00\u6b21\u4e24\u6b65\uff0c\u5982\u679cfast\u80fd\u518d\u6b21\u8ffd\u4e0aslow\u5219\u6709\u5708\u3002</p>\n<p>\u8bbeslow\u8d70\u4e86n\u6b65\uff0c\u5219fast\u8d70\u4e862*n\u6b65\uff0c\u8bbe\u5708\u957f\u5ea6m\uff0c\u5708\u8d77\u70b9\u5230head\u8ddd\u79bb\u4e3ak\uff0c\u76f8\u9047\u4f4d\u7f6e\u8ddd\u79bb\u5708\u8d77\u70b9\u4e3at\uff0c\u5219\u6709\uff1a</p>\n<p>n = k&nbsp;+ t + pm; (1)</p>\n<p>2*n = k + t + qm;(2)</p>\n<p>\u8fd9\u91ccp\u548cq\u662f\u4efb\u610f\u6574\u6570\u3002\uff08\u4e0d\u8fc7fast\u901f\u5ea6\u662fslow\u4e8c\u500d\uff0c\u5219\u80af\u5b9a\u5728\u4e00\u5708\u5185\u8ffd\u4e0a\uff0cp\u5c31\u662f0\u4e86\uff09</p>\n<p>2 * (1) - (2) \u5f97k = lm - t;(l = q - 2 * p)</p>\n<p>&nbsp;\u5373 k \u7684\u957f\u5ea6\u662f\u82e5\u5e72\u5708\u5c11\u4e86 t \u7684\u957f\u5ea6\u3002</p>\n<p>\u56e0\u6b64\u8fd9\u65f6\u5019\uff0c\u4e00\u4e2a\u6307\u9488\u4ecehead\u5f00\u59cb\uff0c\u53e6\u4e00\u4e2a\u4ece\u76f8\u9047\u4f4d\u7f6e\u5f00\u59cb\uff0c\u90fd\u6bcf\u6b21\u53ea\u8d70\u4e00\u6b65\uff0c\u5f53\u4ecehead\u5f00\u59cb\u7684\u6307\u9488\u8d70\u5230\u5708\u5f00\u59cb\u4f4d\u7f6e\u65f6\uff0c\u4e24\u6307\u9488\u521a\u597d\u76f8\u9047\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b1b96a64-42f9-49ed-a9cc-9262db3e9e9d')\"><img id=\"code_img_closed_b1b96a64-42f9-49ed-a9cc-9262db3e9e9d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b1b96a64-42f9-49ed-a9cc-9262db3e9e9d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b1b96a64-42f9-49ed-a9cc-9262db3e9e9d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b1b96a64-42f9-49ed-a9cc-9262db3e9e9d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *detectCycle(ListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(head == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">13</span>         ListNode *slow, *<span style=\"color: #000000;\">fast;\n</span><span style=\"color: #008080;\">14</span>         slow = fast =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">int</span> n = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">do</span>\n<span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">18</span>             n ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">if</span>(slow == NULL || fast == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">20</span>             slow = slow-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">21</span>             fast = fast-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">if</span>(fast == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">23</span>             fast = fast-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">24</span>             <span style=\"color: #0000ff;\">if</span>(fast == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">25</span>         }<span style=\"color: #0000ff;\">while</span>(slow !=<span style=\"color: #000000;\"> fast);\n</span><span style=\"color: #008080;\">26</span>         fast =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">while</span>(slow !=<span style=\"color: #000000;\"> fast)\n</span><span style=\"color: #008080;\">28</span>             slow = slow-&gt;next, fast = fast-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">29</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> fast;\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">31</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://www.cnblogs.com/CSGrandeur/admin/Linked%20List%20Cycle%20\">Linked List Cycle</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5443\uff0c\u65f6\u95f4\u9006\u5e8f\u505a\u7684\u7ed3\u679c\u3002\u3002\u3002\u6210\u4e70\u4e00\u9001\u4e00\u4e86\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('60f84d75-8469-4475-8562-4f6df6f4d6ba')\"><img id=\"code_img_closed_60f84d75-8469-4475-8562-4f6df6f4d6ba\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_60f84d75-8469-4475-8562-4f6df6f4d6ba\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('60f84d75-8469-4475-8562-4f6df6f4d6ba',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_60f84d75-8469-4475-8562-4f6df6f4d6ba\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">bool</span> hasCycle(ListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(head == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>         ListNode *slow, *<span style=\"color: #000000;\">fast;\n</span><span style=\"color: #008080;\">14</span>         slow = fast =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">int</span> n = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">do</span>\n<span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">18</span>             n ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">if</span>(slow == NULL || fast == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">20</span>             slow = slow-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">21</span>             fast = fast-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">if</span>(fast == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">23</span>             fast = fast-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">24</span>             <span style=\"color: #0000ff;\">if</span>(fast == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">25</span>         }<span style=\"color: #0000ff;\">while</span>(slow !=<span style=\"color: #000000;\"> fast);\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">28</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/word-break-ii/\"><span style=\"color: #ff0000;\">Word Break II</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5148\u9012\u63a8\uff0cdp[i] == true \u8868\u793a s \u4e2d\u524d i \u4e2a\u5b57\u7b26\u7684\u4e32\u662f\u7b26\u5408\u8981\u6c42\u7684\uff0c\u679a\u4e3e\u4f4d\u7f6e i \uff0c\u5bf9\u4e8e i \u679a\u4e3e\u4f4d\u7f6e j &lt; i\uff0c\u5982\u679c dp[j] == true\u4e14 j ~ i\u7684\u4e32\u5728\u5b57\u5178\u4e2d\uff0c\u5219dp[i] = true\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u540c\u65f6\u5bf9\u4e8e\u8fd9\u6837\u7684 j, i\uff0csite[i].push_back(j)\uff0c\u5373\u5728 i \u4f4d\u7f6e\u7684\u53ef\u884c\u8fed\u4ee3\u8868\u4e2d\u589e\u52a0\u4f4d\u7f6e j\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u5b8c\u6210site\u4e4b\u540e\uff0c\u4ece\u5c3e\u90e8\u5012\u7740DFS\u8fc7\u53bb\u5c31\u5f97\u5230\u4e86\u6240\u6709\u4e32\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('040852bb-907e-40ec-a223-61d43ca9a7f0')\"><img id=\"code_img_closed_040852bb-907e-40ec-a223-61d43ca9a7f0\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_040852bb-907e-40ec-a223-61d43ca9a7f0\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('040852bb-907e-40ec-a223-61d43ca9a7f0',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_040852bb-907e-40ec-a223-61d43ca9a7f0\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; DFS(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">string</span> &amp;s, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; *site, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ith)\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 5</span>         vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; site[ith].size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">string</span> str = s.substr(site[ith][i], ith -<span style=\"color: #000000;\"> site[ith][i]);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(site[site[ith][i]].size() == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">                res.push_back(str);\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">14</span>                 tmp =<span style=\"color: #000000;\"> DFS(s, site, site[ith][i]);\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; tmp.size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">16</span>                     res.push_back(tmp[j] + <span style=\"color: #800000;\">\"</span> <span style=\"color: #800000;\">\"</span> +<span style=\"color: #000000;\"> str);\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">21</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; wordBreak(<span style=\"color: #0000ff;\">string</span> s, unordered_set&lt;<span style=\"color: #0000ff;\">string</span>&gt; &amp;<span style=\"color: #000000;\">dict) {\n</span><span style=\"color: #008080;\">22</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; *site = <span style=\"color: #0000ff;\">new</span> vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;[s.length() + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">bool</span> *dp = <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">bool</span>[s.length() + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">24</span>         memset(dp, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">bool</span>) *<span style=\"color: #000000;\"> s.length());\n</span><span style=\"color: #008080;\">25</span>         dp[<span style=\"color: #800080;\">0</span>] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt;= s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">28</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; i; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">30</span>                 <span style=\"color: #0000ff;\">if</span>(dp[j] == <span style=\"color: #0000ff;\">true</span> &amp;&amp; dict.count(s.substr(j, i -<span style=\"color: #000000;\"> j)))\n</span><span style=\"color: #008080;\">31</span>                    site[i].push_back(j), dp[i] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">34</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> DFS(s, site, s.length());\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">36</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/word-break/\">Word Break</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u53c2\u8003Word Break II\uff0c\u5bf9\u4e8edp\u6807\u8bb0\uff0c\u5f53dp[i]\u4e3atrue\u65f6\u5019\u53ef\u4ee5\u505c\u6b62\u679a\u4e3e\u540e\u9762\u7684 j\uff0c\u4f18\u5316\u4e00\u4e0b\u5e38\u6570\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8a0ac127-05cb-4b03-bfca-7fc2075ce0ba')\"><img id=\"code_img_closed_8a0ac127-05cb-4b03-bfca-7fc2075ce0ba\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8a0ac127-05cb-4b03-bfca-7fc2075ce0ba\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8a0ac127-05cb-4b03-bfca-7fc2075ce0ba',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8a0ac127-05cb-4b03-bfca-7fc2075ce0ba\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> wordBreak(<span style=\"color: #0000ff;\">string</span> s, unordered_set&lt;<span style=\"color: #0000ff;\">string</span>&gt; &amp;<span style=\"color: #000000;\">dict) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">bool</span> *dp = <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">bool</span>[s.length() + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 5</span>         memset(dp, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span>(<span style=\"color: #0000ff;\">bool</span>) * (s.length() + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 6</span>         dp[<span style=\"color: #800080;\">0</span>] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt;= s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; i; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 dp[i] = dp[i] || dp[j] &amp;&amp; dict.count(s.substr(j, i -<span style=\"color: #000000;\"> j));\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> dp[s.length()];\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">14</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/copy-list-with-random-pointer/\"><span style=\"color: #ff0000;\">Copy List with Random Pointer</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u7b2c\u4e00\u6b21\u904d\u5386\uff0c\u628a\u6bcf\u4e2a\u8282\u70b9\u590d\u5236\u4e00\u4efd\u653e\u5230\u5bf9\u5e94\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\uff0c\u5373\u7ec4\u6210\u4e8c\u500d\u957f\u7684\u94fe\u8868\uff1aori1-&gt;copy1-&gt;ori2-&gt;copy2-&gt;....</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u7b2c\u4e8c\u6b21\u904d\u5386\uff0c\u5229\u7528&ldquo;\u590d\u5236\u8282\u70b9\u603b\u662f\u5bf9\u5e94\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9&rdquo;\u7279\u6027\uff0c\u5c06\u6bcf\u4e2aori-&gt;next-&gt;random\u6307\u5411ori-&gt;random-&gt;next\uff0c\u4e2d\u95f4\u5224\u65ad\u4e00\u4e0b\u7a7a\u6307\u9488\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u7b2c\u4e09\u6b21\u904d\u5386\uff0c\u628a\u4e24\u4e2a\u94fe\u8868\u62c6\u5f00\uff0c\u6062\u590d\u539f\u94fe\u8868\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('df650f82-34ed-47db-82fc-3515b5b5ef04')\"><img id=\"code_img_closed_df650f82-34ed-47db-82fc-3515b5b5ef04\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_df650f82-34ed-47db-82fc-3515b5b5ef04\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('df650f82-34ed-47db-82fc-3515b5b5ef04',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_df650f82-34ed-47db-82fc-3515b5b5ef04\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list with a random pointer.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct RandomListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int label;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     RandomListNode *next, *random;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     RandomListNode *copyRandomList(RandomListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">12</span>         RandomListNode *p = head, *newhead = NULL, *<span style=\"color: #000000;\">tmp;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">if</span>(p == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">16</span>             tmp = <span style=\"color: #0000ff;\">new</span> RandomListNode(p-&gt;<span style=\"color: #000000;\">label);\n</span><span style=\"color: #008080;\">17</span>             tmp-&gt;next = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">18</span>             p-&gt;next =<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">19</span>             p = tmp-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         newhead = head-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">22</span>         p =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">25</span>             tmp = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">26</span>             tmp-&gt;random = p-&gt;random == NULL ? NULL : p-&gt;random-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">27</span>             p = tmp-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">29</span>         p =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">30</span>         <span style=\"color: #0000ff;\">while</span>(p !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">32</span>             tmp = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">33</span>             p-&gt;next = tmp-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">34</span>             p = tmp-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">35</span>             tmp-&gt;next = p == NULL ? NULL : p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">37</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> newhead;\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">39</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/single-number-ii/\">Single Number II</a></h3>\n<p>\u65b9\u6cd5\u4e00\uff1a\u8bbe\u7f6ecnt[32]\u8bb0\u5f55&nbsp;32\u4e2a\u6bd4\u7279\u4f4d\u76841\u7684\u4e2a\u6570\uff0c\u51fa\u73b03\u6b21\u7684\u6570\u7684\u5bf9\u5e94\u4f4d\u76841\u603b\u6570\u4e3a3\u7684\u500d\u6570\uff0c\u5219\u7edf\u8ba1\u4e4b\u540e\u6bcf\u4e2a\u4f4d\u5bf93\u53d6\u6a21\uff0c\u5269\u4e0b\u7684\u4f4d\u4e3a1\u7684\u5219\u5bf9\u5e94\u4e2a\u6570\u4e3a1\u7684\u90a3\u4e2a\u6570\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8db912c3-7d2c-4e1b-b9df-872114607e46')\"><img id=\"code_img_closed_8db912c3-7d2c-4e1b-b9df-872114607e46\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8db912c3-7d2c-4e1b-b9df-872114607e46\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8db912c3-7d2c-4e1b-b9df-872114607e46',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8db912c3-7d2c-4e1b-b9df-872114607e46\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> singleNumber(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> cnt[<span style=\"color: #800080;\">32</span>] = {<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">int</span> tmp =<span style=\"color: #000000;\"> A[i];\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">33</span>; tmp &gt;&gt;= <span style=\"color: #800080;\">1</span>, j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span>                 cnt[j] += tmp &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">32</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">13</span>             ans |= (cnt[i] % <span style=\"color: #800080;\">3</span>) &lt;&lt;<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">16</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>\u65b9\u6cd5\u4e8c\uff1a\u8bbe\u7f6eint one, two\u6a21\u62df\u4e24\u4f4d\u4e8c\u8fdb\u5236\u6765\u7edf\u8ba1\u5404\u6bd4\u7279\u4f4d1\u6b21\u6570\uff0c\u6bcf\u5f53one\u548ctwo\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u90fd\u4e3a1\u7684\u65f6\u5019\u628aone\u548ctwo\u90fd\u6e05\u96f6\uff0c\u6700\u540e\u5269\u4e0b\u7684one\u5c31\u662f\u8981\u6c42\u7684\u6570\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c3bc14f7-b6b3-4e5f-9739-e12a0625f9ce')\"><img id=\"code_img_closed_c3bc14f7-b6b3-4e5f-9739-e12a0625f9ce\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_c3bc14f7-b6b3-4e5f-9739-e12a0625f9ce\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('c3bc14f7-b6b3-4e5f-9739-e12a0625f9ce',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_c3bc14f7-b6b3-4e5f-9739-e12a0625f9ce\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> singleNumber(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> one = <span style=\"color: #800080;\">0</span>, two = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             two |= one &amp;<span style=\"color: #000000;\"> A[i];\n</span><span style=\"color: #008080;\"> 8</span>             one ^=<span style=\"color: #000000;\"> A[i];\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">int</span> tmp = one &amp;<span style=\"color: #000000;\"> two;\n</span><span style=\"color: #008080;\">10</span>             two ^=<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">11</span>             one ^=<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> one;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/single-number/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Single Number</span></a></p>\n<p>&nbsp;\u4e00\u8def\u5f02\u6216\u8fc7\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('cd7f3d1a-8194-4fb5-8e54-f267016b6615')\"><img id=\"code_img_closed_cd7f3d1a-8194-4fb5-8e54-f267016b6615\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_cd7f3d1a-8194-4fb5-8e54-f267016b6615\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('cd7f3d1a-8194-4fb5-8e54-f267016b6615',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_cd7f3d1a-8194-4fb5-8e54-f267016b6615\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">3</span>     <span style=\"color: #0000ff;\">int</span> singleNumber(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">4</span>         <span style=\"color: #0000ff;\">int</span> tmp = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">6</span>             tmp ^=<span style=\"color: #000000;\"> A[i];\n</span><span style=\"color: #008080;\">7</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">8</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">9</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/candy/\">Candy</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u65f6\u95f4\u590d\u6742\u5ea6&nbsp;O(n)\u7684\u65b9\u6cd5\u8fd8\u662f\u5bb9\u6613\u60f3\u4e86\uff0c\u4f18\u5316\u4e3a\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\u7684\u8bdd\u4e5f\u4e0d\u96be\uff0c\u53ea\u662f\u601d\u8003\u4ee3\u7801\u7684\u65f6\u5019\u4f1a\u6709\u70b9\u7ed5\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4e0a\u5761\u4e00\u6b65\u6b65\u6765\uff0c\u4e0b\u5761\u8d70\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u6ce2\u5cf0\u4f4d\u7f6e\u6bd4\u8f83\u4e00\u4e0b\u4e0a\u5761\u65f6\u5019\u8bb0\u5f55\u7684\u6700\u5927\u503c\u548c\u4e0b\u5761\u6c42\u7684\u7684\u6700\u5927\u503c\uff0c\u53d6\u8f83\u5927\u7684\uff0c\u5177\u4f53\u770b\u4ee3\u7801\uff1a</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('70324ffb-04ec-4934-b0a7-597bf6917678')\"><img id=\"code_img_closed_70324ffb-04ec-4934-b0a7-597bf6917678\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_70324ffb-04ec-4934-b0a7-597bf6917678\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('70324ffb-04ec-4934-b0a7-597bf6917678',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_70324ffb-04ec-4934-b0a7-597bf6917678\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> candy(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">ratings) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, i, j, start, nownum;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; ratings.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">if</span>(i == <span style=\"color: #800080;\">0</span> || ratings[i] == ratings[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 8</span>                 nownum = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(ratings[i] &gt; ratings[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\">10</span>                 nownum ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">if</span>(i + <span style=\"color: #800080;\">1</span> &lt; ratings.size() &amp;&amp; ratings[i + <span style=\"color: #800080;\">1</span>] &lt;<span style=\"color: #000000;\"> ratings[i])\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">13</span>                 start = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">for</span>(j = i + <span style=\"color: #800080;\">1</span>; j &lt; ratings.size() &amp;&amp; ratings[j] &lt; ratings[j - <span style=\"color: #800080;\">1</span>]; start++, j ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">if</span>(start &gt;<span style=\"color: #000000;\"> nownum)\n</span><span style=\"color: #008080;\">16</span>                     cnt += (start + <span style=\"color: #800080;\">1</span>) * start &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">18</span>                     cnt += ((start - <span style=\"color: #800080;\">1</span>) * start &gt;&gt; <span style=\"color: #800080;\">1</span>) +<span style=\"color: #000000;\"> nownum;\n</span><span style=\"color: #008080;\">19</span>                 nownum = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span>                 i = j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">else</span> \n<span style=\"color: #008080;\">23</span>                 cnt +=<span style=\"color: #000000;\"> nownum;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> cnt;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/gas-station/\"><span style=\"color: #ff0000;\">Gas Station</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u8bc1\u660e\u9898\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4e00\u3001\u5982\u679c\u4ece i \u5230 j \u7684\u65f6\u5019\u7406\u8bba\u8ba1\u7b97\u6c14\u91cf\u521a\u597d\u4e3a\u8d1f\u6570\uff0c\u5219 i ~ j \u7684\u52a0\u6c14\u7ad9\u90fd\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u70b9\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u53cd\u8bc1\u4e00\u4e0b\uff0c\u4ece\u524d\u5f80\u540e\u53bb\u6389\u7ad9\uff0c\u5982\u679c\u53bb\u6389\u7684\u7ad9\u80fd\u589e\u52a0\u6c14\uff0c\u5373\u6b63\u6570\uff0c\u5219\u7ed3\u679c\u66f4\u7cdf\u3002\u5982\u679c\u53bb\u6389\u7684\u7ad9\u662f\u8d1f\u6570\uff0c\u90a3\u4e48\u8d1f\u6570\u5982\u679c\u62b5\u6d88\u4e86\u4e4b\u524d\u7684\u6b63\u6570\uff0c\u5219\u5728\u5230 j \u4e4b\u524d\u5df2\u7ecf\u8d1f\u6570\u4e86\uff0c\u5982\u679c\u4e0d\u80fd\u62b5\u6d88\u4e4b\u524d\u7684\u6b63\u6570\uff0c\u90a3\u4e48\u7ed3\u679c\u8fd8\u662f\u66f4\u7cdf\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4e8c\u3001\u5224\u65ad\u662f\u5426\u80fd\u6210\u884c\uff0c\u4e00\u4e2a\u73af\u7684\u548c\u4e3a\u975e\u8d1f\u5c31\u53ef\u4ee5\u3002</span></span></p>\n<p>\u5047\u8bbe\u73af\u4e3a\u6b63\uff0c 0 ~ j \u521a\u597d\u4e3a\u8d1f\uff0c j + 1 ~ k \u521a\u597d\u4e3a\u8d1f\u6570\uff0ck + 1 \u4e4b\u540e\u4e3a\u6b63\uff0c\u5219 k + 1 \u4e3a\u7b54\u6848\u3002</p>\n<p>\u4e5f\u53cd\u8bc1\u4e00\u4e0b\uff0ck + 1 \u51fa\u53d1\uff0c\u5230gas.size() - 1\u90fd\u4e3a\u6b63\uff0c\u5219\u8f6c\u56de\u6765\u5230 j - 1 \u90fd\u4f1a\u4e3a\u6b63\u3002\u5982\u679c\u5230 j \u65f6\u5019\u4e3a\u8d1f\uff0c\u5219\u6574\u4e2a\u73af\u4e0d\u53ef\u80fd\u4e3a\u6b63\uff0c\u6240\u4ee5\u5230 j \u7684\u65f6\u5019\u4e5f\u4e3a\u6b63\uff0c\u5269\u4e0b\u7684\u4e00\u6837\u3002\u8fd9\u6837\u5c31\u80fd\u591f\u6210\u529f\u8f6c\u4e00\u5708\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('5fa92899-d89b-41be-872b-4d8a7da80d59')\"><img id=\"code_img_closed_5fa92899-d89b-41be-872b-4d8a7da80d59\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_5fa92899-d89b-41be-872b-4d8a7da80d59\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('5fa92899-d89b-41be-872b-4d8a7da80d59',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_5fa92899-d89b-41be-872b-4d8a7da80d59\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> canCompleteCircuit(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;gas, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">cost) {\n</span><span style=\"color: #008080;\"> 4</span>        <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, ans, sum, all;\n</span><span style=\"color: #008080;\"> 5</span>        <span style=\"color: #0000ff;\">for</span>(i = ans = sum = all = <span style=\"color: #800080;\">0</span>; i &lt; gas.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">       {\n</span><span style=\"color: #008080;\"> 7</span>            sum += gas[i] -<span style=\"color: #000000;\"> cost[i];\n</span><span style=\"color: #008080;\"> 8</span>            all += gas[i] -<span style=\"color: #000000;\"> cost[i];\n</span><span style=\"color: #008080;\"> 9</span>            <span style=\"color: #0000ff;\">if</span>(sum &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">           {\n</span><span style=\"color: #008080;\">11</span>                sum = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>                ans = i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">           }\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">       }\n</span><span style=\"color: #008080;\">15</span>        <span style=\"color: #0000ff;\">return</span> all &gt;= <span style=\"color: #800080;\">0</span> ? ans : -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">17</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/clone-graph/\">Clone Graph</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;label\u662f\u552f\u4e00\u7684\uff0c\u9012\u5f52\uff0c\u7528unordered_map\u6807\u8bb0\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('d8d61766-035e-4a77-9782-8d0fd240539d')\"><img id=\"code_img_closed_d8d61766-035e-4a77-9782-8d0fd240539d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_d8d61766-035e-4a77-9782-8d0fd240539d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('d8d61766-035e-4a77-9782-8d0fd240539d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_d8d61766-035e-4a77-9782-8d0fd240539d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for undirected graph.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct UndirectedGraphNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int label;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     vector&lt;UndirectedGraphNode *&gt; neighbors;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     UndirectedGraphNode(int x) : label(x) {};\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     unordered_map&lt;<span style=\"color: #0000ff;\">int</span>, UndirectedGraphNode *&gt;<span style=\"color: #000000;\"> mp;\n</span><span style=\"color: #008080;\">12</span>     UndirectedGraphNode *cloneGraph(UndirectedGraphNode *<span style=\"color: #000000;\">node) {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">if</span>(node == NULL || mp.count(node-&gt;label)) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">14</span>         UndirectedGraphNode *tmp = <span style=\"color: #0000ff;\">new</span> UndirectedGraphNode(node-&gt;<span style=\"color: #000000;\">label);\n</span><span style=\"color: #008080;\">15</span>         mp[node-&gt;label] =<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; node-&gt;neighbors.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">18</span>             cloneGraph(node-&gt;<span style=\"color: #000000;\">neighbors[i]);\n</span><span style=\"color: #008080;\">19</span>             tmp-&gt;neighbors.push_back(mp[node-&gt;neighbors[i]-&gt;<span style=\"color: #000000;\">label]);\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/palindrome-partitioning-ii/\"><span style=\"color: #ff0000;\">Palindrome Partitioning II</span></a></span></h3>\n<p>O(n^2)\u7684\u52a8\u6001\u89c4\u5212\u3002</p>\n<p>cutdp[i] \u8868\u793a\u524d i \u4e2a\u5b57\u7b26\u6700\u5c0f\u5207\u5272\u51e0\u6b21\u3002</p>\n<p>paldp[i][j] == true \u8868\u793a i ~ j \u662f\u56de\u6587\u3002</p>\n<p>\u5728\u679a\u4e3e i \u548c i \u4e4b\u524d\u7684\u6240\u6709 j \u7684\u8fc7\u7a0b\u4e2d\u5c31\u5f97\u5230\u4e86 paldp[j][i] \u7684\u6240\u6709\u56de\u6587\u5224\u65ad\uff0c\u800c\u5bf9\u4e8e i + 1\uff0cpaldp[j][i + 1]\u53ef\u7531 s[j]\u3001s[i + 1]\u3001dp[j + 1][i]\u5728O(1)\u5224\u65ad\u3002</p>\n<p>cutdp[i]\u4e3a\u6240\u6709 j (j &lt; i)\uff0c\u5f53paldp[j + 1][i] == true\u7684 cutdp[j] + 1\u7684\u6700\u5c0f\u503c\u3002\u6ce8\u610f\u4e00\u4e0b\u8fb9\u754c\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('62f90595-1826-442b-8e45-bdfd376ab45c')\"><img id=\"code_img_closed_62f90595-1826-442b-8e45-bdfd376ab45c\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_62f90595-1826-442b-8e45-bdfd376ab45c\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('62f90595-1826-442b-8e45-bdfd376ab45c',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_62f90595-1826-442b-8e45-bdfd376ab45c\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> minCut(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> paldp[s.length()][s.length()];\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cutdp[s.length()];\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             cutdp[i] = <span style=\"color: #800080;\">0x3f3f3f3f</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = i - <span style=\"color: #800080;\">1</span>; j &gt;= -<span style=\"color: #800080;\">1</span>; j --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">if</span>(s.at(j + <span style=\"color: #800080;\">1</span>) == s.at(i) &amp;&amp; (j + <span style=\"color: #800080;\">2</span> &gt;= i - <span style=\"color: #800080;\">1</span> || paldp[j + <span style=\"color: #800080;\">2</span>][i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">13</span>                     paldp[j + <span style=\"color: #800080;\">1</span>][i] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>                     cutdp[i] = min(cutdp[i], (j &gt;= <span style=\"color: #800080;\">0</span> ? (cutdp[j] + <span style=\"color: #800080;\">1</span>) : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">16</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">17</span>                     paldp[j + <span style=\"color: #800080;\">1</span>][i] = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>                     \n<span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span> cutdp[s.length() - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/palindrome-partitioning/\">Palindrome Partitioning</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;O(n^2)\u52a8\u6001\u89c4\u5212\uff0cpaldp[i][j]&nbsp; == true\u8868\u793a i ~ j \u662f\u56de\u6587\u3002\u8fd9\u91ccDP\u7684\u65b9\u6cd5\u662f\u57fa\u672c\u7684\uff0c\u4e0d\u518d\u591a\u8bf4\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u5f97\u5230paldp\u4e4b\u540e\uff0cDFS\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u56e0\u4e3a\u5355\u5b57\u7b26\u662f\u56de\u6587\uff0c\u6240\u4ee5DFS\u7684\u7ec8\u70b9\u80af\u5b9a\u90fd\u662f\u89e3\uff0c\u6240\u4ee5\u4e0d\u5fc5\u5229\u7528\u5176\u4ed6\u7684\u7ed3\u6784\u5b58\u50a8\u7b54\u6848\u4fe1\u606f\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('bcd95952-f874-43c7-8bc4-37766bc77e0c')\"><img id=\"code_img_closed_bcd95952-f874-43c7-8bc4-37766bc77e0c\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_bcd95952-f874-43c7-8bc4-37766bc77e0c\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('bcd95952-f874-43c7-8bc4-37766bc77e0c',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_bcd95952-f874-43c7-8bc4-37766bc77e0c\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; &gt;<span style=\"color: #000000;\">res;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">bool</span> **<span style=\"color: #000000;\">paldp;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">string</span> s, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ith)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">if</span>(ith ==<span style=\"color: #000000;\"> s.length())\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            res.push_back(tmp);\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = ith; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(paldp[ith][i])\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">17</span>                 tmp.push_back(s.substr(ith, i - ith + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">18</span>                 DFS(s, i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">                tmp.pop_back();\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; &gt; partition(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\">25</span>         paldp = <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">bool</span>*<span style=\"color: #000000;\">[s.length()];\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">27</span>             paldp[i] = <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\">[s.length()];\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = i; j &gt;= <span style=\"color: #800080;\">0</span>; j --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">30</span>                 paldp[j][i] = s.at(i) == s.at(j) &amp;&amp; (j + <span style=\"color: #800080;\">1</span> &gt;= i - <span style=\"color: #800080;\">1</span> || paldp[j + <span style=\"color: #800080;\">1</span>][i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">31</span>         DFS(s, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">32</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">34</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/surrounded-regions/\">Surrounded Regions</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5468\u56f4\u56db\u6761\u8fb9\u7684O\u505a\u8d77\u70b9\u641c\u7d22\u66ff\u6362\u4e3a\u7b2c\u4e09\u79cd\u7b26\u53f7\uff0c\u518d\u904d\u5386\u6240\u6709\u7b26\u53f7\u628aO\u6362\u6210X\uff0c\u7b2c\u4e09\u79cd\u7b26\u53f7\u6362\u56deO\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c231a3e7-b77b-4140-8426-3d637e7048d8')\"><img id=\"code_img_closed_c231a3e7-b77b-4140-8426-3d637e7048d8\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_c231a3e7-b77b-4140-8426-3d637e7048d8\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('c231a3e7-b77b-4140-8426-3d637e7048d8',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_c231a3e7-b77b-4140-8426-3d637e7048d8\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     typedef pair&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> pii;\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">int</span> dx[<span style=\"color: #800080;\">4</span>] = {<span style=\"color: #800080;\">1</span>, -<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span> dy[<span style=\"color: #800080;\">4</span>] = {<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">1</span>, -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 6</span>     queue&lt;pii&gt;<span style=\"color: #000000;\"> q;\n</span><span style=\"color: #008080;\"> 7</span>     <span style=\"color: #0000ff;\">void</span> solve(vector&lt;vector&lt;<span style=\"color: #0000ff;\">char</span>&gt; &gt; &amp;<span style=\"color: #000000;\">board) {\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">if</span>(board.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">int</span> width = board[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].size();\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">int</span> height =<span style=\"color: #000000;\"> board.size();\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; width; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">if</span>(board[<span style=\"color: #800080;\">0</span>][i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">O</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span>                 board[<span style=\"color: #800080;\">0</span>][i] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">#</span><span style=\"color: #800000;\">'</span>, q.push(pair&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span>&gt;(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, i));\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">if</span>(board[height - <span style=\"color: #800080;\">1</span>][i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">O</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">16</span>                 board[height - <span style=\"color: #800080;\">1</span>][i] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">#</span><span style=\"color: #800000;\">'</span>, q.push(pii(height - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, i));\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; height - <span style=\"color: #800080;\">1</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">20</span>             <span style=\"color: #0000ff;\">if</span>(board[i][<span style=\"color: #800080;\">0</span>] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">O</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">21</span>                 board[i][<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">#</span><span style=\"color: #800000;\">'</span>, q.push(pii(i, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">if</span>(board[i][width - <span style=\"color: #800080;\">1</span>] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">O</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">23</span>                 board[i][width - <span style=\"color: #800080;\">1</span>] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">#</span><span style=\"color: #800000;\">'</span>, q.push(pii(i, width - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">q.empty())\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">27</span>             pii now =<span style=\"color: #000000;\"> q.front();\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            q.pop();\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">4</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">31</span>                 <span style=\"color: #0000ff;\">int</span> ty = now.first +<span style=\"color: #000000;\"> dx[i];\n</span><span style=\"color: #008080;\">32</span>                 <span style=\"color: #0000ff;\">int</span> tx = now.second +<span style=\"color: #000000;\"> dy[i];\n</span><span style=\"color: #008080;\">33</span>                 <span style=\"color: #0000ff;\">if</span>(tx &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; tx &lt; width &amp;&amp; ty &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; ty &lt; height &amp;&amp; board[ty][tx] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">O</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">35</span>                     board[ty][tx] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">#</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">                    q.push(pii(ty, tx));\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">40</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; height; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">41</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; width; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">43</span>                 <span style=\"color: #0000ff;\">if</span>(board[i][j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">O</span><span style=\"color: #800000;\">'</span>) board[i][j] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">X</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">44</span>                 <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(board[i][j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">#</span><span style=\"color: #800000;\">'</span>) board[i][j] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">O</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">45</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">46</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">47</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/sum-root-to-leaf-numbers/\">Sum Root to Leaf Numbers</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u904d\u5386\u4e00\u904d\u52a0\u8d77\u6765\u3002\u3002\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('caf5d3df-70ee-4f3d-9eed-f511cb045e00')\"><img id=\"code_img_closed_caf5d3df-70ee-4f3d-9eed-f511cb045e00\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_caf5d3df-70ee-4f3d-9eed-f511cb045e00\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('caf5d3df-70ee-4f3d-9eed-f511cb045e00',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_caf5d3df-70ee-4f3d-9eed-f511cb045e00\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">void</span> DFS(TreeNode *now, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> tmp)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left == NULL &amp;&amp; now-&gt;right ==<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">17</span>             ans += tmp * <span style=\"color: #800080;\">10</span> + now-&gt;<span style=\"color: #000000;\">val;\n</span><span style=\"color: #008080;\">18</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">22</span>             DFS(now-&gt;left, tmp * <span style=\"color: #800080;\">10</span> + now-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;right !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">26</span>             DFS(now-&gt;right, tmp * <span style=\"color: #800080;\">10</span> + now-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">29</span>     <span style=\"color: #0000ff;\">int</span> sumNumbers(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">30</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">31</span>         ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">32</span>         DFS(root, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">35</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/longest-consecutive-sequence/\">Longest Consecutive Sequence</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u65b9\u6cd5\u4e00\uff1a\u4e00\u5f00\u59cb\u7adf\u7136\u60f3\u4e86\u5e76\u67e5\u96c6\uff0c\u5176\u5b9e\u7ed5\u5f2f\u4e86\uff0c\u591a\u6b64\u4e00\u4e3e\u3002\u54c8\u5e0c+\u5e76\u67e5\u96c6\uff0c\u628a\u6bcf\u4e2a\u6570\u54c8\u5e0c\uff0c\u679a\u4e3e\u6bcf\u4e2a\u6570\u770b\u76f8\u90bb\u7684\u6570\u5728\u4e0d\u5728\u6570\u7ec4\u91cc\uff0c\u5e76\u67e5\u96c6\u5408\u5e76\uff0c\u53ea\u662f\u5e76\u67e5\u96c6\u7684\u590d\u6742\u5ea6\u8981\u6bd4O(1)\u5927\u4e00\u4e9b\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('2e3ae171-d295-41e5-9418-2dbd4e4f978f')\"><img id=\"code_img_closed_2e3ae171-d295-41e5-9418-2dbd4e4f978f\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_2e3ae171-d295-41e5-9418-2dbd4e4f978f\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('2e3ae171-d295-41e5-9418-2dbd4e4f978f',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_2e3ae171-d295-41e5-9418-2dbd4e4f978f\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     unordered_map&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> mp, cnt;\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span> fa(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         i == mp[i] ? i : (mp[i] =<span style=\"color: #000000;\"> fa(mp[i]));\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 9</span>     <span style=\"color: #0000ff;\">int</span> longestConsecutive(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">num) {\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; num.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span>             mp[num[i]] = num[i], cnt[num[i]] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; num.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">if</span>(mp.count(num[i] + <span style=\"color: #800080;\">1</span>) &amp;&amp; fa(num[i]) != fa(num[i] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">16</span>                 cnt[fa(num[i] + <span style=\"color: #800080;\">1</span>)] +=<span style=\"color: #000000;\"> cnt[fa(num[i])];\n</span><span style=\"color: #008080;\">17</span>                 ans = max(cnt[fa(num[i] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)], ans);\n</span><span style=\"color: #008080;\">18</span>                 mp[fa(num[i])] = fa(num[i] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u65b9\u6cd5\u4e8c\uff1a\u54c8\u5e0c+\u679a\u4e3e\u76f8\u90bb\u6570\u3002\u76f8\u90bb\u7684\u6570\u5728\u6570\u7ec4\u91cc\u7684\u8bdd\uff0c\u6bcf\u4e2a\u6570\u4e4b\u591a\u8bbf\u95ee\u4e00\u6b21\uff1b\u76f8\u90bb\u7684\u6570\u4e0d\u5728\u6570\u7ec4\u91cc\u7684\u8bdd\uff0c\u679a\u4e3e\u4f1a\u4e2d\u65ad\u3002\u6240\u4ee5\u8bbe\u54c8\u5e0c\u590d\u6742\u5ea6\u4e3aO(1)\u7684\u8bdd\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e25\u683c\u7684O(n)\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u5176\u5b9e\u8fd9\u4e2a\u9898\u7684\u6570\u636e\u633a\u5584\u826f\uff0c\u5982\u679c\u51fa\u4e862147483647, -2147483648\uff0c\u90a3\u8fd8\u662f\u7528long long \u7a33\u59a5\u4e9b\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('6479c81a-5c03-4f9a-9d78-976731d27a7c')\"><img id=\"code_img_closed_6479c81a-5c03-4f9a-9d78-976731d27a7c\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_6479c81a-5c03-4f9a-9d78-976731d27a7c\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('6479c81a-5c03-4f9a-9d78-976731d27a7c',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_6479c81a-5c03-4f9a-9d78-976731d27a7c\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     unordered_map&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">bool</span>&gt;<span style=\"color: #000000;\"> vis;\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">int</span> longestConsecutive(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">num) {\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; num.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span>             vis[num[i]] = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; num.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(vis[num[i]] == <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">int</span> cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = num[i]; vis.count(j); j ++, cnt ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">15</span>                     vis[j] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">17</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = num[i] - <span style=\"color: #800080;\">1</span>; vis.count(j); j --, cnt ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">19</span>                     vis[j] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">21</span>                 ans =<span style=\"color: #000000;\"> max(ans, cnt);\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">24</span>         \n<span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/word-ladder-ii/\">Word Ladder II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u7528\u6570\u7ec4\u7c7b\u578b\u7684\u961f\u5217\uff0cBFS\u8fc7\u7a0b\u4e2d\u8bb0\u5f55pre\u8def\u5f84\uff0c\u641c\u5b8c\u540e\u8fed\u4ee3\u56de\u53bb\u4fdd\u5b58\u8def\u5f84\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4f3c\u4e4e\u5361\u4e86\u5e38\u6570\uff0c\u7528queue\u961f\u5217\uff0c\u53e6\u5916\u5b58\u8def\u5f84\u7684\u65b9\u6cd5\u8d85\u65f6\u4e86\u3002</span></span></p>\n<p>\u60f3\u66f4\u5feb\u5c31\u53cc\u5411\u5e7f\u641c\u5427\u3002\u8ba9\u6211\u60f3\u8d77\u4e86POJ\u90a3\u4e2a\u516b\u6570\u7801\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b3d3f6f6-ee16-4785-b525-60711025daa9')\"><img id=\"code_img_closed_b3d3f6f6-ee16-4785-b525-60711025daa9\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b3d3f6f6-ee16-4785-b525-60711025daa9\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b3d3f6f6-ee16-4785-b525-60711025daa9',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b3d3f6f6-ee16-4785-b525-60711025daa9\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Node\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> str;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pace;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pre;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    Node(){}\n</span><span style=\"color: #008080;\"> 8</span>     Node(<span style=\"color: #0000ff;\">string</span> s, <span style=\"color: #0000ff;\">int</span> pa, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pr)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">10</span>         str =<span style=\"color: #000000;\"> s;\n</span><span style=\"color: #008080;\">11</span>         pace =<span style=\"color: #000000;\"> pa;\n</span><span style=\"color: #008080;\">12</span>         pre =<span style=\"color: #000000;\"> pr;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">17</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;&gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">18</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;&gt; findLadders(<span style=\"color: #0000ff;\">string</span> start, <span style=\"color: #0000ff;\">string</span> end, unordered_set&lt;<span style=\"color: #0000ff;\">string</span>&gt; &amp;<span style=\"color: #000000;\">dict) {\n</span><span style=\"color: #008080;\">19</span>         vector&lt;Node&gt;<span style=\"color: #000000;\"> q;\n</span><span style=\"color: #008080;\">20</span>         q.push_back(Node(end, <span style=\"color: #800080;\">1</span>, -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">21</span>         unordered_map&lt;<span style=\"color: #0000ff;\">string</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> dis;\n</span><span style=\"color: #008080;\">22</span>         dis[end] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; q.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">25</span>             Node now =<span style=\"color: #000000;\"> q[i];\n</span><span style=\"color: #008080;\">26</span>             <span style=\"color: #0000ff;\">if</span>(dis.count(start) &amp;&amp; now.pace &gt;= dis[start]) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; now.str.length(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">29</span>                 <span style=\"color: #0000ff;\">string</span> tmp =<span style=\"color: #000000;\"> now.str;\n</span><span style=\"color: #008080;\">30</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">char</span> c = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">'</span>; c &lt;= <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">z</span><span style=\"color: #800000;\">'</span>; c ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">32</span>                     tmp[j] =<span style=\"color: #000000;\"> c;\n</span><span style=\"color: #008080;\">33</span>                     <span style=\"color: #0000ff;\">if</span>((dict.count(tmp) || tmp == start) &amp;&amp; (!dis.count(tmp) || dis[tmp] == now.pace + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">35</span>                         dis[tmp] = now.pace + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">36</span>                         q.push_back(Node(tmp, now.pace + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, i));\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">40</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">41</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = q.size() - <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; q[i].pace == dis[start]; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">43</span>             <span style=\"color: #0000ff;\">if</span>(q[i].str ==<span style=\"color: #000000;\"> start)\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">45</span>                 vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">46</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = i; j != -<span style=\"color: #800080;\">1</span>; j =<span style=\"color: #000000;\"> q[j].pre)\n</span><span style=\"color: #008080;\">47</span> <span style=\"color: #000000;\">                    tmp.push_back(q[j].str);\n</span><span style=\"color: #008080;\">48</span> <span style=\"color: #000000;\">                ans.push_back(tmp);\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">50</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">51</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">52</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">53</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/word-ladder/\">Word Ladder</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u76f4\u63a5BFS\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b6d0f40b-4622-4225-9b65-7b2811506c5e')\"><img id=\"code_img_closed_b6d0f40b-4622-4225-9b65-7b2811506c5e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b6d0f40b-4622-4225-9b65-7b2811506c5e\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b6d0f40b-4622-4225-9b65-7b2811506c5e',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b6d0f40b-4622-4225-9b65-7b2811506c5e\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> ladderLength(<span style=\"color: #0000ff;\">string</span> start, <span style=\"color: #0000ff;\">string</span> end, unordered_set&lt;<span style=\"color: #0000ff;\">string</span>&gt; &amp;<span style=\"color: #000000;\">dict) {\n</span><span style=\"color: #008080;\"> 4</span>         typedef pair&lt;<span style=\"color: #0000ff;\">string</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> pii;\n</span><span style=\"color: #008080;\"> 5</span>         unordered_set&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> flag;\n</span><span style=\"color: #008080;\"> 6</span>         queue&lt;pii&gt;<span style=\"color: #000000;\"> q;\n</span><span style=\"color: #008080;\"> 7</span>         q.push(pii(start, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">q.empty())\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span>             pii now =<span style=\"color: #000000;\"> q.front();\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            q.pop();\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; now.first.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">string</span> tmp =<span style=\"color: #000000;\"> now.first;\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">char</span> j = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">a</span><span style=\"color: #800000;\">'</span>; j &lt;= <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">z</span><span style=\"color: #800000;\">'</span>; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">17</span>                     tmp[i] =<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">18</span>                     <span style=\"color: #0000ff;\">if</span>(tmp == end) <span style=\"color: #0000ff;\">return</span> now.second + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>                     <span style=\"color: #0000ff;\">if</span>(dict.count(tmp) &amp;&amp; !<span style=\"color: #000000;\">flag.count(tmp))\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">21</span>                         q.push(pii(tmp, now.second + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">                        flag.insert(tmp);\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">29</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/valid-palindrome/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Valid Palindrome</span></a></p>\n<p>&nbsp;\u505a\u8fc7\u5218\u6c5d\u4f73 \u767d\u4e66\u7684\u4eba\u60f3\u5fc5\u90fd\u77e5\u9053ctype.h\u548cisdigit(), isalpha, tolower(), toupper()\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('0ae7f6fb-46be-4418-b5a1-38c08c0169b3')\"><img id=\"code_img_closed_0ae7f6fb-46be-4418-b5a1-38c08c0169b3\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_0ae7f6fb-46be-4418-b5a1-38c08c0169b3\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('0ae7f6fb-46be-4418-b5a1-38c08c0169b3',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_0ae7f6fb-46be-4418-b5a1-38c08c0169b3\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> valid(<span style=\"color: #0000ff;\">char</span> &amp;<span style=\"color: #000000;\">x)\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 5</span>         x =<span style=\"color: #000000;\"> tolower(x);\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">return</span> isdigit(x) ||<span style=\"color: #000000;\"> isalpha(x);\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 8</span>     <span style=\"color: #0000ff;\">bool</span> isPalindrome(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">if</span>(s.length() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>, j = s.length() - <span style=\"color: #800080;\">1</span>; i &lt; j; i ++, j --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">while</span>(!valid(s[i]) &amp;&amp; i &lt; s.length()) i ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">while</span>(!valid(s[j]) &amp;&amp; j &gt;= <span style=\"color: #800080;\">0</span>) j --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">if</span>(i &lt; j &amp;&amp; s[i] != s[j]) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/binary-tree-maximum-path-sum/\">Binary Tree Maximum Path Sum</a></h3>\n<p>\u540e\u7eed\u904d\u5386\uff0c\u5b50\u95ee\u9898\u4e3a\u5b50\u6811\u6839\u8282\u70b9\u5411\u53f6\u5b50\u8282\u70b9\u51fa\u53d1\u7684\u6700\u5927\u8def\u5f84\u548c\u3002</p>\n<p>\u5373&nbsp;l = DFS(now-&gt;left), r = DFS(now-&gt;right)\u3002</p>\n<p>\u6b64\u65f6\uff0cans\u53ef\u80fd\u662f now-&gt;valid,\u53ef\u80fd\u662f\u5de6\u8fb9\u4e00\u8def\u4e0a\u6765\u52a0\u4e0anow-&gt;valid\uff0c\u53ef\u80fd\u662f\u53f3\u8fb9\u4e00\u8def\u4e0a\u6765\uff0c\u4e5f\u53ef\u80fd\u662f\u5de6\u8fb9\u4e0a\u6765\u7ecf\u8fc7now\u518d\u53f3\u8fb9\u4e00\u8def\u4e0b\u53bb\uff0c\u56db\u79cd\u60c5\u51b5\u3002</p>\n<p>\u56db\u79cd\u60c5\u51b5\u66f4\u65b0\u5b8cans\u540e\uff0cnow\u8fd4\u56de\u4e0a\u4e00\u5c42\u53ea\u80fd\u662f now-&gt;valid\u6216\u5de6\u8fb9\u4e00\u8def\u4e0a\u6765\u6216\u53f3\u8fb9\u4e00\u8def\u4e0a\u6765\uff0c\u4e09\u79cd\u60c5\u51b5\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('ce8ecac0-af17-4299-a2bc-6dc9524e26e5')\"><img id=\"code_img_closed_ce8ecac0-af17-4299-a2bc-6dc9524e26e5\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_ce8ecac0-af17-4299-a2bc-6dc9524e26e5\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('ce8ecac0-af17-4299-a2bc-6dc9524e26e5',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_ce8ecac0-af17-4299-a2bc-6dc9524e26e5\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">int</span> DFS(TreeNode *<span style=\"color: #000000;\">now)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(now == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">int</span> l = max(DFS(now-&gt;left), <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">int</span> r = max(DFS(now-&gt;right), <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">18</span>         ans = max(ans, l + r + now-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">return</span> max(l + now-&gt;val, r + now-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">int</span> maxPathSum(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span>         ans = -<span style=\"color: #800080;\">0x3f3f3f3f</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        DFS(root);\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\">Best Time to Buy and Sell Stock III</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u524d\u7f00pre[i]\u5904\u7406 0 ~ i \u4e70\u5356\u4e00\u6b21\u6700\u4f18\u89e3\uff0c\u540e\u7f00suf[i]\u5904\u7406 i ~ prices.size() - 1 \u4e70\u5356\u4e00\u6b21\u6700\u4f18\u89e3\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u6240\u6709\u4f4d\u7f6epre[i] + suf[i]\u6700\u5927\u503c\u4e3a\u7b54\u6848O(n)\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u5904\u7406\u6700\u4f18\u89e3\u7684\u65f6\u5019\u662f\u7ef4\u62a4\u524d\uff08\u540e\uff09\u7f00prices\u6700\u5c0f\uff08\u5927\uff09\u503c\uff0c\u4e0e\u5f53\u524dprices\u505a\u5dee\u540e\u548c\u524d\uff08\u540e\uff09\u7f00\u6700\u4f18\u89e3\u6bd4\u8f83\u53d6\u6700\u4f18\uff0cO(n)\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u603b\u590d\u6742\u5ea6O(n)\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('832674fa-27cc-4860-b04b-4ccf86e4cac9')\"><img id=\"code_img_closed_832674fa-27cc-4860-b04b-4ccf86e4cac9\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_832674fa-27cc-4860-b04b-4ccf86e4cac9\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('832674fa-27cc-4860-b04b-4ccf86e4cac9',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_832674fa-27cc-4860-b04b-4ccf86e4cac9\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> maxProfit(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">prices) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> pre(prices.size()), suf(prices.size());\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>, mtmp = <span style=\"color: #800080;\">0x3f3f3f3f</span>; i &lt; prices.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             mtmp = i ?<span style=\"color: #000000;\"> min(mtmp, prices[i]) : prices[i];\n</span><span style=\"color: #008080;\"> 9</span>             pre[i] = max(prices[i] - mtmp, i ? pre[i - <span style=\"color: #800080;\">1</span>] : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = prices.size() - <span style=\"color: #800080;\">1</span>, mtmp = <span style=\"color: #800080;\">0</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">13</span>             mtmp = i != prices.size() - <span style=\"color: #800080;\">1</span> ?<span style=\"color: #000000;\"> max(mtmp, prices[i]) : prices[i];\n</span><span style=\"color: #008080;\">14</span>             suf[i] = max(mtmp - prices[i], i != prices.size() - <span style=\"color: #800080;\">1</span> ? suf[i + <span style=\"color: #800080;\">1</span>] : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; prices.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">17</span>             ans = max(ans, pre[i] +<span style=\"color: #000000;\"> suf[i]);\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">20</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\">Best Time to Buy and Sell Stock II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u53ef\u4ee5\u4e70\u5356\u591a\u6b21\uff0c\u628a\u6240\u6709\u4e0a\u5761\u5dee\u7d2f\u52a0\u5373\u53ef\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('1ca6e7ec-bb4f-4056-9cd1-04053bd6e66f')\"><img id=\"code_img_closed_1ca6e7ec-bb4f-4056-9cd1-04053bd6e66f\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_1ca6e7ec-bb4f-4056-9cd1-04053bd6e66f\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('1ca6e7ec-bb4f-4056-9cd1-04053bd6e66f',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_1ca6e7ec-bb4f-4056-9cd1-04053bd6e66f\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> maxProfit(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">prices) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; prices.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">if</span>(prices[i] &gt; prices[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 8</span>                 ans += prices[i] - prices[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">12</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/best-time-to-buy-and-sell-stock/\">Best Time to Buy and Sell Stock</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u7ef4\u62a4\u524d\uff08\u540e\uff09\u7f00\u6700\u5c0f\uff08\u5927\uff09\u503c\uff0c\u548c\u5f53\u524dprices\u505a\u5dee\u66f4\u65b0\u7b54\u6848\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('32b7b93d-bcd2-40a2-9096-6ee03095050d')\"><img id=\"code_img_closed_32b7b93d-bcd2-40a2-9096-6ee03095050d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_32b7b93d-bcd2-40a2-9096-6ee03095050d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('32b7b93d-bcd2-40a2-9096-6ee03095050d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_32b7b93d-bcd2-40a2-9096-6ee03095050d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> maxProfit(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">prices) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = prices.size() - <span style=\"color: #800080;\">1</span>, mtmp = <span style=\"color: #800080;\">0</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             mtmp =<span style=\"color: #000000;\"> max(mtmp, prices[i]);\n</span><span style=\"color: #008080;\"> 8</span>             ans = max(mtmp -<span style=\"color: #000000;\"> prices[i], ans);\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">12</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/triangle/\">Triangle</a></h3>\n<p>\u7adf\u7136\u9047\u5230\u4e86ACM\u9012\u63a8\u5165\u95e8\u9898\uff0c\u60f3\u5fc5\u65e0\u6570ACMer\u5bf9\u8fd9\u9898\u592a\u719f\u6089\u4e86\u3002</p>\n<p>\u4ece\u4e0b\u5f80\u4e0a\u9012\u63a8\uff0c\u4e00\u7ef4\u6570\u7ec4\u6eda\u52a8\u66f4\u65b0\u5373\u53ef\u3002\u8fd9\u91cc\u61d2\u7701\u4e8b\uff0c\u76f4\u63a5\u628a\u539f\u6570\u7ec4\u6539\u4e86\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('539bcca9-772d-40d0-babd-a81540b9f635')\"><img id=\"code_img_closed_539bcca9-772d-40d0-babd-a81540b9f635\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_539bcca9-772d-40d0-babd-a81540b9f635\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('539bcca9-772d-40d0-babd-a81540b9f635',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_539bcca9-772d-40d0-babd-a81540b9f635\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> minimumTotal(vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &amp;<span style=\"color: #000000;\">triangle) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = triangle.size() - <span style=\"color: #800080;\">2</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 6</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; triangle[i].size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span>                 triangle[i][j] = min(triangle[i][j] + triangle[i + <span style=\"color: #800080;\">1</span>][j], triangle[i][j] + triangle[i + <span style=\"color: #800080;\">1</span>][j + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">return</span> triangle.size() == <span style=\"color: #800080;\">0</span> ? <span style=\"color: #800080;\">0</span> : triangle[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">11</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/pascals-triangle-ii/\">Pascal's Triangle II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u6eda\u52a8\u6570\u7ec4\u9012\u63a8\uff0c\u4ece\u540e\u5f80\u524d\u4ee5\u4fbf\u4e0d\u7834\u574f\u4e0a\u4e00\u5c42\u9012\u63a8\u6570\u636e\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8d0b3f46-e2d1-452e-a344-03501f303896')\"><img id=\"code_img_closed_8d0b3f46-e2d1-452e-a344-03501f303896\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8d0b3f46-e2d1-452e-a344-03501f303896\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8d0b3f46-e2d1-452e-a344-03501f303896',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8d0b3f46-e2d1-452e-a344-03501f303896\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; getRow(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> rowIndex) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; ans(rowIndex + <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 5</span>         ans[<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt;= rowIndex; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = i; j &gt;= <span style=\"color: #800080;\">0</span>; j --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 ans[j] = (i == <span style=\"color: #800080;\">0</span> || j == <span style=\"color: #800080;\">0</span> || j == i ? <span style=\"color: #800080;\">1</span> : ans[j] + ans[j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/pascals-triangle/\">Pascal's Triangle</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u9012\u63a8\u3002\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('27828737-c6cb-400a-9fdf-1b4b9b11e33a')\"><img id=\"code_img_closed_27828737-c6cb-400a-9fdf-1b4b9b11e33a\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_27828737-c6cb-400a-9fdf-1b4b9b11e33a\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('27828737-c6cb-400a-9fdf-1b4b9b11e33a',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_27828737-c6cb-400a-9fdf-1b4b9b11e33a\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; generate(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> numRows) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> v;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; numRows; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt;= i; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 tmp.push_back(i == <span style=\"color: #800080;\">0</span> || j == <span style=\"color: #800080;\">0</span> || j == i ? <span style=\"color: #800080;\">1</span> : v[i - <span style=\"color: #800080;\">1</span>][j] + v[i - <span style=\"color: #800080;\">1</span>][j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">            v.push_back(tmp);\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> v;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">16</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/\"><span style=\"color: #ff0000;\">Populating Next Right Pointers in Each Node II</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u9898\u76ee\u8981\u6c42\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u6240\u4ee5\u9012\u5f52\u3001\u961f\u5217\u7b49\u4f20\u7edf\u65b9\u6cd5\u4e0d\u5e94\u8be5\u7528\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u672c\u9898\u53ef\u4ee5\u5229\u7528\u751f\u6210\u7684next\u6307\u9488\u6765\u6a2a\u5411\u626b\u63cf\uff0c\u5373\u5f97\u5230\u4e00\u5c42\u7684next\u6307\u9488\u4e4b\u540e\uff0c\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u5c42\u7684next\u6307\u9488\u6765\u7ed9\u4e0b\u4e00\u5c42\u7684next\u6307\u9488\u8d4b\u503c\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('cb2bd15c-811b-4db0-a583-44fa7a862f10')\"><img id=\"code_img_closed_cb2bd15c-811b-4db0-a583-44fa7a862f10\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_cb2bd15c-811b-4db0-a583-44fa7a862f10\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('cb2bd15c-811b-4db0-a583-44fa7a862f10',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_cb2bd15c-811b-4db0-a583-44fa7a862f10\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree with next pointer.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeLinkNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *  int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *  TreeLinkNode *left, *right, *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     TreeLinkNode *findNext(TreeLinkNode *<span style=\"color: #000000;\">head)\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">while</span>(head != NULL &amp;&amp; head-&gt;left == NULL &amp;&amp; head-&gt;right ==<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">14</span>             head = head-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">void</span> connect(TreeLinkNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>         TreeLinkNode *head, *last, *<span style=\"color: #000000;\">nexhead;\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">for</span>(head = root; head != NULL; head =<span style=\"color: #000000;\"> nexhead)\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">22</span>             head =<span style=\"color: #000000;\"> findNext(head);\n</span><span style=\"color: #008080;\">23</span>             <span style=\"color: #0000ff;\">if</span>(head == NULL) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>             <span style=\"color: #0000ff;\">if</span>(head-&gt;left != NULL) nexhead = head-&gt;<span style=\"color: #000000;\">left;\n</span><span style=\"color: #008080;\">25</span>             <span style=\"color: #0000ff;\">else</span> nexhead = head-&gt;<span style=\"color: #000000;\">right;\n</span><span style=\"color: #008080;\">26</span>             <span style=\"color: #0000ff;\">for</span>(last = NULL; head != NULL; last = head, head = findNext(head-&gt;<span style=\"color: #000000;\">next))\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">28</span>                 <span style=\"color: #0000ff;\">if</span>(head-&gt;left != NULL &amp;&amp; head-&gt;right !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">29</span>                     head-&gt;left-&gt;next = head-&gt;<span style=\"color: #000000;\">right;\n</span><span style=\"color: #008080;\">30</span>                 <span style=\"color: #0000ff;\">if</span>(last == NULL) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">31</span>                 <span style=\"color: #0000ff;\">if</span>(last-&gt;right !=<span style=\"color: #000000;\"> NULL) \n</span><span style=\"color: #008080;\">32</span>                     last-&gt;right-&gt;next = head-&gt;left != NULL ? head-&gt;left : head-&gt;<span style=\"color: #000000;\">right;\n</span><span style=\"color: #008080;\">33</span>                 <span style=\"color: #0000ff;\">else</span> \n<span style=\"color: #008080;\">34</span>                     last-&gt;left-&gt;next = head-&gt;left != NULL ? head-&gt;left : head-&gt;<span style=\"color: #000000;\">right;\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">38</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/populating-next-right-pointers-in-each-node/\">Populating Next Right Pointers in Each Node</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u4e0d\u7528\u8003\u8651\u8fde\u7eed\u7684\u7a7a\u6307\u9488\uff0c\u5c31\u4e0d\u7528\u989d\u5916\u5b9e\u73b0\u627e\u4e0b\u4e00\u4e2a\u5b50\u6811\u975e\u7a7a\u8282\u70b9\uff0c\u6bd4Populating Next Right Pointers in Each Node II \u5bb9\u6613\u5904\u7406\u3002</span></span></span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('fcb4d476-a267-44bf-a175-8fa9ae80f25a')\"><img id=\"code_img_closed_fcb4d476-a267-44bf-a175-8fa9ae80f25a\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_fcb4d476-a267-44bf-a175-8fa9ae80f25a\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('fcb4d476-a267-44bf-a175-8fa9ae80f25a',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_fcb4d476-a267-44bf-a175-8fa9ae80f25a\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree with next pointer.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeLinkNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *  int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *  TreeLinkNode *left, *right, *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">void</span> connect(TreeLinkNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>         TreeLinkNode *head, *nexhead, *<span style=\"color: #000000;\">last;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">for</span>(head = root; head-&gt;left != NULL; head =<span style=\"color: #000000;\"> nexhead)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">16</span>             nexhead = head-&gt;<span style=\"color: #000000;\">left;\n</span><span style=\"color: #008080;\">17</span>             last =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">18</span>             <span style=\"color: #0000ff;\">while</span>(head !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">20</span>                 head-&gt;left-&gt;next = head-&gt;<span style=\"color: #000000;\">right;\n</span><span style=\"color: #008080;\">21</span>                 <span style=\"color: #0000ff;\">if</span>(last != NULL) last-&gt;right-&gt;next = head-&gt;<span style=\"color: #000000;\">left;\n</span><span style=\"color: #008080;\">22</span>                 last =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">23</span>                 head = head-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/distinct-subsequences/\">Distinct Subsequences</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5178\u578b\u52a8\u6001\u89c4\u5212\u3002dp[i][j] \u8868\u793a T \u7684\u524d j \u4e2a\u5b57\u7b26\u5728 S \u7684\u524d i \u4e2a\u5b57\u7b26\u4e2d\u7684\u89e3\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u5bf9\u4e8edp[i + 1][j + 1]\uff0c\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4e00\u3001 j + 1 \u5bf9\u5e94\u5230 S \u524d i \u4e2a\u5b57\u7b26\u4e2d\u7684\u89e3\uff0c\u5ffd\u7565 S \u7684\u7b2c i + 1 \u4e2a\u5b57\u7b26\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4e8c\u3001\u5224\u65ad S \u7684\u7b2c i + 1 \u4e2a\u5b57\u7b26\u662f\u5426\u548c T \u7684\u7b2c j + 1 \u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5219\u52a0\u4e0adp[i][j]\uff0c\u5426\u5219\u4e0d\u52a0\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b1ff7e0f-d25e-47b9-b9e2-c1942d808c49')\"><img id=\"code_img_closed_b1ff7e0f-d25e-47b9-b9e2-c1942d808c49\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b1ff7e0f-d25e-47b9-b9e2-c1942d808c49\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b1ff7e0f-d25e-47b9-b9e2-c1942d808c49',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b1ff7e0f-d25e-47b9-b9e2-c1942d808c49\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> numDistinct(<span style=\"color: #0000ff;\">string</span> S, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> T) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(S.length() &lt; T.length()) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; dp(S.length() + <span style=\"color: #800080;\">1</span>, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(T.length() + <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; S.length(); i ++) dp[i][<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         dp[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">1</span>] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; S.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; T.length(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">12</span>                 dp[i + <span style=\"color: #800080;\">1</span>][j + <span style=\"color: #800080;\">1</span>] = dp[i][j + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">if</span>(S[i] == T[j]) dp[i + <span style=\"color: #800080;\">1</span>][j + <span style=\"color: #800080;\">1</span>] +=<span style=\"color: #000000;\"> dp[i][j];\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> dp[S.length()][T.length()];\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/flatten-binary-tree-to-linked-list/\">Flatten Binary Tree to Linked List</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u9898\u610f\u662f\u4f18\u5148\u5de6\u5b50\u6811\u9760\u524d\uff0c\u4e14\u6392\u6210\u4e00\u5217\u7528\u53f3\u5b50\u6811\u6307\u9488\uff0c\u4e0d\u7ba1val\u7684\u5927\u5c0f\u5173\u7cfb\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u540e\u5e8f\u904d\u5386\u4e00\u904d\u5373\u53ef\uff0c\u9012\u5f52\u8fd4\u56de\u5b50\u6811\u4e2d\u5c3e\u8282\u70b9\u6307\u9488\uff0c\u6ce8\u610f\u5404\u79cd\u6761\u4ef6\u5224\u65ad\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('823b2d8a-abcf-49f1-884b-439b5cda1c71')\"><img id=\"code_img_closed_823b2d8a-abcf-49f1-884b-439b5cda1c71\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_823b2d8a-abcf-49f1-884b-439b5cda1c71\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('823b2d8a-abcf-49f1-884b-439b5cda1c71',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_823b2d8a-abcf-49f1-884b-439b5cda1c71\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     TreeNode *DFS(TreeNode *<span style=\"color: #000000;\">now)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left == NULL &amp;&amp; now-&gt;right == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> now;\n</span><span style=\"color: #008080;\">15</span>         TreeNode *leftok = NULL, *rightok =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left != NULL) leftok = DFS(now-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;right != NULL) rightok = DFS(now-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">if</span>(leftok !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">20</span>             leftok-&gt;right = now-&gt;<span style=\"color: #000000;\">right;\n</span><span style=\"color: #008080;\">21</span>             now-&gt;right = now-&gt;<span style=\"color: #000000;\">left;\n</span><span style=\"color: #008080;\">22</span>             now-&gt;left =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">23</span>             <span style=\"color: #0000ff;\">return</span> rightok ?<span style=\"color: #000000;\"> rightok : leftok;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> rightok;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span>     <span style=\"color: #0000ff;\">void</span> flatten(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">        DFS(root);\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">31</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/path-sum-ii/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Path Sum II</span></a></p>\n<p>&nbsp;\u4f20\u7edf\u9012\u5f52\uff0c\u628a\u8def\u5f84\u4e0a\u7684\u6570\u5b57\u63d2\u5165vector\uff0c\u7ec8\u70b9\u5224\u65ad\u662f\u5426\u63d2\u5165\u7b54\u6848\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('d0909301-439e-43cf-bfcf-54790b3f9cc5')\"><img id=\"code_img_closed_d0909301-439e-43cf-bfcf-54790b3f9cc5\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_d0909301-439e-43cf-bfcf-54790b3f9cc5\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('d0909301-439e-43cf-bfcf-54790b3f9cc5',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_d0909301-439e-43cf-bfcf-54790b3f9cc5\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> goal;\n</span><span style=\"color: #008080;\">13</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\">v;\n</span><span style=\"color: #008080;\">14</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> curv;\n</span><span style=\"color: #008080;\">15</span>     <span style=\"color: #0000ff;\">void</span> DFS(TreeNode *now, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cursum)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">17</span>         curv.push_back(now-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left == NULL &amp;&amp; now-&gt;right ==<span style=\"color: #000000;\"> NULL) \n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">20</span>             <span style=\"color: #0000ff;\">if</span>(cursum + now-&gt;val ==<span style=\"color: #000000;\"> goal)\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">                v.push_back(curv);\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">                curv.pop_back();\n</span><span style=\"color: #008080;\">24</span>                 <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left != NULL) DFS(now-&gt;left, cursum + now-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;right != NULL) DFS(now-&gt;right, cursum + now-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">        curv.pop_back();\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">31</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; pathSum(TreeNode *root, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> sum) {\n</span><span style=\"color: #008080;\">32</span>         goal =<span style=\"color: #000000;\"> sum;\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> v;\n</span><span style=\"color: #008080;\">34</span>         DFS(root, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">35</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> v;\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">37</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/path-sum/\">Path Sum</a></h3>\n<p>\u904d\u5386\u6811\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c48af99e-0a25-4e7e-bd52-71bf5a63d198')\"><img id=\"code_img_closed_c48af99e-0a25-4e7e-bd52-71bf5a63d198\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_c48af99e-0a25-4e7e-bd52-71bf5a63d198\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('c48af99e-0a25-4e7e-bd52-71bf5a63d198',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_c48af99e-0a25-4e7e-bd52-71bf5a63d198\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> goal;\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">bool</span> DFS(TreeNode *now, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cursum)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left == NULL &amp;&amp; now-&gt;right ==<span style=\"color: #000000;\"> NULL) \n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">return</span> cursum + now-&gt;val ==<span style=\"color: #000000;\"> goal;\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left != NULL &amp;&amp; DFS(now-&gt;left, cursum + now-&gt;val)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;right != NULL &amp;&amp; DFS(now-&gt;right, cursum + now-&gt;val)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">20</span>     <span style=\"color: #0000ff;\">bool</span> hasPathSum(TreeNode *root, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> sum) {\n</span><span style=\"color: #008080;\">21</span>         goal =<span style=\"color: #000000;\"> sum;\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">return</span> DFS(root, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">25</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/minimum-depth-of-binary-tree/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Minimum Depth of Binary Tree</span></a></p>\n<p>&nbsp;\u8fd8\u662f\u904d\u5386\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('20d4b20f-97cd-4656-baa5-999f0b61f569')\"><img id=\"code_img_closed_20d4b20f-97cd-4656-baa5-999f0b61f569\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_20d4b20f-97cd-4656-baa5-999f0b61f569\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('20d4b20f-97cd-4656-baa5-999f0b61f569',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_20d4b20f-97cd-4656-baa5-999f0b61f569\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span> minDepth(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(root-&gt;left == NULL) <span style=\"color: #0000ff;\">return</span> minDepth(root-&gt;right) + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(root-&gt;right == NULL) <span style=\"color: #0000ff;\">return</span> minDepth(root-&gt;left) + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">return</span> min(minDepth(root-&gt;left), minDepth(root-&gt;right)) + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/balanced-binary-tree/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Balanced Binary Tree</span></a></p>\n<p>\u904d\u5386\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b760a25e-d260-431c-ba80-aa88d59f9ea0')\"><img id=\"code_img_closed_b760a25e-d260-431c-ba80-aa88d59f9ea0\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b760a25e-d260-431c-ba80-aa88d59f9ea0\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b760a25e-d260-431c-ba80-aa88d59f9ea0',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b760a25e-d260-431c-ba80-aa88d59f9ea0\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span> maxDepth(TreeNode *<span style=\"color: #000000;\">now)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(now == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">int</span> l = maxDepth(now-&gt;left) + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">int</span> r = maxDepth(now-&gt;right) + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">return</span> abs(l - r) &gt; <span style=\"color: #800080;\">1</span> || l &lt; <span style=\"color: #800080;\">0</span> || r &lt; <span style=\"color: #800080;\">0</span> ? -<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\"> : max(l, r);\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">19</span>     <span style=\"color: #0000ff;\">bool</span> isBalanced(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">return</span> maxDepth(root) &gt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">22</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/convert-sorted-list-to-binary-search-tree/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Convert Sorted List to Binary Search Tree</span></a></p>\n<p>\u6bcf\u6b21\u627e\u4e2d\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u5c06\u4e24\u8fb9\u9012\u5f52\uff0c\u8fd4\u56de\u6839\u8282\u70b9\u6307\u9488\u4f5c\u4e3a\u5de6\u53f3\u8282\u70b9\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('099ace4d-a6cf-4cc2-bc94-2e287c7fcf23')\"><img id=\"code_img_closed_099ace4d-a6cf-4cc2-bc94-2e287c7fcf23\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_099ace4d-a6cf-4cc2-bc94-2e287c7fcf23\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('099ace4d-a6cf-4cc2-bc94-2e287c7fcf23',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_099ace4d-a6cf-4cc2-bc94-2e287c7fcf23\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\">17</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">18</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">20</span>     TreeNode *sortedListToBST(ListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">if</span>(head == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">22</span>         ListNode *p, *mid, *<span style=\"color: #000000;\">pre;\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">for</span>(p = mid = head, pre = NULL; p-&gt;next != NULL; mid = mid-&gt;<span style=\"color: #000000;\">next)\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">25</span>             p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">26</span>             <span style=\"color: #0000ff;\">if</span>(p-&gt;next == NULL) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span>             p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">28</span>             pre =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">        };\n</span><span style=\"color: #008080;\">30</span>         TreeNode *root = <span style=\"color: #0000ff;\">new</span> TreeNode(mid-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">31</span>         <span style=\"color: #0000ff;\">if</span>(pre != NULL) pre-&gt;next = NULL, root-&gt;left =<span style=\"color: #000000;\"> sortedListToBST(head);\n</span><span style=\"color: #008080;\">32</span>         <span style=\"color: #0000ff;\">else</span> root-&gt;left =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">33</span>         root-&gt;right = sortedListToBST(mid-&gt;<span style=\"color: #000000;\">next);\n</span><span style=\"color: #008080;\">34</span>         <span style=\"color: #0000ff;\">if</span>(pre != NULL) pre-&gt;next =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\">35</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> root;\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">37</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/convert-sorted-array-to-binary-search-tree/\">Convert Sorted Array to Binary Search Tree</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u9012\u5f52\u505a\uff0c\u6bd4\u94fe\u8868\u7684\u5bb9\u6613\u4e9b\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('ae52e6a4-c33a-4dc4-970a-718af77b795a')\"><img id=\"code_img_closed_ae52e6a4-c33a-4dc4-970a-718af77b795a\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_ae52e6a4-c33a-4dc4-970a-718af77b795a\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('ae52e6a4-c33a-4dc4-970a-718af77b795a',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_ae52e6a4-c33a-4dc4-970a-718af77b795a\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     TreeNode *convert(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;num, <span style=\"color: #0000ff;\">int</span> left, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> right)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(right == left) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">int</span> mid = right + left &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         TreeNode *root = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> TreeNode(num[mid]);\n</span><span style=\"color: #008080;\">17</span>         root-&gt;left =<span style=\"color: #000000;\"> convert(num, left, mid);\n</span><span style=\"color: #008080;\">18</span>         root-&gt;right = convert(num, mid + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, right);\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">20</span>     TreeNode *sortedArrayToBST(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">num) {\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span> convert(num, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, num.size());\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/\">Binary Tree Level Order Traversal II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5bbd\u641c\u548c\u6df1\u641c\u90fd\u53ef\u4ee5\uff0c\u627e\u5bf9\u5c42\u6570\u5c31\u884c\u4e86\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u672c\u4ee5\u4e3a\u8fd9\u9898\u4eae\u70b9\u662f\u5982\u4f55\u4e00\u904d\u5b9e\u73b0\u4ece\u5e95\u5411\u4e0a\u987a\u5e8f\u7684vector\uff0cAC\u4e4b\u540e\u4e0a\u7f51\u4e00\u67e5\u4e5f\u5168\u662f\u6700\u540e\u628avector\u7ffb\u8f6c\u7684\u3002\u3002\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('e1eb167d-ce41-4f7a-a159-c52378df1bf4')\"><img id=\"code_img_closed_e1eb167d-ce41-4f7a-a159-c52378df1bf4\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_e1eb167d-ce41-4f7a-a159-c52378df1bf4\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('e1eb167d-ce41-4f7a-a159-c52378df1bf4',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_e1eb167d-ce41-4f7a-a159-c52378df1bf4\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * }; \n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\">v;\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">void</span> DFS(TreeNode *now, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> depth)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(v.size() &lt;= depth) v.push_back(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">16</span>         v[depth].push_back(now-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left != NULL) DFS(now-&gt;left, depth + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;right != NULL) DFS(now-&gt;right, depth + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">20</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; levelOrderBottom(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> v;\n</span><span style=\"color: #008080;\">22</span>         DFS(root, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>, j = v.size() - <span style=\"color: #800080;\">1</span>; i &lt; j; i ++, j --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">            swap(v[i], v[j]);\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> v;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\">Construct Binary Tree from Inorder and Postorder Traversal</a></h3>\n<p>&nbsp;</p>\n<p>\u6570\u636e\u7ed3\u6784\u7ecf\u5178\u9898\u3002\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u5c3e\u662f\u6839\u8282\u70b9 Proot\uff0c\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u8fd9\u4e2a\u8282\u70b9 Iroot\uff0c\u5219 Iroot\u4e24\u8fb9\u5373\u4e3a\u5de6\u53f3\u5b50\u6811\u3002\u6839\u636e\u5de6\u53f3\u5b50\u6811\u8282\u70b9\u4e2a\u6570\uff0c\u5728\u540e\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u5de6\u53f3\u5b50\u6811\u5206\u754c\uff08\u5de6\u53f3\u5b50\u6811\u80af\u5b9a\u4e0d\u4ea4\u53c9\uff09\uff0c\u5219\u51e0\u4e2a\u5173\u952e\u5206\u754c\u70b9\u90fd\u627e\u5230\u4e86\uff0c\u5bf9\u5de6\u53f3\u5b50\u6811\u9012\u5f52\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('e3effaa9-3d32-4589-b78e-22712159f5d1')\"><img id=\"code_img_closed_e3effaa9-3d32-4589-b78e-22712159f5d1\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_e3effaa9-3d32-4589-b78e-22712159f5d1\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('e3effaa9-3d32-4589-b78e-22712159f5d1',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_e3effaa9-3d32-4589-b78e-22712159f5d1\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     TreeNode *build(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;inorder, <span style=\"color: #0000ff;\">int</span> ileft, <span style=\"color: #0000ff;\">int</span> iright, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;postorder, <span style=\"color: #0000ff;\">int</span> pleft, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pright)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(iright ==<span style=\"color: #000000;\"> ileft)\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> root;\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">for</span>(root = ileft; inorder[root] != postorder[pright - <span style=\"color: #800080;\">1</span>]; root ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">18</span>         TreeNode *node = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> TreeNode(inorder[root]);\n</span><span style=\"color: #008080;\">19</span>         node-&gt;left = build(inorder, ileft, root, postorder, pleft, pleft + root -<span style=\"color: #000000;\"> ileft);\n</span><span style=\"color: #008080;\">20</span>         node-&gt;right = build(inorder, root + <span style=\"color: #800080;\">1</span>, iright, postorder, pleft + root - ileft, pright - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> node;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span>     TreeNode *buildTree(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;inorder, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">postorder) {\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">return</span> build(inorder, <span style=\"color: #800080;\">0</span>, inorder.size(), postorder, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, postorder.size());\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">26</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\">Construct Binary Tree from Preorder and Inorder Traversal</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u548c\u4e0a\u4e00\u9898Construct Binary Tree from Inorder and Postorder Traversal\u65b9\u6cd5\u4e00\u6837\uff0c\u524d\u5e8f\u548c\u540e\u5e8f\u7684\u4fe1\u606f\u4f5c\u7528\u76f8\u540c\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('626ff0d0-125a-4692-824f-aaeca6902274')\"><img id=\"code_img_closed_626ff0d0-125a-4692-824f-aaeca6902274\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_626ff0d0-125a-4692-824f-aaeca6902274\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('626ff0d0-125a-4692-824f-aaeca6902274',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_626ff0d0-125a-4692-824f-aaeca6902274\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     TreeNode *build(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;inorder, <span style=\"color: #0000ff;\">int</span> ileft, <span style=\"color: #0000ff;\">int</span> iright, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;preorder, <span style=\"color: #0000ff;\">int</span> pleft, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pright)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(iright ==<span style=\"color: #000000;\"> ileft)\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> root;\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">for</span>(root = ileft; inorder[root] != preorder[pleft]; root ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">18</span>         TreeNode *node = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> TreeNode(inorder[root]);\n</span><span style=\"color: #008080;\">19</span>         node-&gt;left = build(inorder, ileft, root, preorder, pleft + <span style=\"color: #800080;\">1</span>, pleft + root -<span style=\"color: #000000;\"> ileft);\n</span><span style=\"color: #008080;\">20</span>         node-&gt;right = build(inorder, root + <span style=\"color: #800080;\">1</span>, iright, preorder, pleft + root - ileft + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, pright);\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> node;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span>     TreeNode *buildTree(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;preorder, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">inorder) {\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">return</span> build(inorder, <span style=\"color: #800080;\">0</span>, inorder.size(), preorder, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, preorder.size());\n</span><span style=\"color: #008080;\">25</span>         \n<span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/maximum-depth-of-binary-tree/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Maximum Depth of Binary Tree</span></a></p>\n<p>&nbsp;\u904d\u5386\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('5911e076-e383-4d3d-b34b-16303e281e4d')\"><img id=\"code_img_closed_5911e076-e383-4d3d-b34b-16303e281e4d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_5911e076-e383-4d3d-b34b-16303e281e4d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('5911e076-e383-4d3d-b34b-16303e281e4d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_5911e076-e383-4d3d-b34b-16303e281e4d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span> maxDepth(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(root-&gt;left == NULL) <span style=\"color: #0000ff;\">return</span> maxDepth(root-&gt;right) + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(root-&gt;right == NULL) <span style=\"color: #0000ff;\">return</span> maxDepth(root-&gt;left) + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span> max(maxDepth(root-&gt;left), maxDepth(root-&gt;right)) + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\">Binary Tree Zigzag Level Order Traversal</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;BFS\uff0c\u5947\u5076\u5c42\u8f6e\u6d41\u8d70\uff0c\u4e00\u5c42\u5de6\u5230\u53f3\uff0c\u4e00\u5c42\u53f3\u5230\u5de6\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('16f1d83c-249c-4524-851e-c87801780971')\"><img id=\"code_img_closed_16f1d83c-249c-4524-851e-c87801780971\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_16f1d83c-249c-4524-851e-c87801780971\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('16f1d83c-249c-4524-851e-c87801780971',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_16f1d83c-249c-4524-851e-c87801780971\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">13</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; zigzagLevelOrder(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">15</span>         vector&lt;TreeNode*&gt;<span style=\"color: #000000;\"> q1, q2;\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        q1.push_back(root);\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">int</span> depth = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">while</span>(!q1.empty() || !<span style=\"color: #000000;\">q2.empty())\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">20</span>             ans.push_back(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = q1.size() - <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">23</span>                 ans[depth].push_back(q1[i]-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">24</span>                 <span style=\"color: #0000ff;\">if</span>(q1[i]-&gt;left != NULL) q2.push_back(q1[i]-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">25</span>                 <span style=\"color: #0000ff;\">if</span>(q1[i]-&gt;right != NULL) q2.push_back(q1[i]-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">27</span>             depth ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            q1.clear();\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">if</span>(q2.empty()) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">30</span>             ans.push_back(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">31</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = q2.size() - <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">33</span>                 ans[depth].push_back(q2[i]-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">34</span>                 <span style=\"color: #0000ff;\">if</span>(q2[i]-&gt;right != NULL) q1.push_back(q2[i]-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">35</span>                 <span style=\"color: #0000ff;\">if</span>(q2[i]-&gt;left != NULL) q1.push_back(q2[i]-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">            q2.clear();\n</span><span style=\"color: #008080;\">38</span>             depth ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">40</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">42</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/binary-tree-level-order-traversal/\">Binary Tree Level Order Traversal</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u61d2\u7701\u4e8b\u76f4\u63a5\u5728\u4e0a\u4e00\u9898Binary Tree Zigzag Level Order Traversal\u7684\u4ee3\u7801\u4e0a\u6539\u4e86\u4e00\u4e0b\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u53ea\u7528\u4e00\u4e2a\u961f\u5217\u7684\u8bdd\uff0c\u589e\u52a0\u4e2a\u5c42\u6570\u4fe1\u606f\u5b58\u961f\u5217\u91cc\u5373\u53ef\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('e79fa7bb-9f97-4697-b6ef-91029064aef0')\"><img id=\"code_img_closed_e79fa7bb-9f97-4697-b6ef-91029064aef0\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_e79fa7bb-9f97-4697-b6ef-91029064aef0\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('e79fa7bb-9f97-4697-b6ef-91029064aef0',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_e79fa7bb-9f97-4697-b6ef-91029064aef0\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">13</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; levelOrder(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">14</span>  <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">15</span>         vector&lt;TreeNode*&gt;<span style=\"color: #000000;\"> q1, q2;\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        q1.push_back(root);\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">int</span> depth = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">while</span>(!q1.empty() || !<span style=\"color: #000000;\">q2.empty())\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">20</span>             ans.push_back(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; q1.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">23</span>                 ans[depth].push_back(q1[i]-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">24</span>                 <span style=\"color: #0000ff;\">if</span>(q1[i]-&gt;left != NULL) q2.push_back(q1[i]-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">25</span>                 <span style=\"color: #0000ff;\">if</span>(q1[i]-&gt;right != NULL) q2.push_back(q1[i]-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">27</span>             depth ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            q1.clear();\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">if</span>(q2.empty()) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">30</span>             ans.push_back(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">31</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; q2.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">33</span>                 ans[depth].push_back(q2[i]-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">34</span>                 <span style=\"color: #0000ff;\">if</span>(q2[i]-&gt;left != NULL) q1.push_back(q2[i]-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">35</span>                 <span style=\"color: #0000ff;\">if</span>(q2[i]-&gt;right != NULL) q1.push_back(q2[i]-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">            q2.clear();\n</span><span style=\"color: #008080;\">38</span>             depth ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">40</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">42</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/symmetric-tree/\"><span style=\"color: #ff0000;\">Symmetric Tree</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u9012\u5f52\uff1a\u5de6\u6307\u9488\u548c\u53f3\u6307\u9488\uff0c\u5bf9\u79f0\u9012\u5f52\uff0c\u5373&ldquo;\u5de6\u7684\u5de6&rdquo;\u548c&ldquo;\u53f3\u7684\u53f3&rdquo;\u5bf9\u5e94\uff0c&ldquo;\u5de6\u7684\u53f3&rdquo;\u548c&ldquo;\u53f3\u7684\u5de6&rdquo;\u5bf9\u5e94\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('4913df53-4c7e-4d3c-8fb8-4b43908805e6')\"><img id=\"code_img_closed_4913df53-4c7e-4d3c-8fb8-4b43908805e6\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_4913df53-4c7e-4d3c-8fb8-4b43908805e6\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('4913df53-4c7e-4d3c-8fb8-4b43908805e6',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_4913df53-4c7e-4d3c-8fb8-4b43908805e6\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">bool</span> judge(TreeNode *l, TreeNode *<span style=\"color: #000000;\">r)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(l-&gt;val != r-&gt;val) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(l-&gt;left != r-&gt;right &amp;&amp; (l-&gt;left == NULL || r-&gt;right ==<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">16</span>         || l-&gt;right != r-&gt;left &amp;&amp; (l-&gt;right == NULL || r-&gt;left ==<span style=\"color: #000000;\"> NULL))\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">if</span>(l-&gt;left != NULL &amp;&amp; !judge(l-&gt;left, r-&gt;right)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">if</span>(l-&gt;right != NULL &amp;&amp; !judge(l-&gt;right, r-&gt;left)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">bool</span> isSymmetric(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">if</span>(root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(root-&gt;left != NULL &amp;&amp; root-&gt;right ==<span style=\"color: #000000;\"> NULL\n</span><span style=\"color: #008080;\">26</span>             || root-&gt;left == NULL &amp;&amp; root-&gt;right != NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">return</span> judge(root-&gt;left, root-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">29</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u975e\u9012\u5f52\uff1a\u5de6\u53f3\u5b50\u6811\u5206\u522b\u505a\u4e00\u4e2a\u961f\u5217\uff0c\u540c\u6b65\u904d\u5386\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('27e30296-136d-441d-b148-2bddfa937acf')\"><img id=\"code_img_closed_27e30296-136d-441d-b148-2bddfa937acf\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_27e30296-136d-441d-b148-2bddfa937acf\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('27e30296-136d-441d-b148-2bddfa937acf',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_27e30296-136d-441d-b148-2bddfa937acf\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">bool</span> isSymmetric(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(root-&gt;left != NULL &amp;&amp; root-&gt;right ==<span style=\"color: #000000;\"> NULL\n</span><span style=\"color: #008080;\">16</span>             || root-&gt;left == NULL &amp;&amp; root-&gt;right != NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>         queue&lt;TreeNode *&gt;<span style=\"color: #000000;\"> q1, q2;\n</span><span style=\"color: #008080;\">18</span>         q1.push(root-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">19</span>         q2.push(root-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">q1.empty())\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">22</span>             TreeNode *now1 = q1.front(), *now2 =<span style=\"color: #000000;\"> q2.front();\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">            q1.pop();\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">            q2.pop();\n</span><span style=\"color: #008080;\">25</span>             <span style=\"color: #0000ff;\">if</span>(now1-&gt;val != now2-&gt;val) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">26</span>             <span style=\"color: #0000ff;\">if</span>(now1-&gt;left != NULL || now2-&gt;right !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">28</span>                 <span style=\"color: #0000ff;\">if</span>(now1-&gt;left == NULL || now2-&gt;right == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">29</span>                 q1.push(now1-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">30</span>                 q2.push(now2-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">32</span>             <span style=\"color: #0000ff;\">if</span>(now1-&gt;right != NULL || now2-&gt;left !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">34</span>                 <span style=\"color: #0000ff;\">if</span>(now1-&gt;right == NULL || now2-&gt;left == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">35</span>                 q1.push(now1-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">36</span>                 q2.push(now2-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">39</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">40</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">41</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/same-tree/\">Same Tree</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u540c\u6b65\u904d\u5386\uff0c\u6bd4\u8f83\u5224\u65ad\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('0092e005-9e4b-4006-a4f4-d943d3588f24')\"><img id=\"code_img_closed_0092e005-9e4b-4006-a4f4-d943d3588f24\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_0092e005-9e4b-4006-a4f4-d943d3588f24\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('0092e005-9e4b-4006-a4f4-d943d3588f24',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_0092e005-9e4b-4006-a4f4-d943d3588f24\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">bool</span> isSameTree(TreeNode *p, TreeNode *<span style=\"color: #000000;\">q) {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">if</span>(p == NULL &amp;&amp; q == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(p != q &amp;&amp; (p == NULL || q == NULL) || p-&gt;val != q-&gt;val) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">return</span> isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">17</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/recover-binary-search-tree/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Recover Binary Search Tree</span></a></p>\n<p>&nbsp;\u4e2d\u5e8f\u904d\u5386\u662f\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u987a\u5e8f\u904d\u5386\uff0c*a, *b\u8868\u793a\u524d\u9a71\u8282\u70b9\u548c\u5f53\u524d\u8282\u70b9\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u5bf9\u6570\u503c\u7ffb\u8f6c\u4e86\uff0c\u6240\u4ee5\u80af\u5b9a\u4f1a\u9047\u5230\u524d\u9a71\u8282\u70b9val\u6bd4\u5f53\u524d\u8282\u70b9val\u5927\u7684\u60c5\u51b5\u4e00\u6b21\u6216\u4e24\u6b21\uff0c\u9047\u5230\u4e00\u6b21\u8868\u793a\u7ffb\u8f6c\u7684\u662f\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9\u3002*ans1\u548c*ans2\u6307\u5411\u4e24\u4e2a\u88ab\u7ffb\u8f6c\u7684\u8282\u70b9\uff0c\u5f53\u9047\u5230\u524d\u9a71val\u6bd4\u5f53\u524dval\u5927\u7684\u60c5\u51b5\u65f6\u5019\uff0c\u6839\u636e\u7b2c\u4e00\u6b21\u8fd8\u662f\u7b2c\u4e8c\u6b21\u7ed9ans1\u548cans2\u8d4b\u503c\uff0c\u6700\u7ec8\u7ffb\u8f6c\u56de\u6765\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('ae666291-3b11-4066-80e9-31934b598732')\"><img id=\"code_img_closed_ae666291-3b11-4066-80e9-31934b598732\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_ae666291-3b11-4066-80e9-31934b598732\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('ae666291-3b11-4066-80e9-31934b598732',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_ae666291-3b11-4066-80e9-31934b598732\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     TreeNode *a, *<span style=\"color: #000000;\">b;\n</span><span style=\"color: #008080;\">13</span>     TreeNode *ans1, *<span style=\"color: #000000;\">ans2;\n</span><span style=\"color: #008080;\">14</span>     <span style=\"color: #0000ff;\">bool</span> DFS(TreeNode *<span style=\"color: #000000;\">now)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;left !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">17</span>             DFS(now-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">18</span>         a =<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\">19</span>         b =<span style=\"color: #000000;\"> now;\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">if</span>(a != NULL &amp;&amp; a-&gt;val &gt; b-&gt;<span style=\"color: #000000;\">val)\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">if</span>(ans1 == NULL) ans1 =<span style=\"color: #000000;\"> a;\n</span><span style=\"color: #008080;\">23</span>             ans2 =<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">if</span>(now-&gt;right !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">26</span>             DFS(now-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">28</span>     <span style=\"color: #0000ff;\">void</span> recoverTree(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">29</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">30</span>         a = b = ans1 = ans2 =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">        DFS(root);\n</span><span style=\"color: #008080;\">32</span>         swap(ans1-&gt;val, ans2-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">34</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/validate-binary-search-tree/\">Validate Binary Search Tree</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u4e2d\u5e8f\u904d\u5386\uff0c\u66f4\u65b0\u524d\u9a71\u8282\u70b9\uff0c\u4e0e\u5f53\u524d\u8282\u70b9\u6bd4\u8f83\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('f622ce3c-1043-4eb4-8f64-4b42e01de6c7')\"><img id=\"code_img_closed_f622ce3c-1043-4eb4-8f64-4b42e01de6c7\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_f622ce3c-1043-4eb4-8f64-4b42e01de6c7\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('f622ce3c-1043-4eb4-8f64-4b42e01de6c7',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_f622ce3c-1043-4eb4-8f64-4b42e01de6c7\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     TreeNode *pre =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">bool</span> isValidBST(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(root == NULL) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(root-&gt;left != NULL &amp;&amp; !isValidBST(root-&gt;left)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">if</span>(pre != NULL &amp;&amp; pre-&gt;val &gt;= root-&gt;val) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>         pre =<span style=\"color: #000000;\"> root;\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">if</span>(root-&gt;right != NULL &amp;&amp; !isValidBST(root-&gt;right)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">21</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/interleaving-string/\">Interleaving String</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u52a8\u6001\u89c4\u5212\u3002\u5982\u679c\u7ed3\u679c\u662ftrue\uff0c\u5219\u4efb\u610f i, j\uff0cs1 i \u4e4b\u524d\u7684\u5b57\u7b26 \u548c s2 j \u4e4b\u524d\u7684\u5b57\u7b26\uff0c\u90fd\u80fd\u591f\u4ea4\u53c9\u4e3a s3 i + j \u4e4b\u524d\u7684\u5b57\u7b26\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u7531\u6b64\uff0c\u5f53dp[i][j]\u65f6\uff0c\u5982\u679cs1[i]==s3[i+j]\uff0c\u5219\u5c1d\u8bd5s1[i]\u4e0es3[i+j]\u5bf9\u5e94\uff0c\u5982\u679cdp[i-1][j]\u662ftrue\uff0c\u5219dp[i][j]\u4e5f\u4e3atrue\u3002\u5982\u679cs2[j]==s3[i+j]\u5219\u540c\u6837\u5904\u7406\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u76f4\u5230\u6700\u540e\uff0c\u5224\u65addp[s1.length()-1][s2.length()-1]\u662f\u5426\u4e3atrue\u3002\u4e3a\u65b9\u4fbf\u521d\u59cb\u5316\uff0c\u5750\u6807\u540e\u79fb\u4e86\u4e00\u4f4d\u3002</span></span></p>\n<p>\u9898\u76ee\u4e0d\u539a\u9053\u7684\u51fa\u4e86s1.length()+s2.length() != s3.length()\u7684\u6570\u636e\uff0c\u7279\u5224\u4e00\u4e0b\u3002</p>\n<p>\u770b\u5230\u7f51\u4e0a\u4e5f\u90fd\u662fO(n^2)\u7684\u89e3\u6cd5\uff0c\u6211\u4e5f\u5c31\u653e\u5fc3\u4e86\u3002\u3002\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('ced28d3b-50a2-418e-9ed4-2e01edf9132a')\"><img id=\"code_img_closed_ced28d3b-50a2-418e-9ed4-2e01edf9132a\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_ced28d3b-50a2-418e-9ed4-2e01edf9132a\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('ced28d3b-50a2-418e-9ed4-2e01edf9132a',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_ced28d3b-50a2-418e-9ed4-2e01edf9132a\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> isInterleave(<span style=\"color: #0000ff;\">string</span> s1, <span style=\"color: #0000ff;\">string</span> s2, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s3) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(s1.length() + s2.length() != s3.length()) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         vector&lt;vector&lt;<span style=\"color: #0000ff;\">bool</span>&gt; &gt; dp(s1.length() + <span style=\"color: #800080;\">1</span>, vector&lt;<span style=\"color: #0000ff;\">bool</span>&gt;(s2.length() + <span style=\"color: #800080;\">1</span>, <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt;= s1.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt;= s2.length(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 9</span>                 <span style=\"color: #0000ff;\">if</span>(!i &amp;&amp; !j) dp[i][j] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>                 dp[i][j] = dp[i][j] || i &gt; <span style=\"color: #800080;\">0</span> &amp;&amp; s3[i + j - <span style=\"color: #800080;\">1</span>] == s1[i - <span style=\"color: #800080;\">1</span>] &amp;&amp; dp[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][j];\n</span><span style=\"color: #008080;\">11</span>                 dp[i][j] = dp[i][j] || j &gt; <span style=\"color: #800080;\">0</span> &amp;&amp; s3[i + j - <span style=\"color: #800080;\">1</span>] == s2[j - <span style=\"color: #800080;\">1</span>] &amp;&amp; dp[i][j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> dp[s1.length()][s2.length()];\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/unique-binary-search-trees-ii/\"><span style=\"color: #ff0000;\">Unique Binary Search Trees II</span></a></span></h3>\n<p>LeetCode\u76ee\u524d\u4e3a\u6b62\u611f\u89c9\u6700\u66b4\u529b\u7684\u3002\u9012\u5f52\u904d\u5386\u6240\u6709\u60c5\u51b5\uff0c\u6bcf\u6b21\u8fd4\u56de\u5b50\u95ee\u9898\uff08\u5de6\u53f3\u5b50\u6811\uff09\u7684vector&lt;TreeNode *&gt;\u7684\u89e3\uff0c\u4e24\u5c42\u5faa\u73af\u7ec4\u5408\u8fd9\u4e9b\u89e3\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('84a68c7a-24f8-4fae-a29a-6fe136f73256')\"><img id=\"code_img_closed_84a68c7a-24f8-4fae-a29a-6fe136f73256\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_84a68c7a-24f8-4fae-a29a-6fe136f73256\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('84a68c7a-24f8-4fae-a29a-6fe136f73256',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_84a68c7a-24f8-4fae-a29a-6fe136f73256\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     vector&lt;TreeNode *&gt; generate(<span style=\"color: #0000ff;\">int</span> start, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> end)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">14</span>         vector&lt;TreeNode *&gt;<span style=\"color: #000000;\">res;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(start &gt;<span style=\"color: #000000;\"> end)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">17</span>             TreeNode *tmp =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">            res.push_back(tmp);\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = start; i &lt;= end; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">23</span>             vector&lt;TreeNode *&gt; l = generate(start, i - <span style=\"color: #800080;\">1</span>), r = generate(i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, end);\n</span><span style=\"color: #008080;\">24</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; l.size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">25</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> k = <span style=\"color: #800080;\">0</span>; k &lt; r.size(); k ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">27</span>                     TreeNode *tmp = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> TreeNode(i);\n</span><span style=\"color: #008080;\">28</span>                     tmp-&gt;left =<span style=\"color: #000000;\"> l[j];\n</span><span style=\"color: #008080;\">29</span>                     tmp-&gt;right =<span style=\"color: #000000;\"> r[k];\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">                    res.push_back(tmp);\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">35</span>     vector&lt;TreeNode *&gt; generateTrees(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">36</span>         <span style=\"color: #0000ff;\">return</span> generate(<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, n);\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">38</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/unique-binary-search-trees/\">Unique Binary Search Trees</a></h3>\n<p>&nbsp;\u7ecf\u5178\u95ee\u9898\uff0c\u5361\u7279\u5170\u6570\uff0c\u53ef\u9012\u63a8\uff0c\u53ef\u7528\u516c\u5f0f\uff08\u516c\u5f0f\u7528\u7ec4\u5408\u6570\uff0c\u4e5f\u8981\u5199\u5faa\u73af\uff09\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8001f961-931b-4f14-ac40-a33d08ebfef7')\"><img id=\"code_img_closed_8001f961-931b-4f14-ac40-a33d08ebfef7\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8001f961-931b-4f14-ac40-a33d08ebfef7\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8001f961-931b-4f14-ac40-a33d08ebfef7',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8001f961-931b-4f14-ac40-a33d08ebfef7\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> COM(<span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> m)\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 5</span>         m = n - m &lt; m ? n -<span style=\"color: #000000;\"> m : m;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> res, i, j;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(i = n, res = j = <span style=\"color: #800080;\">1</span>; i &gt; n - m; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             res *=<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">for</span>(; j &lt;= m &amp;&amp; res % j == <span style=\"color: #800080;\">0</span>; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span>                 res /=<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span>     <span style=\"color: #0000ff;\">int</span> numTrees(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span> COM(n &lt;&lt; <span style=\"color: #800080;\">1</span>, n) / (n + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">17</span> \n<span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">19</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/binary-tree-inorder-traversal/\">Binary Tree Inorder Traversal</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u6570\u636e\u7ed3\u6784\u57fa\u7840</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('766064b9-25df-48d0-a727-b9c0d1a19c98')\"><img id=\"code_img_closed_766064b9-25df-48d0-a727-b9c0d1a19c98\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_766064b9-25df-48d0-a727-b9c0d1a19c98\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('766064b9-25df-48d0-a727-b9c0d1a19c98',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_766064b9-25df-48d0-a727-b9c0d1a19c98\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for binary tree\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct TreeNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     TreeNode *left;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     TreeNode *right;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">void</span> inorder(TreeNode *<span style=\"color: #000000;\">now)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">if</span>(now == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         inorder(now-&gt;<span style=\"color: #000000;\">left);\n</span><span style=\"color: #008080;\">17</span>         res.push_back(now-&gt;<span style=\"color: #000000;\">val);\n</span><span style=\"color: #008080;\">18</span>         inorder(now-&gt;<span style=\"color: #000000;\">right);\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">20</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; inorderTraversal(TreeNode *<span style=\"color: #000000;\">root) {\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        inorder(root);\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/restore-ip-addresses/\">Restore IP Addresses</a></h3>\n<p>\u56db\u5c42\u9012\u5f52\u679a\u4e3e\u5206\u5272\u4f4d\u7f6e\uff0c\u5224\u65ad\u6570\u5b57\u8303\u56f4\u548c\u524d\u5bfc\u96f6\uff0c\u5904\u7406\u5b57\u7b26\u4e32\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('e11c8c65-daa7-450f-b168-03ec6a1b486e')\"><img id=\"code_img_closed_e11c8c65-daa7-450f-b168-03ec6a1b486e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_e11c8c65-daa7-450f-b168-03ec6a1b486e\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('e11c8c65-daa7-450f-b168-03ec6a1b486e',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_e11c8c65-daa7-450f-b168-03ec6a1b486e\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">string</span> s, <span style=\"color: #0000ff;\">int</span> last, <span style=\"color: #0000ff;\">int</span> cur, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> now)\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">if</span>(cur == <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(last == s.length()) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">string</span> tmp = s.substr(last, s.length() -<span style=\"color: #000000;\"> last);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(atoi(tmp.c_str()) &lt;= <span style=\"color: #800080;\">255</span> &amp;&amp; (tmp.length() == <span style=\"color: #800080;\">1</span> || tmp[<span style=\"color: #800080;\">0</span>] != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\">11</span>                 res.push_back(now +<span style=\"color: #000000;\"> tmp);\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> lin;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = last; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">string</span> tmp = s.substr(last, i - last + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">18</span>             <span style=\"color: #0000ff;\">if</span>(atoi(tmp.c_str()) &lt;= <span style=\"color: #800080;\">255</span> &amp;&amp; (tmp.length() == <span style=\"color: #800080;\">1</span> || tmp[<span style=\"color: #800080;\">0</span>] != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\">19</span>                 DFS(s, i + <span style=\"color: #800080;\">1</span>, cur + <span style=\"color: #800080;\">1</span>, now + tmp + <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">22</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; restoreIpAddresses(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\">23</span>         DFS(s, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">26</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/reverse-linked-list-ii/\"><span style=\"color: #ff0000;\">Reverse Linked List II</span></a></span></h3>\n<p>&nbsp;\u5728\u8868\u5934\u6dfb\u52a0\u4e00\u4e2a&ldquo;\u54e8\u5175&rdquo;\u4f1a\u597d\u5199\u5f88\u591a\uff0c\u989d\u5916\u7684newhead\u53ef\u4ee5\u5e2e\u52a9\u6807\u8bb0\u7ffb\u8f6c\u4e4b\u540e\u66f4\u6362\u4e86\u7684\u5934\u6307\u9488\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('9684a9a3-015d-43be-a074-cce7195ea054')\"><img id=\"code_img_closed_9684a9a3-015d-43be-a074-cce7195ea054\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_9684a9a3-015d-43be-a074-cce7195ea054\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('9684a9a3-015d-43be-a074-cce7195ea054',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_9684a9a3-015d-43be-a074-cce7195ea054\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *reverseBetween(ListNode *head, <span style=\"color: #0000ff;\">int</span> m, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">12</span>         ListNode *newhead = <span style=\"color: #0000ff;\">new</span> ListNode(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">13</span>         newhead-&gt;next =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">14</span>         ListNode *pre = newhead, *p = head, *start =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">15</span>         ListNode *<span style=\"color: #000000;\">tmp;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; p != NULL; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">18</span>             tmp = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">if</span>(i ==<span style=\"color: #000000;\"> m)\n</span><span style=\"color: #008080;\">20</span>                 start =<span style=\"color: #000000;\"> pre;\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">if</span>(i &gt; m &amp;&amp; i &lt;=<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">22</span>                 p-&gt;next =<span style=\"color: #000000;\"> pre;\n</span><span style=\"color: #008080;\">23</span>             <span style=\"color: #0000ff;\">if</span>(i ==<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">25</span>                 start-&gt;next-&gt;next =<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">26</span>                 start-&gt;next =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">28</span>             pre =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">29</span>             p =<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">31</span>         tmp = newhead-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">        free(newhead);\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">35</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/subsets-ii/\">Subsets II</a></h3>\n<p>\u7edf\u8ba1\u5730\u5b58map\u91cc\uff0cmap[i]= j \u8868\u793a S \u4e2d\u6709 j \u4e2a i\u3002map\u662f\u6709\u5e8f\u7684\uff0c\u7528\u8fed\u4ee3\u5668\u9012\u5f52\u679a\u4e3e\u653e\u5165\u96c6\u5408\u7684\u4e2a\u6570\u3002</p>\n<p>\u4e5f\u53ef\u4ee5\u5148\u6392\u5e8f\uff0c\u7528set\u6807\u8bb0\u6bcf\u4e2a\u6570\u65f6\u5019\u88ab\u653e\u5165\u8fc7\uff0c\u7b2c\u4e00\u6b21\u653e\u5165\u4e4b\u540e\u624d\u53ef\u4ee5\u7ee7\u7eed\u653e\u540c\u4e00\u4e2a\u6570\u3002</p>\n<p>\u4ee3\u7801\u662f\u7528map\u7684\u65b9\u6cd5\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('0cffbda6-f461-413b-95e7-36b7fba5210a')\"><img id=\"code_img_closed_0cffbda6-f461-413b-95e7-36b7fba5210a\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_0cffbda6-f461-413b-95e7-36b7fba5210a\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('0cffbda6-f461-413b-95e7-36b7fba5210a',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_0cffbda6-f461-413b-95e7-36b7fba5210a\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> now;\n</span><span style=\"color: #008080;\"> 5</span>     map&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> mp;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">void</span> DFS(map&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\">::iterator i)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">if</span>(i ==<span style=\"color: #000000;\"> mp.end())\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            res.push_back(now);\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         map&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span>&gt;::iterator tmp =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">14</span>         i ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        DFS(i);\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; tmp-&gt;second; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">18</span>             now.push_back(tmp-&gt;<span style=\"color: #000000;\">first);\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            DFS(i);\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; tmp-&gt;second; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            now.pop_back();\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; subsetsWithDup(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">S) {\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; S.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">26</span>             !mp.count(S[i]) ? (mp[S[i]] = <span style=\"color: #800080;\">1</span>) : mp[S[i]] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        DFS(mp.begin());\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">30</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/decode-ways/\">Decode Ways</a></h3>\n<p>\u9012\u63a8\uff1adp[i]\u8868\u793a\u524d i \u4e2a\u6570\u5b57\u7684\u89e3\u7801\u79cd\u6570\u3002</p>\n<p>dp[i]&nbsp; = if(\u4e00)dp[i-1] + if(\u4e8c)dp[i-2]</p>\n<p>\u5f53 i \u4f4d\u7f6e\u4e0d\u4e3a0\uff0c\u53ef\u52a0\u4e0a i - 1 \u4f4d\u7f6e\u7684\u89e3\u3002\u5f53\u5f53\u524d\u4f4d\u7f6e\u548c\u524d\u4e00\u4f4d\u7f6e\u7ec4\u6210\u7684\u4e24\u4f4d\u6570\u6ee1\u8db3\u89e3\u7801\u4e14\u9ad8\u4f4d\u4e0d\u4e3a0\uff0c\u53ef\u52a0\u4e0a i - 2 \u4f4d\u7f6e\u7684\u89e3\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('196d1ba7-bcc0-4991-bff2-884d4cd2c3cf')\"><img id=\"code_img_closed_196d1ba7-bcc0-4991-bff2-884d4cd2c3cf\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_196d1ba7-bcc0-4991-bff2-884d4cd2c3cf\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('196d1ba7-bcc0-4991-bff2-884d4cd2c3cf',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_196d1ba7-bcc0-4991-bff2-884d4cd2c3cf\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> numDecodings(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(s.length() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; dp(s.length() + <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 6</span>         dp[<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             dp[i + <span style=\"color: #800080;\">1</span>] = (s[i] != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span> ? dp[i] : <span style=\"color: #800080;\">0</span>) +\n<span style=\"color: #008080;\">10</span>                 (i &gt; <span style=\"color: #800080;\">0</span> &amp;&amp; s[i - <span style=\"color: #800080;\">1</span>] != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span> &amp;&amp; atoi(s.substr(i - <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">2</span>).c_str()) &lt;= <span style=\"color: #800080;\">26</span> ? dp[i - <span style=\"color: #800080;\">1</span>] : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> dp[s.length()];\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">14</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/gray-code/\"><span style=\"color: #ff0000;\">Gray Code</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u683c\u96f7\u7801\u6709\u591a\u79cd\u751f\u6210\u65b9\u6cd5\uff0c\u53ef\u53c2\u8003<a href=\"http://zh.wikipedia.org/wiki/%E6%A0%BC%E9%9B%B7%E7%A0%81\">\u7ef4\u57fa\u767e\u79d1</a>\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('008b99dc-d696-48be-84fe-7853bf6d85e9')\"><img id=\"code_img_closed_008b99dc-d696-48be-84fe-7853bf6d85e9\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_008b99dc-d696-48be-84fe-7853bf6d85e9\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('008b99dc-d696-48be-84fe-7853bf6d85e9',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_008b99dc-d696-48be-84fe-7853bf6d85e9\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; grayCode(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">4</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; (<span style=\"color: #800080;\">1</span> &lt;&lt; n); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">6</span>             res.push_back((i &gt;&gt; <span style=\"color: #800080;\">1</span>) ^<span style=\"color: #000000;\"> i);\n</span><span style=\"color: #008080;\">7</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">8</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">9</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/merge-sorted-array/\"><span style=\"color: #ff0000;\">Merge Sorted Array</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u4ece\u540e\u5f80\u524d\uff0c\u5bf9 A \u6765\u8bf4\u4e00\u4e2a\u841d\u535c\u4e00\u4e2a\u5751\uff0c\u80af\u5b9a\u4e0d\u4f1a\u7834\u574f\u524d\u9762\u7684\u6570\u636e\u3002\u5177\u4f53\u770b\u4ee3\u7801\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('f67838e6-1867-4779-b1fb-3696fd1f589a')\"><img id=\"code_img_closed_f67838e6-1867-4779-b1fb-3696fd1f589a\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_f67838e6-1867-4779-b1fb-3696fd1f589a\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('f67838e6-1867-4779-b1fb-3696fd1f589a',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_f67838e6-1867-4779-b1fb-3696fd1f589a\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">void</span> merge(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span> m, <span style=\"color: #0000ff;\">int</span> B[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> p = m + n - <span style=\"color: #800080;\">1</span>, i = m - <span style=\"color: #800080;\">1</span>, j = n - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(; i &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; j &gt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">if</span>(A[i] &gt; B[j]) A[p --] = A[i --<span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">else</span> A[p --] = B[j --<span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">while</span>(i &gt;= <span style=\"color: #800080;\">0</span>) A[p --] = A[i --<span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">while</span>(j &gt;= <span style=\"color: #800080;\">0</span>) A[p --] = B[j --<span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">13</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/scramble-string/\"><span style=\"color: #ff0000;\">Scramble String</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u76f4\u63a5\u641c\u7d22\u53ef\u4ee5\u8fc7\uff0c\u8bb0\u5fc6\u5316\u641c\u7d22\u53ef\u63d0\u9ad8\u6548\u7387\u3002</span></span></p>\n<p>&nbsp;dp[i][j][k]\u8868\u793a\u4ece s1[i] \u548c s2[j] \u5f00\u59cb\u957f\u5ea6\u4e3a k \u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f<span style=\"font: 14px/30px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">scrambled string</span>\u3002</p>\n<p><span style=\"font: 14px/30px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">\u679a\u4e3e\u5206\u5272\u4f4d\u7f6e\uff0cscrambled string</span>\u8981\u6c42\u5b57\u7b26\u4e32\u5bf9\u5e94\u5b57\u6bcd\u7684\u4e2a\u6570\u662f\u4e00\u81f4\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u6392\u5e8f\u5bf9\u6bd4\u3002\u9012\u5f52\u7ec8\u70b9\u662f\u521a\u597d\u53ea\u6709\u4e00\u4e2a\u5b57\u6bcd\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('9dcbe1bd-07be-46a0-aa5b-460f499148dd')\"><img id=\"code_img_closed_9dcbe1bd-07be-46a0-aa5b-460f499148dd\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_9dcbe1bd-07be-46a0-aa5b-460f499148dd\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('9dcbe1bd-07be-46a0-aa5b-460f499148dd',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_9dcbe1bd-07be-46a0-aa5b-460f499148dd\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> S1, S2;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &gt;<span style=\"color: #000000;\"> dp;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">bool</span> judge(<span style=\"color: #0000ff;\">string</span> a, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        sort(a.begin(), a.end());\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        sort(b.begin(), b.end());\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; a.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(a[i] != b[i]) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">int</span> DFS(<span style=\"color: #0000ff;\">int</span> s1start, <span style=\"color: #0000ff;\">int</span> s2start, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> len)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">int</span> &amp;ans = dp[s1start][s2start][len - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">if</span>(len == <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> ans = S1[s1start] ==<span style=\"color: #000000;\"> S2[s2start];\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">if</span>(ans != -<span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">if</span>(!judge(S1.substr(s1start, len), S2.substr(s2start, len))) <span style=\"color: #0000ff;\">return</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>         ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; len; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">22</span>             ans =<span style=\"color: #000000;\"> ans \n</span><span style=\"color: #008080;\">23</span>             || DFS(s1start, s2start, i) &amp;&amp; DFS(s1start + i, s2start + i, len -<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">24</span>             || DFS(s1start, s2start + len - i, i) &amp;&amp; DFS(s1start + i, s2start, len -<span style=\"color: #000000;\"> i);\n</span><span style=\"color: #008080;\">25</span> \n<span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">29</span>     <span style=\"color: #0000ff;\">bool</span> isScramble(<span style=\"color: #0000ff;\">string</span> s1, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s2) {\n</span><span style=\"color: #008080;\">30</span>         S1 = s1, S2 =<span style=\"color: #000000;\"> s2;\n</span><span style=\"color: #008080;\">31</span>         dp = vector&lt;vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &gt;\n<span style=\"color: #008080;\">32</span>             (s1.length(), vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;\n<span style=\"color: #008080;\">33</span>                 (s1.length(), vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;\n<span style=\"color: #008080;\">34</span>                     (s1.length(), -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)));\n</span><span style=\"color: #008080;\">35</span>         <span style=\"color: #0000ff;\">return</span> DFS(<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, s1.length());\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">37</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/partition-list/\">Partition List</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5206\u5b58\u5927\u5c0f\u6700\u540e\u5408\u5e76\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c455b6ea-4e3a-4f56-8409-21e5c35fecd4')\"><img id=\"code_img_closed_c455b6ea-4e3a-4f56-8409-21e5c35fecd4\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_c455b6ea-4e3a-4f56-8409-21e5c35fecd4\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('c455b6ea-4e3a-4f56-8409-21e5c35fecd4',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_c455b6ea-4e3a-4f56-8409-21e5c35fecd4\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *partition(ListNode *head, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> x) {\n</span><span style=\"color: #008080;\">12</span>         ListNode *shead, *bhead, *smaller, *bigger, *<span style=\"color: #000000;\">p;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(shead = bhead = smaller = bigger = NULL, p = head; p != NULL; p = p-&gt;<span style=\"color: #000000;\">next)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">if</span>(p-&gt;val &lt;<span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">17</span>                 <span style=\"color: #0000ff;\">if</span>(shead ==<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">18</span>                     shead =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">19</span>                 <span style=\"color: #0000ff;\">if</span>(smaller !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">20</span>                     smaller-&gt;next =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">21</span>                 smaller =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">23</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">25</span>                 <span style=\"color: #0000ff;\">if</span>(bhead ==<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">26</span>                     bhead =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">27</span>                 <span style=\"color: #0000ff;\">if</span>(bigger !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">28</span>                     bigger-&gt;next =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">29</span>                 bigger =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">32</span>         <span style=\"color: #0000ff;\">if</span>(smaller != NULL) smaller-&gt;next =<span style=\"color: #000000;\"> bhead;\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">if</span>(bigger != NULL) bigger-&gt;next =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">34</span>         <span style=\"color: #0000ff;\">return</span> shead != NULL ?<span style=\"color: #000000;\"> shead : bhead;\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">36</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/maximal-rectangle/\"><span style=\"color: #ff0000;\">Maximal Rectangle</span></a></span></h3>\n<p>\u65b9\u6cd5\u4e00\uff1alinecnt[i][j]\u7edf\u8ba1\u7b2c i \u884c\u5230\u7b2c j \u4f4d\u7f6e\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u7684 '1'\uff0c\u63a5\u4e0b\u6765\u679a\u4e3e\u5217\uff0c\u6bcf\u4e00\u5217\u76f8\u5f53\u4e8e\u4e00\u6b21\u76f4\u65b9\u56fe\u6700\u5927\u77e9\u5f62\u7edf\u8ba1\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u4f4d\u7f6e\u5411\u524d\u548c\u5411\u540e\u6700\u8fdc\u7684\u4e0d\u5c11\u4e8e\u5f53\u524d\u4f4d\u7f6e\u503c\u7684\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u66f4\u65b0\u7ed3\u679c\uff0c\u603b\u590d\u6742\u5ea6O(n^2)\u3002</p>\n<p>\u627e&ldquo;\u6700\u8fdc\u4f4d\u7f6e&rdquo;\u7528\u8fed\u4ee3\u6307\u9488\uff0c\u7406\u8bba\u590d\u6742\u5ea6\u7565\u9ad8\u4e8eO(n)\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('72c6d852-4a31-4523-869b-53ba4d105ec1')\"><img id=\"code_img_closed_72c6d852-4a31-4523-869b-53ba4d105ec1\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_72c6d852-4a31-4523-869b-53ba4d105ec1\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('72c6d852-4a31-4523-869b-53ba4d105ec1',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_72c6d852-4a31-4523-869b-53ba4d105ec1\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> maximalRectangle(vector&lt;vector&lt;<span style=\"color: #0000ff;\">char</span>&gt; &gt; &amp;<span style=\"color: #000000;\">matrix) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(matrix.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> H = matrix.size(), W = matrix[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].size();\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> left(H), right(H);\n</span><span style=\"color: #008080;\"> 8</span>         vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; linecnt(H, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(W, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; H; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">int</span> last = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; W; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">if</span>(matrix[i][j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">'</span>) last ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">else</span> last = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>                 linecnt[i][j] =<span style=\"color: #000000;\"> last;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> k = <span style=\"color: #800080;\">0</span>; k &lt; W; k ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; H; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">23</span>                 <span style=\"color: #0000ff;\">if</span>(i == <span style=\"color: #800080;\">0</span>) left[i] = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">26</span>                     left[i] = i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span>                     <span style=\"color: #0000ff;\">while</span>(left[i] &gt; -<span style=\"color: #800080;\">1</span> &amp;&amp; linecnt[left[i]][k] &gt;=<span style=\"color: #000000;\"> linecnt[i][k])\n</span><span style=\"color: #008080;\">28</span>                         left[i] =<span style=\"color: #000000;\"> left[left[i]];\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">31</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = H - <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">33</span>                 <span style=\"color: #0000ff;\">if</span>(i == H - <span style=\"color: #800080;\">1</span>) right[i] =<span style=\"color: #000000;\"> H;\n</span><span style=\"color: #008080;\">34</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">36</span>                     right[i] = i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">37</span>                     <span style=\"color: #0000ff;\">while</span>(right[i] &lt; H &amp;&amp; linecnt[right[i]][k] &gt;=<span style=\"color: #000000;\"> linecnt[i][k])\n</span><span style=\"color: #008080;\">38</span>                         right[i] =<span style=\"color: #000000;\"> right[right[i]];\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">40</span>                 ans = max(ans, (right[i] - left[i] - <span style=\"color: #800080;\">1</span>) *<span style=\"color: #000000;\"> linecnt[i][k]);\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">43</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">45</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>\u7528\u5355\u8c03\u6808\uff0c\u7406\u8bba\u590d\u6742\u5ea6O(n)\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('a1a0527f-0534-4938-a2ab-85a691e411e5')\"><img id=\"code_img_closed_a1a0527f-0534-4938-a2ab-85a691e411e5\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_a1a0527f-0534-4938-a2ab-85a691e411e5\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('a1a0527f-0534-4938-a2ab-85a691e411e5',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_a1a0527f-0534-4938-a2ab-85a691e411e5\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> maximalRectangle(vector&lt;vector&lt;<span style=\"color: #0000ff;\">char</span>&gt; &gt; &amp;<span style=\"color: #000000;\">matrix) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(matrix.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; linecnt(matrix.size(), vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(matrix[<span style=\"color: #800080;\">0</span>].size(), <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; matrix.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">int</span> last = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; matrix[<span style=\"color: #800080;\">0</span>].size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">if</span>(matrix[i][j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">'</span>) last ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">else</span> last = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>                 linecnt[i][j] =<span style=\"color: #000000;\"> last;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> k = <span style=\"color: #800080;\">0</span>; k &lt; matrix[<span style=\"color: #800080;\">0</span>].size(); k ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">19</span>             stack&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> s, site;\n</span><span style=\"color: #008080;\">20</span>             vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\">last(matrix.size());\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; matrix.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">23</span>                 <span style=\"color: #0000ff;\">while</span>(!s.empty() &amp;&amp; s.top() &gt;=<span style=\"color: #000000;\"> linecnt[i][k])\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">                    s.pop(), site.pop();\n</span><span style=\"color: #008080;\">25</span>                 <span style=\"color: #0000ff;\">if</span>(!s.empty()) last[i] = site.top() + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">26</span>                 <span style=\"color: #0000ff;\">else</span> last[i] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">                s.push(linecnt[i][k]);\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">                site.push(i);\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">30</span>             <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">s.empty()) s.pop(), site.pop();\n</span><span style=\"color: #008080;\">31</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = matrix.size() - <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">33</span>                 <span style=\"color: #0000ff;\">while</span>(!s.empty() &amp;&amp; s.top() &gt;=<span style=\"color: #000000;\"> linecnt[i][k])\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">                    s.pop(), site.pop();\n</span><span style=\"color: #008080;\">35</span>                 <span style=\"color: #0000ff;\">if</span>(!s.empty()) ans = max(ans, (site.top() - last[i]) *<span style=\"color: #000000;\"> linecnt[i][k]);\n</span><span style=\"color: #008080;\">36</span>                 <span style=\"color: #0000ff;\">else</span> ans = max(ans, (<span style=\"color: #0000ff;\">int</span>)(matrix.size() - last[i]) *<span style=\"color: #000000;\"> linecnt[i][k]);\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">                s.push(linecnt[i][k]);\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">                site.push(i);\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">40</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">41</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">43</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>\u65b9\u6cd5\u4e8c\uff1a\u6bcf\u4e2a '1' \u7684\u70b9\u5f53\u4f5c\u4e00\u4e2a\u77e9\u5f62\u7684\u5e95\u90e8\uff0cleft[j]\u3001right[j]\u3001height[j]\u8868\u793a\u5f53\u524d\u884c\u7b2c j \u4e2a\u4f4d\u7f6e\u8fd9\u4e2a\u70b9\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u4f38\u5c55\u7684\u6700\u5927\u77e9\u5f62\u7684\u8fb9\u754c\uff0c\u4f5c\u4e3a\u6eda\u52a8\u6570\u7ec4\uff0c\u4e0b\u4e00\u884c\u7684\u6570\u636e\u53ef\u4ee5\u7531\u4e0a\u4e00\u884c\u7ed3\u679c\u5f97\u5230\uff0c\u603b\u590d\u6742\u5ea6O(n^2)\u3002</p>\n<p>left[j] = max(\u8fd9\u4e00\u884c\u6700\u5de6, left[j]\uff08\u4e0a\u4e00\u884c\u6700\u5de6\uff09&nbsp; );</p>\n<p>right[j] = min(\u8fd9\u4e00\u884c\u6700\u53f3\uff0cright[j]\uff08\u4e0a\u4e00\u884c\u6700\u53f3\uff09&nbsp; );</p>\n<p>height[j] = height[j - 1] + 1;</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('01e3e97d-1db7-4c45-b657-5b393c4cc6f8')\"><img id=\"code_img_closed_01e3e97d-1db7-4c45-b657-5b393c4cc6f8\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_01e3e97d-1db7-4c45-b657-5b393c4cc6f8\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('01e3e97d-1db7-4c45-b657-5b393c4cc6f8',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_01e3e97d-1db7-4c45-b657-5b393c4cc6f8\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> maximalRectangle(vector&lt;vector&lt;<span style=\"color: #0000ff;\">char</span>&gt; &gt; &amp;<span style=\"color: #000000;\">matrix) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(matrix.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> H = matrix.size(), W = matrix[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].size();\n</span><span style=\"color: #008080;\"> 6</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; left(W, -<span style=\"color: #800080;\">1</span>), right(W, W), height(W, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; H; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">int</span> last = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; W; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">if</span>(matrix[i][j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">15</span>                     <span style=\"color: #0000ff;\">if</span>(last == -<span style=\"color: #800080;\">1</span>) last =<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">16</span>                     left[j] =<span style=\"color: #000000;\"> max(left[j], last);\n</span><span style=\"color: #008080;\">17</span>                     height[j] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">19</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">21</span>                     last = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">22</span>                     left[j] = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span>                     height[j] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">26</span>             last = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = W - <span style=\"color: #800080;\">1</span>; j &gt;= <span style=\"color: #800080;\">0</span>; j --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">29</span>                 <span style=\"color: #0000ff;\">if</span>(matrix[i][j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">31</span>                     <span style=\"color: #0000ff;\">if</span>(last == -<span style=\"color: #800080;\">1</span>) last =<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">32</span>                     right[j] =<span style=\"color: #000000;\"> min(right[j], last);\n</span><span style=\"color: #008080;\">33</span>                     ans = max(ans, height[j] * (right[j] - left[j] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">35</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">37</span>                     last = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">38</span>                     right[j] =<span style=\"color: #000000;\"> W;\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">40</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">42</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">43</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">44</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/largest-rectangle-in-histogram/\">Largest Rectangle in Histogram</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u53c2\u8003\u4e0a\u4e00\u9898Maximal Rectangle\u65b9\u6cd5\u4e00\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('d277090d-1a76-48e2-832c-cc797da5c215')\"><img id=\"code_img_closed_d277090d-1a76-48e2-832c-cc797da5c215\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_d277090d-1a76-48e2-832c-cc797da5c215\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('d277090d-1a76-48e2-832c-cc797da5c215',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_d277090d-1a76-48e2-832c-cc797da5c215\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> largestRectangleArea(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">height) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(height.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> left(height.size()), right(height.size());\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; height.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(i == <span style=\"color: #800080;\">0</span>) left[i] = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">12</span>                 left[i] = i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">while</span>(left[i] &gt; -<span style=\"color: #800080;\">1</span> &amp;&amp; height[i] &lt;=<span style=\"color: #000000;\"> height[left[i]])\n</span><span style=\"color: #008080;\">14</span>                     left[i] =<span style=\"color: #000000;\"> left[left[i]];\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = height.size() - <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">if</span>(i == height.size() - <span style=\"color: #800080;\">1</span>) right[i] =<span style=\"color: #000000;\"> height.size();\n</span><span style=\"color: #008080;\">20</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">22</span>                 right[i] = i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span>                 <span style=\"color: #0000ff;\">while</span>(right[i] &lt; height.size() &amp;&amp; height[i] &lt;=<span style=\"color: #000000;\"> height[right[i]])\n</span><span style=\"color: #008080;\">24</span>                     right[i] =<span style=\"color: #000000;\"> right[right[i]];\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">26</span>             ans = max(ans, (right[i] - left[i] - <span style=\"color: #800080;\">1</span>) *<span style=\"color: #000000;\"> height[i]);\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">30</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/remove-duplicates-from-sorted-list-ii/\">Remove Duplicates from Sorted List II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u52a0\u4e2a\u8868\u5934\u4e71\u641e\u5427\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('d4148de2-5e64-4376-9201-11c9feb3b54a')\"><img id=\"code_img_closed_d4148de2-5e64-4376-9201-11c9feb3b54a\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_d4148de2-5e64-4376-9201-11c9feb3b54a\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('d4148de2-5e64-4376-9201-11c9feb3b54a',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_d4148de2-5e64-4376-9201-11c9feb3b54a\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *deleteDuplicates(ListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(head == NULL || head-&gt;next == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">13</span>         ListNode *newhead = <span style=\"color: #0000ff;\">new</span> ListNode(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">14</span>         newhead-&gt;next =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">for</span>(ListNode *pre = newhead, *now = head, *nex = head-&gt;next; nex !=<span style=\"color: #000000;\"> NULL;)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">if</span>(now-&gt;val == nex-&gt;<span style=\"color: #000000;\">val)\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">19</span>                 <span style=\"color: #0000ff;\">while</span>(nex != NULL &amp;&amp; now-&gt;val == nex-&gt;<span style=\"color: #000000;\">val)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">                    free(now);\n</span><span style=\"color: #008080;\">22</span>                     now =<span style=\"color: #000000;\"> nex;\n</span><span style=\"color: #008080;\">23</span>                     nex = nex-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">                free(now);\n</span><span style=\"color: #008080;\">26</span>                 pre-&gt;next =<span style=\"color: #000000;\"> nex;\n</span><span style=\"color: #008080;\">27</span>                 <span style=\"color: #0000ff;\">if</span>(nex == NULL) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">else</span> pre =<span style=\"color: #000000;\"> now;\n</span><span style=\"color: #008080;\">30</span>             now =<span style=\"color: #000000;\"> nex;\n</span><span style=\"color: #008080;\">31</span>             nex = nex-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">33</span>         head = newhead-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">        free(newhead);\n</span><span style=\"color: #008080;\">35</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">37</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/remove-duplicates-from-sorted-list/\">Remove Duplicates from Sorted List</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u76f4\u63a5\u64cd\u4f5c\u3002</span></span></span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('82f2fd7b-3627-4aec-9db8-2f7a26a3fcc6')\"><img id=\"code_img_closed_82f2fd7b-3627-4aec-9db8-2f7a26a3fcc6\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_82f2fd7b-3627-4aec-9db8-2f7a26a3fcc6\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('82f2fd7b-3627-4aec-9db8-2f7a26a3fcc6',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_82f2fd7b-3627-4aec-9db8-2f7a26a3fcc6\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *deleteDuplicates(ListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(head == NULL || head-&gt;next == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(ListNode *pre = head, *p = head-&gt;next; p !=<span style=\"color: #000000;\"> NULL;)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">while</span>(p != NULL &amp;&amp; pre-&gt;val == p-&gt;<span style=\"color: #000000;\">val)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">17</span>                 pre-&gt;next = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">                free(p);\n</span><span style=\"color: #008080;\">19</span>                 p = pre-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">if</span>(p == NULL) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">22</span>             pre =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">23</span>             p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/search-in-rotated-sorted-array-ii/\">Search in Rotated Sorted Array II</a></h3>\n<p>\u4ee5mid\u4e3a\u754c\uff0c\u5de6\u53f3\u4e24\u8fb9\u81f3\u5c11\u6709\u4e00\u8fb9\u662f\u6709\u5e8f\u7684\u3002\u7531\u4e8e\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u6709O(n)\u7684\u53ef\u80fd\u6027\uff0c\u6240\u4ee5\u786e\u5b9a\u7684\u65f6\u5019\u4e8c\u5206\uff0c\u4e0d\u786e\u5b9a\u7684\u65f6\u5019\u5355\u4f4d\u7f29\u51cf\u8fb9\u754c\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('0eecf17a-f4c3-44d3-b851-86dfe27e6898')\"><img id=\"code_img_closed_0eecf17a-f4c3-44d3-b851-86dfe27e6898\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_0eecf17a-f4c3-44d3-b851-86dfe27e6898\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('0eecf17a-f4c3-44d3-b851-86dfe27e6898',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_0eecf17a-f4c3-44d3-b851-86dfe27e6898\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> search(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> left = <span style=\"color: #800080;\">0</span>, right = n - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, mid;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">while</span>(left &lt;<span style=\"color: #000000;\"> right)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             mid = left + right &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(target &lt; A[mid] &amp;&amp; A[left] &lt; target) right =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(target &lt; A[right] &amp;&amp; A[mid] &lt; target) left = mid + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">if</span>(A[left] == target || A[right] == target) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(A[left] &lt; target) left ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(target &lt; A[right]) right --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">return</span> A[left] == target ? <span style=\"color: #0000ff;\">true</span> : <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">20</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/remove-duplicates-from-sorted-array-ii/\">Remove Duplicates from Sorted Array II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u8bb0\u4e0b\u653e\u4e86\u51e0\u4e2a\uff0c\u591a\u4e86\u4e0d\u653e\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('1885bb28-a92c-47c7-b2d0-7ce394935beb')\"><img id=\"code_img_closed_1885bb28-a92c-47c7-b2d0-7ce394935beb\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_1885bb28-a92c-47c7-b2d0-7ce394935beb\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('1885bb28-a92c-47c7-b2d0-7ce394935beb',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_1885bb28-a92c-47c7-b2d0-7ce394935beb\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> removeDuplicates(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, cnt;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(i = j = cnt = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">if</span>(j != <span style=\"color: #800080;\">0</span> &amp;&amp; A[j - <span style=\"color: #800080;\">1</span>] == A[i]) cnt ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">else</span> cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(cnt &lt; <span style=\"color: #800080;\">2</span>) A[j ++] =<span style=\"color: #000000;\"> A[i];\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">13</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/word-search/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Word Search</span></a></p>\n<p>\u57fa\u7840DFS\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8fdd6e95-fa57-483b-8a02-04c29c45eef2')\"><img id=\"code_img_closed_8fdd6e95-fa57-483b-8a02-04c29c45eef2\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8fdd6e95-fa57-483b-8a02-04c29c45eef2\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8fdd6e95-fa57-483b-8a02-04c29c45eef2',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8fdd6e95-fa57-483b-8a02-04c29c45eef2\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> dx[<span style=\"color: #800080;\">4</span>] = {<span style=\"color: #800080;\">1</span>, -<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">int</span> dy[<span style=\"color: #800080;\">4</span>] = {<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">1</span>, -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">bool</span> DFS(<span style=\"color: #0000ff;\">int</span> x, <span style=\"color: #0000ff;\">int</span> y, vector&lt;vector&lt;<span style=\"color: #0000ff;\">char</span>&gt; &gt; &amp;board, <span style=\"color: #0000ff;\">string</span> word, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ith)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(board[x][y] != word[ith]) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">if</span>(ith == word.length() - <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>         board[x][y] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">4</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">int</span> nx = x +<span style=\"color: #000000;\"> dx[i];\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">int</span> ny = y +<span style=\"color: #000000;\"> dy[i];\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">if</span>(nx &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; ny &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; nx &lt; board.size() &amp;&amp; ny &lt; board[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].size())\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">16</span>                 <span style=\"color: #0000ff;\">if</span>(DFS(nx, ny, board, word, ith + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">18</span>                     board[x][y] =<span style=\"color: #000000;\"> word[ith];\n</span><span style=\"color: #008080;\">19</span>                     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">23</span>         board[x][y] =<span style=\"color: #000000;\"> word[ith];\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">bool</span> exist(vector&lt;vector&lt;<span style=\"color: #0000ff;\">char</span>&gt; &gt; &amp;board, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> word) {\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; board.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; board[<span style=\"color: #800080;\">0</span>].size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">31</span>                 <span style=\"color: #0000ff;\">if</span>(DFS(i, j, board, word, <span style=\"color: #800080;\">0</span>)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">34</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">36</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/subsets/\">Subsets</a></h3>\n<p>\u57fa\u7840DFS\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('5415fec9-2685-40a9-baf7-fdedaa4cc028')\"><img id=\"code_img_closed_5415fec9-2685-40a9-baf7-fdedaa4cc028\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_5415fec9-2685-40a9-baf7-fdedaa4cc028\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('5415fec9-2685-40a9-baf7-fdedaa4cc028',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_5415fec9-2685-40a9-baf7-fdedaa4cc028\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> now;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">void</span> DFS(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;S, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ith)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(ith ==<span style=\"color: #000000;\"> S.size())\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            res.push_back(now);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         DFS(S, ith + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        now.push_back(S[ith]);\n</span><span style=\"color: #008080;\">14</span>         DFS(S, ith + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        now.pop_back();\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">17</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; subsets(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">S) {\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        sort(S.begin(), S.end());\n</span><span style=\"color: #008080;\">19</span>         DFS(S, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">22</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/combinations/\">Combinations</a></h3>\n<p>\u57fa\u7840DFS\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c8e0ed2b-00ca-4ffe-af50-2606ac062c30')\"><img id=\"code_img_closed_c8e0ed2b-00ca-4ffe-af50-2606ac062c30\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_c8e0ed2b-00ca-4ffe-af50-2606ac062c30\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('c8e0ed2b-00ca-4ffe-af50-2606ac062c30',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_c8e0ed2b-00ca-4ffe-af50-2606ac062c30\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> now;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span> ith, <span style=\"color: #0000ff;\">int</span> sum, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> k)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(sum ==<span style=\"color: #000000;\"> k)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            res.push_back(now);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(sum + n - ith + <span style=\"color: #800080;\">1</span> &gt;<span style=\"color: #000000;\"> k)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">14</span>             DFS(n, ith + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, sum, k);\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        now.push_back(ith);\n</span><span style=\"color: #008080;\">17</span>         DFS(n, ith + <span style=\"color: #800080;\">1</span>, sum + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, k);\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        now.pop_back();\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">20</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; combine(<span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> k) {\n</span><span style=\"color: #008080;\">21</span>         DFS(n, <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, k);\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/minimum-window-substring/\"><span style=\"color: #ff0000;\">Minimum Window Substring</span></a></span></h3>\n<p>\u5148\u7edf\u8ba1 T \u4e2d\u5404\u5b57\u7b26\u90fd\u6709\u591a\u5c11\u4e2a\uff0c\u7136\u540e\u4e24\u4e2a\u4e0b\u6807\u4e00\u524d(i)\u4e00\u540e(j)\u5728 S \u4e0a\u8dd1\uff0c&nbsp;\u5f53 i \u8dd1\u5230\u628a T \u4e2d\u5b57\u7b26\u90fd\u5305\u542b\u7684\u4f4d\u7f6e\u65f6\u5019\uff0c\u8ba9 j \u8ffd\u5230\u7b2c\u4e00\u4e2a\u5305\u542b T \u7684\u5b57\u7b26\u7684\u5730\u65b9\uff0c\u66f4\u65b0\u7ed3\u679c\uff0c\u53bb\u6389 j \u8fd9\u4e2a\u4f4d\u7f6e\u5b57\u7b26\u7684\u7edf\u8ba1\uff0c\u8ba9 i \u7ee7\u7eed\u8dd1\uff0c\u5982\u6b64\u53cd\u590d\u3002</p>\n<p>i \u548c j&nbsp;\u90fd\u53ea\u904d\u5386\u4e00\u904d S\uff0c\u590d\u6742\u5ea6 O(n)\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('ccdf019e-81a0-484b-8be5-d82cfcba4385')\"><img id=\"code_img_closed_ccdf019e-81a0-484b-8be5-d82cfcba4385\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_ccdf019e-81a0-484b-8be5-d82cfcba4385\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('ccdf019e-81a0-484b-8be5-d82cfcba4385',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_ccdf019e-81a0-484b-8be5-d82cfcba4385\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span> minWindow(<span style=\"color: #0000ff;\">string</span> S, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> T) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; cnt(<span style=\"color: #800080;\">256</span>, <span style=\"color: #800080;\">0</span>), need(<span style=\"color: #800080;\">256</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> sum = <span style=\"color: #800080;\">0</span>, len = <span style=\"color: #800080;\">0x3f3f3f3f</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; T.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span>             need[T[i]] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>, j = <span style=\"color: #800080;\">0</span>; i &lt; S.length(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">while</span>(i &lt; S.length() &amp;&amp; sum &lt;<span style=\"color: #000000;\"> T.length())\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">if</span>(cnt[S[i]] &lt;<span style=\"color: #000000;\"> need[S[i]])\n</span><span style=\"color: #008080;\">14</span>                     sum ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>                 cnt[S[i]] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>                 i ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">18</span>             <span style=\"color: #0000ff;\">while</span>(sum == T.length() &amp;&amp; j &lt;<span style=\"color: #000000;\"> S.length())\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">20</span>                 cnt[S[j]] --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">21</span>                 <span style=\"color: #0000ff;\">if</span>(cnt[S[j]] &lt;<span style=\"color: #000000;\"> need[S[j]])\n</span><span style=\"color: #008080;\">22</span>                     <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span>                 j ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">25</span>             <span style=\"color: #0000ff;\">if</span>(sum &lt; T.length()) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">26</span>             <span style=\"color: #0000ff;\">if</span>(i - j &lt;<span style=\"color: #000000;\"> len)\n</span><span style=\"color: #008080;\">27</span>                 ans = S.substr(j, i - j), len = i -<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">28</span>             sum --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">30</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">32</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/sort-colors/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Sort Colors</span></a></p>\n<p>\u8f6e\u6d41\u627e\uff1a</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('4b892579-9980-42d1-9ad4-f56888d92e32')\"><img id=\"code_img_closed_4b892579-9980-42d1-9ad4-f56888d92e32\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_4b892579-9980-42d1-9ad4-f56888d92e32\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('4b892579-9980-42d1-9ad4-f56888d92e32',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_4b892579-9980-42d1-9ad4-f56888d92e32\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">void</span> sortColors(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> find = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>, j = n - <span style=\"color: #800080;\">1</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">if</span>(A[i] == find) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">while</span>(j &gt; i &amp;&amp; A[j] != find) j --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(j &gt;<span style=\"color: #000000;\"> i) swap(A[i], A[j]);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">else</span> i --, j = n - <span style=\"color: #800080;\">1</span>, find ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">13</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>\u627e\u5230\u54ea\u4e2a\u653e\u54ea\u4e2a\uff1a</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b466765e-bcbd-4137-98b3-2a0dddbe696b')\"><img id=\"code_img_closed_b466765e-bcbd-4137-98b3-2a0dddbe696b\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b466765e-bcbd-4137-98b3-2a0dddbe696b\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b466765e-bcbd-4137-98b3-2a0dddbe696b',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b466765e-bcbd-4137-98b3-2a0dddbe696b\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">void</span> sortColors(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> p0, p1, p2;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(p0 = <span style=\"color: #800080;\">0</span>, p1 = p2 = n - <span style=\"color: #800080;\">1</span>; p0 &lt;<span style=\"color: #000000;\"> p1; )\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">if</span>(A[p0] == <span style=\"color: #800080;\">0</span>) p0 ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(A[p0] == <span style=\"color: #800080;\">1</span>) swap(A[p0], A[p1 --<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(A[p0] == <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">11</span>                 swap(A[p0], A[p2 --<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">12</span>                 p1 =<span style=\"color: #000000;\"> p2;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">16</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/search-a-2d-matrix/\">Search a 2D Matrix</a></h3>\n<p>\u5199\u4e24\u4e2a\u4e8c\u5206\u67e5\u627e\u3002\u6216\u8005\u628a\u6574\u4e2a\u77e9\u9635\u770b\u4f5c\u4e00\u7ef4\uff0c\u76f4\u63a5\u4e8c\u5206\uff0c\u6362\u7b97\u5750\u6807\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('7a73bc04-66d0-438f-9f38-fafe7e21adcc')\"><img id=\"code_img_closed_7a73bc04-66d0-438f-9f38-fafe7e21adcc\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_7a73bc04-66d0-438f-9f38-fafe7e21adcc\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('7a73bc04-66d0-438f-9f38-fafe7e21adcc',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_7a73bc04-66d0-438f-9f38-fafe7e21adcc\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> searchMatrix(vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &amp;matrix, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> left, right, mid;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(left = <span style=\"color: #800080;\">0</span>, right = matrix.size(); left &lt; right - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">; )\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             mid = left + right &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(matrix[mid][<span style=\"color: #800080;\">0</span>] &gt; target) right =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">else</span> left =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">if</span>(left == matrix.size() || right == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;a =<span style=\"color: #000000;\"> matrix[left];\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(left = <span style=\"color: #800080;\">0</span>, right = a.size(); left &lt; right - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             mid = left + right &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">if</span>(a[mid] &gt; target) right =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">else</span> left =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">if</span>(left == a.size() || right == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">return</span> a[left] ==<span style=\"color: #000000;\"> target;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">22</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/set-matrix-zeroes/\"><span style=\"color: #ff0000;\">Set Matrix Zeroes</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">O(m+n)\u7684\u65b9\u6cd5\u662f\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u800c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u53ea\u8981\u5229\u7528\u539f\u77e9\u9635\u7684\u4e00\u884c\u548c\u4e00\u5217\u6765\u4f7f\u7528O(m+n)\u7684\u65b9\u6cd5\u5c31\u884c\u4e86\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('147c6787-2fb8-4d71-821c-708303f74ad9')\"><img id=\"code_img_closed_147c6787-2fb8-4d71-821c-708303f74ad9\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_147c6787-2fb8-4d71-821c-708303f74ad9\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('147c6787-2fb8-4d71-821c-708303f74ad9',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_147c6787-2fb8-4d71-821c-708303f74ad9\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">void</span> setZeroes(vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &amp;<span style=\"color: #000000;\">matrix) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(matrix.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> x = -<span style=\"color: #800080;\">1</span>, y = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; matrix.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; matrix[<span style=\"color: #800080;\">0</span>].size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 <span style=\"color: #0000ff;\">if</span>(matrix[i][j] == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">12</span>                     <span style=\"color: #0000ff;\">if</span>(x == -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">14</span>                         x = i, y =<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">16</span>                     <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">18</span>                         matrix[x][j] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>                         matrix[i][y] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">if</span>(x == -<span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; matrix.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">26</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; matrix[<span style=\"color: #800080;\">0</span>].size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">27</span>                 <span style=\"color: #0000ff;\">if</span>((matrix[x][j] == <span style=\"color: #800080;\">0</span> || matrix[i][y] == <span style=\"color: #800080;\">0</span>) &amp;&amp; (i != x &amp;&amp; j != y)) matrix[i][j] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; matrix.size(); i ++) matrix[i][y] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">29</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; matrix[<span style=\"color: #800080;\">0</span>].size(); j ++) matrix[x][j] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">31</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/edit-distance/\">Edit Distance</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u52a8\u6001\u89c4\u5212\uff0c\u5148\u521d\u59cb\u5316 dp[i][0] \u548c dp[0][i]\uff0c\u5373\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5bf9\u5e94\u7a7a\u4e32\u7684\u7f16\u8f91\u8ddd\u79bb\u4e3a\u4e32\u957f\u5ea6\uff0c\u4e4b\u540e\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u53d6\u5b50\u95ee\u9898\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e \u6539\u3001\u5220\u3001\u589e\u5f97\u89e3\u7684\u6700\u5c0f\u503c\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('4a123ba9-17f9-4417-adad-45c6b86b7fe3')\"><img id=\"code_img_closed_4a123ba9-17f9-4417-adad-45c6b86b7fe3\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_4a123ba9-17f9-4417-adad-45c6b86b7fe3\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('4a123ba9-17f9-4417-adad-45c6b86b7fe3',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_4a123ba9-17f9-4417-adad-45c6b86b7fe3\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> minDistance(<span style=\"color: #0000ff;\">string</span> word1, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> word2) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; dp(word1.length() + <span style=\"color: #800080;\">1</span>, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(word2.length() + <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; word1.length(); i ++) dp[i + <span style=\"color: #800080;\">1</span>][<span style=\"color: #800080;\">0</span>] = i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; word2.length(); i ++) dp[<span style=\"color: #800080;\">0</span>][i + <span style=\"color: #800080;\">1</span>] = i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; word1.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; word2.length(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 <span style=\"color: #0000ff;\">if</span>(word1[i] !=<span style=\"color: #000000;\"> word2[j])\n</span><span style=\"color: #008080;\">11</span>                     dp[i + <span style=\"color: #800080;\">1</span>][j + <span style=\"color: #800080;\">1</span>] = min(dp[i][j] + <span style=\"color: #800080;\">1</span>, min(dp[i][j + <span style=\"color: #800080;\">1</span>] + <span style=\"color: #800080;\">1</span>, dp[i + <span style=\"color: #800080;\">1</span>][j] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">13</span>                     dp[i + <span style=\"color: #800080;\">1</span>][j + <span style=\"color: #800080;\">1</span>] = min(dp[i][j], min(dp[i][j + <span style=\"color: #800080;\">1</span>] + <span style=\"color: #800080;\">1</span>, dp[i + <span style=\"color: #800080;\">1</span>][j] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> dp[word1.length()][word2.length()];\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">17</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/simplify-path/\">Simplify Path</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u597d\u70e6\u4eba\u7684\u9898\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('e6286a9f-d2f6-4469-9f74-e6579fb4d261')\"><img id=\"code_img_closed_e6286a9f-d2f6-4469-9f74-e6579fb4d261\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_e6286a9f-d2f6-4469-9f74-e6579fb4d261\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('e6286a9f-d2f6-4469-9f74-e6579fb4d261',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_e6286a9f-d2f6-4469-9f74-e6579fb4d261\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span> simplifyPath(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> path) {\n</span><span style=\"color: #008080;\"> 4</span>         stack&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> s;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> str;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; path.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(path[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">/</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 <span style=\"color: #0000ff;\">if</span>(str == <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">..</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">12</span>                     <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">s.empty()) \n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">                        s.pop();\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(str != <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">\"</span> &amp;&amp; str != <span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">                    s.push(str);\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">                str.clear();\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">20</span>                 str +=<span style=\"color: #000000;\"> path[i];\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">if</span>(str == <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">..</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">24</span>             <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">s.empty())\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">                s.pop();\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(str != <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">\"</span> &amp;&amp; str != <span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            s.push(str);\n</span><span style=\"color: #008080;\">29</span>         <span style=\"color: #0000ff;\">if</span>(s.empty()) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">30</span>         <span style=\"color: #0000ff;\">for</span>(str.clear(); !<span style=\"color: #000000;\">s.empty(); s.pop())\n</span><span style=\"color: #008080;\">31</span>             str = <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/</span><span style=\"color: #800000;\">\"</span> + s.top() +<span style=\"color: #000000;\"> str;\n</span><span style=\"color: #008080;\">32</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> str;\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">34</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/climbing-stairs/\">Climbing Stairs</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u9012\u63a8\uff0c\u5c31\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('22e50a83-92a7-4d83-8542-214674f7f1aa')\"><img id=\"code_img_closed_22e50a83-92a7-4d83-8542-214674f7f1aa\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_22e50a83-92a7-4d83-8542-214674f7f1aa\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('22e50a83-92a7-4d83-8542-214674f7f1aa',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_22e50a83-92a7-4d83-8542-214674f7f1aa\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">3</span>     <span style=\"color: #0000ff;\">int</span> climbStairs(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">4</span>         <span style=\"color: #0000ff;\">return</span> (<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">5</span>             (pow((<span style=\"color: #800080;\">1</span>+sqrt(<span style=\"color: #800080;\">5</span>))/<span style=\"color: #800080;\">2</span>, n + <span style=\"color: #800080;\">1</span>) / sqrt(<span style=\"color: #800080;\">5</span>) - \n<span style=\"color: #008080;\">6</span>             pow((<span style=\"color: #800080;\">1</span>-sqrt(<span style=\"color: #800080;\">5</span>))/<span style=\"color: #800080;\">2</span>, n + <span style=\"color: #800080;\">1</span>) / sqrt(<span style=\"color: #800080;\">5</span>) + <span style=\"color: #800080;\">0.1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">7</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">8</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/sqrtx/\">Sqrt(x)</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u725b\u987f\u8fed\u4ee3\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u8bbe\u8f93\u5165\u4e3an\uff0cf(x)=x^2-n\uff0c\u89e3\u5c31\u662ff(x)=0\u65f6\u7684x\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u8bbe\u731c\u4e86\u4e00\u6570x[0]\uff0c\u90a3\u4e48\u5728f(x)\u5728x[0]\u5904\u7684\u5207\u7ebf\u4e0ex\u8f74\u7684\u4ea4\u70b9x[1]\u66f4\u63a5\u8fd1\u76ee\u6807\u89e3\uff08\u53ef\u753b\u56fe\u770b\u770b\uff09\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u90a3\u4e48\u9012\u63a8\u4e0b\u53bb\uff0cx[i]=(x[i-1]+n/x[i-1])/2\uff0c\u7528double\uff0c\u8d8a\u63a8\u8d8a\u7cbe\u786e\uff0c\u76f4\u5230\u81ea\u5df1\u60f3\u8981\u7684\u7cbe\u5ea6\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8e681e27-8987-4e48-bc9e-649c859e28e6')\"><img id=\"code_img_closed_8e681e27-8987-4e48-bc9e-649c859e28e6\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8e681e27-8987-4e48-bc9e-649c859e28e6\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8e681e27-8987-4e48-bc9e-649c859e28e6',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8e681e27-8987-4e48-bc9e-649c859e28e6\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> sqrt(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> x) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> now, last;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(x == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(now = last = (<span style=\"color: #0000ff;\">double</span>)x; ; last =<span style=\"color: #000000;\"> now)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             now = (last + (x / last)) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(fabs(last - now) &lt; 1e-<span style=\"color: #800080;\">5</span>) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">return</span> (<span style=\"color: #0000ff;\">int</span>)(now + 1e-<span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">13</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/text-justification/\">Text Justification</a></h3>\n<p>\u6bcf\u884c\u9650\u5236\u957f\u5ea6\uff0c\u7a7a\u683c\u5747\u5300\u63d2\u5165\uff0c\u4e0d\u80fd\u5b8c\u5168\u5e73\u5747\u7684\u60c5\u51b5\u4e0b\u4f18\u5148\u9760\u524d\u7684\u5355\u8bcd\u95f4\u9694\u3002</p>\n<p>\u6700\u540e\u4e00\u884c\u7279\u522b\u5904\u7406\uff0c\u5355\u8bcd\u95f4\u53ea\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u5269\u4e0b\u7684\u653e\u5728\u672b\u5c3e\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('276af6a1-4f2a-4651-8b08-c94806af8121')\"><img id=\"code_img_closed_276af6a1-4f2a-4651-8b08-c94806af8121\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_276af6a1-4f2a-4651-8b08-c94806af8121\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('276af6a1-4f2a-4651-8b08-c94806af8121',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_276af6a1-4f2a-4651-8b08-c94806af8121\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; fullJustify(vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; &amp;words, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> L) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, i, j, k, l;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>, j = <span style=\"color: #800080;\">0</span>; j &lt; words.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(i &lt;<span style=\"color: #000000;\"> words.size())\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 cnt +=<span style=\"color: #000000;\"> words[i].length();\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">if</span>(i == j) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">if</span>(i == words.size() || (L - cnt) / (i - j) &lt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">int</span> blank = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>                 <span style=\"color: #0000ff;\">if</span>(i &lt; words.size()) blank = (i - j - <span style=\"color: #800080;\">1</span>) ? (L - cnt + words[i].length()) / (i - j - <span style=\"color: #800080;\">1</span>) : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>                 <span style=\"color: #0000ff;\">string</span> tmp = <span style=\"color: #800000;\">\"\"</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>                 l = i &lt; words.size() ? (L - cnt + words[i].length() - blank * (i - j - <span style=\"color: #800080;\">1</span>)) : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>                 <span style=\"color: #0000ff;\">for</span>(k = j; k &lt; i; k ++, l --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">21</span>                     tmp +=<span style=\"color: #000000;\"> words[k];\n</span><span style=\"color: #008080;\">22</span>                     <span style=\"color: #0000ff;\">if</span>(k != i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">24</span>                         <span style=\"color: #0000ff;\">if</span>(i !=<span style=\"color: #000000;\"> words.size())\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">                        {\n</span><span style=\"color: #008080;\">26</span>                             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> bl = <span style=\"color: #800080;\">0</span>; bl &lt; blank; bl ++) tmp += <span style=\"color: #800000;\">\"</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span>                             <span style=\"color: #0000ff;\">if</span>(l &gt; <span style=\"color: #800080;\">0</span>) tmp += <span style=\"color: #800000;\">\"</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">                        }\n</span><span style=\"color: #008080;\">29</span>                         <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">30</span>                             tmp += <span style=\"color: #800000;\">\"</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">33</span>                 <span style=\"color: #0000ff;\">while</span>(tmp.length() &lt; L) tmp += <span style=\"color: #800000;\">\"</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">                ans.push_back(tmp);\n</span><span style=\"color: #008080;\">35</span>                 cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">36</span>                 j =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">37</span>                 i --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">40</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">42</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/plus-one/\">Plus One</a></h3>\n<p>\u5927\u6574\u6570\u52a0\u6cd5\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('43c210e8-bfea-4e8a-8525-b99cf0daea6f')\"><img id=\"code_img_closed_43c210e8-bfea-4e8a-8525-b99cf0daea6f\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_43c210e8-bfea-4e8a-8525-b99cf0daea6f\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('43c210e8-bfea-4e8a-8525-b99cf0daea6f',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_43c210e8-bfea-4e8a-8525-b99cf0daea6f\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; plusOne(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">digits) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cur, i;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(digits.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> digits;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(i = digits.size() - <span style=\"color: #800080;\">1</span>, cur = <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">int</span> tmp = digits[i] +<span style=\"color: #000000;\"> cur;\n</span><span style=\"color: #008080;\"> 9</span>             cur = tmp / <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>             digits[i] = tmp % <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(cur) digits.insert(digits.begin(), cur);\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> digits;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/valid-number/\"><span style=\"color: #ff0000;\">Valid Number</span></a></span></h3>\n<p>\u7528DFA\u4e5f\u4e0d\u9ebb\u70e6\uff0c\u9898\u76ee\u5b9a\u4e49\u592a\u6a21\u7cca\uff0c\u4e3a\u4e86\u7406\u89e3\u89c4\u5219\u9519\u5f88\u591a\u6b21\u4e5f\u6ca1\u529e\u6cd5\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('11eed151-4e2d-4338-b7b3-44e4b6bbee9e')\"><img id=\"code_img_closed_11eed151-4e2d-4338-b7b3-44e4b6bbee9e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_11eed151-4e2d-4338-b7b3-44e4b6bbee9e\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('11eed151-4e2d-4338-b7b3-44e4b6bbee9e',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_11eed151-4e2d-4338-b7b3-44e4b6bbee9e\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span> \n<span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">int</span> f[<span style=\"color: #800080;\">11</span>][<span style=\"color: #800080;\">129</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> fail = -<span style=\"color: #800080;\">1</span>;    <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u975e\u6cd5</span>\n<span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> st = <span style=\"color: #800080;\">0</span>;       <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8d77\u59cb</span>\n<span style=\"color: #008080;\"> 7</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> pn = <span style=\"color: #800080;\">1</span>;       <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6b63\u8d1f\u53f7</span>\n<span style=\"color: #008080;\"> 8</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> di = <span style=\"color: #800080;\">2</span>;       <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6574\u6570\u90e8\u5206</span>\n<span style=\"color: #008080;\"> 9</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> del = <span style=\"color: #800080;\">3</span>;      <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u524d\u9762\u65e0\u6570\u5b57\u5c0f\u6570\u70b9</span>\n<span style=\"color: #008080;\">10</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> ddi = <span style=\"color: #800080;\">4</span>;      <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5c0f\u6570\u90e8\u5206</span>\n<span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> ndel = <span style=\"color: #800080;\">5</span>;     <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u524d\u9762\u6709\u6570\u5b57\u5c0f\u6570\u70b9</span>\n<span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> dibl = <span style=\"color: #800080;\">6</span>;     <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6570\u540e\u7a7a\u683c</span>\n<span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> ex = <span style=\"color: #800080;\">7</span>;       <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8fdb\u5165\u6307\u6570</span>\n<span style=\"color: #008080;\">14</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> epn = <span style=\"color: #800080;\">8</span>;      <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6307\u6570\u7b26\u53f7</span>\n<span style=\"color: #008080;\">15</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> edi = <span style=\"color: #800080;\">9</span>;      <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6307\u6570\u6570\u5b57</span>\n<span style=\"color: #008080;\">16</span>     <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> end = <span style=\"color: #800080;\">10</span>;     <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6b63\u786e\u7ed3\u675f</span>\n<span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> buildDFA()\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">19</span>         memset(f, -<span style=\"color: #800080;\">1</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(f));\n</span><span style=\"color: #008080;\">20</span>         f[st][<span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>] =<span style=\"color: #000000;\"> st;\n</span><span style=\"color: #008080;\">21</span>         f[st][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">+</span><span style=\"color: #800000;\">'</span>] = f[st][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">-</span><span style=\"color: #800000;\">'</span>] =<span style=\"color: #000000;\"> pn;\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span>; i &lt;= <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">9</span><span style=\"color: #800000;\">'</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">24</span>             f[st][i] = f[pn][i] = f[di][i] =<span style=\"color: #000000;\"> di;\n</span><span style=\"color: #008080;\">25</span>             f[del][i] = f[ndel][i] = f[ddi][i] =<span style=\"color: #000000;\"> ddi;\n</span><span style=\"color: #008080;\">26</span>             f[ex][i] = f[epn][i] = f[edi][i] =<span style=\"color: #000000;\"> edi;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">28</span>         f[di][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span>] =<span style=\"color: #000000;\"> ndel;\n</span><span style=\"color: #008080;\">29</span>         f[st][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span>] = f[pn][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span>] =<span style=\"color: #000000;\"> del;\n</span><span style=\"color: #008080;\">30</span>         f[di][<span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>] = f[ndel][<span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>] = f[ddi][<span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>] = f[dibl][<span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>] = f[edi][<span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>] =<span style=\"color: #000000;\"> dibl;\n</span><span style=\"color: #008080;\">31</span>         f[di][<span style=\"color: #800080;\">0</span>] = f[ndel][<span style=\"color: #800080;\">0</span>] = f[dibl][<span style=\"color: #800080;\">0</span>] = f[ddi][<span style=\"color: #800080;\">0</span>] = f[edi][<span style=\"color: #800080;\">0</span>] =<span style=\"color: #000000;\"> end;\n</span><span style=\"color: #008080;\">32</span>         f[di][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">e</span><span style=\"color: #800000;\">'</span>] = f[ndel][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">e</span><span style=\"color: #800000;\">'</span>] = f[ddi][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">e</span><span style=\"color: #800000;\">'</span>] =<span style=\"color: #000000;\"> ex;\n</span><span style=\"color: #008080;\">33</span>         f[ex][<span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>] =<span style=\"color: #000000;\"> ex;\n</span><span style=\"color: #008080;\">34</span>         f[ex][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">+</span><span style=\"color: #800000;\">'</span>] = f[ex][<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">-</span><span style=\"color: #800000;\">'</span>] =<span style=\"color: #000000;\"> epn;\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">36</span>     <span style=\"color: #0000ff;\">bool</span> DFA(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">s)\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">38</span>         <span style=\"color: #0000ff;\">int</span> situ =<span style=\"color: #000000;\"> st;\n</span><span style=\"color: #008080;\">39</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>;; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">40</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">41</span>             situ =<span style=\"color: #000000;\"> f[situ][s[i]];\n</span><span style=\"color: #008080;\">42</span>             <span style=\"color: #0000ff;\">if</span>(situ == end) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">43</span>             <span style=\"color: #0000ff;\">if</span>(situ == fail) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">45</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">46</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">47</span>     <span style=\"color: #0000ff;\">bool</span> isNumber(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">s) {\n</span><span style=\"color: #008080;\">48</span> <span style=\"color: #000000;\">        buildDFA();\n</span><span style=\"color: #008080;\">49</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> DFA(s);\n</span><span style=\"color: #008080;\">50</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">51</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/add-binary/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Add Binary</span></a></p>\n<p>\u7ffb\u8f6c\uff0c\u5927\u6574\u6570\u52a0\u6cd5\uff0c\u518d\u7ffb\u8f6c\u3002\u65e0\u5fc3\u60c5\u4f18\u5316\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('07802114-4713-4b55-b936-d9e4af6373dc')\"><img id=\"code_img_closed_07802114-4713-4b55-b936-d9e4af6373dc\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_07802114-4713-4b55-b936-d9e4af6373dc\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('07802114-4713-4b55-b936-d9e4af6373dc',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_07802114-4713-4b55-b936-d9e4af6373dc\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span> addBinary(<span style=\"color: #0000ff;\">string</span> a, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> b) {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">        reverse(a.begin(), a.end());\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">        reverse(b.begin(), b.end());\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> c;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">int</span> cur = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, i;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; min(a.length(), b.length()); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">int</span> tmp = a[i] - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span> + b[i] - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span> +<span style=\"color: #000000;\"> cur;\n</span><span style=\"color: #008080;\">11</span>             cur = tmp &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>             c += (tmp &amp; <span style=\"color: #800080;\">1</span>) + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">string</span> &amp;t = a.length() &gt; b.length() ?<span style=\"color: #000000;\"> a : b;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">for</span>(; i &lt; t.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">int</span> tmp = t[i] - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span> +<span style=\"color: #000000;\"> cur;\n</span><span style=\"color: #008080;\">18</span>             cur = tmp &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>             c += (tmp &amp; <span style=\"color: #800080;\">1</span>) + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">if</span>(cur) c += <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        reverse(c.begin(), c.end());\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> c;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">25</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/merge-two-sorted-lists/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span id=\"2KSFindDIV\" class=\"KSFIND_CLASS\">Merge Two</span> Sorted Lists</span></a></p>\n<p>\u5f52\u5e76\u6392\u5e8f\u7684\u4e00\u6b21\u64cd\u4f5c\uff0c\u8bbe\u4e2a\u54e8\u5175\u5934\u7ed3\u70b9\uff0c\u7ed3\u675f\u540efree\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('d81ed6d6-9055-4953-81d1-efae5ceaea80')\"><img id=\"code_img_closed_d81ed6d6-9055-4953-81d1-efae5ceaea80\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_d81ed6d6-9055-4953-81d1-efae5ceaea80\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('d81ed6d6-9055-4953-81d1-efae5ceaea80',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_d81ed6d6-9055-4953-81d1-efae5ceaea80\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *mergeTwoLists(ListNode *l1, ListNode *<span style=\"color: #000000;\">l2) {\n</span><span style=\"color: #008080;\">12</span>         ListNode *thead = <span style=\"color: #0000ff;\">new</span> ListNode(<span style=\"color: #800080;\">0</span>), *p =<span style=\"color: #000000;\"> thead;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">while</span>(l1 != NULL &amp;&amp; l2 !=<span style=\"color: #000000;\"> NULL)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">if</span>(l1-&gt;val &lt; l2-&gt;val) p-&gt;next = l1, p = l1, l1 = l1-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">else</span> p-&gt;next = l2, p = l2, l2 = l2-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">while</span>(l1 != NULL) p-&gt;next = l1, p = l1, l1 = l1-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">while</span>(l2 != NULL) p-&gt;next = l2, p = l2, l2 = l2-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">20</span>         p = thead-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        free(thead);\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/minimum-path-sum/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Minimum Path Sum</span></a></p>\n<p>\u9012\u63a8</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('cece7e70-a54c-440a-8a9b-c236491f43f1')\"><img id=\"code_img_closed_cece7e70-a54c-440a-8a9b-c236491f43f1\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_cece7e70-a54c-440a-8a9b-c236491f43f1\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('cece7e70-a54c-440a-8a9b-c236491f43f1',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_cece7e70-a54c-440a-8a9b-c236491f43f1\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> minPathSum(vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &amp;<span style=\"color: #000000;\">grid) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(grid.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; grid.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; grid[<span style=\"color: #800080;\">0</span>].size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 9</span>                 <span style=\"color: #0000ff;\">int</span> tmp = <span style=\"color: #800080;\">0x3f3f3f3f</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>                 <span style=\"color: #0000ff;\">if</span>(i &gt; <span style=\"color: #800080;\">0</span>) tmp = min(tmp, grid[i][j] + grid[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][j]);\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">if</span>(j &gt; <span style=\"color: #800080;\">0</span>) tmp = min(tmp, grid[i][j] + grid[i][j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">12</span>                 grid[i][j] = tmp == <span style=\"color: #800080;\">0x3f3f3f3f</span> ?<span style=\"color: #000000;\"> grid[i][j] : tmp;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">return</span> grid[grid.size() - <span style=\"color: #800080;\">1</span>][grid[<span style=\"color: #800080;\">0</span>].size() - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">17</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/unique-paths-ii/\">Unique Paths II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u9012\u63a8</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('bae21997-8541-47b2-a3b2-8b16c001e4c7')\"><img id=\"code_img_closed_bae21997-8541-47b2-a3b2-8b16c001e4c7\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_bae21997-8541-47b2-a3b2-8b16c001e4c7\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('bae21997-8541-47b2-a3b2-8b16c001e4c7',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_bae21997-8541-47b2-a3b2-8b16c001e4c7\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> uniquePathsWithObstacles(vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &amp;<span style=\"color: #000000;\">obstacleGrid) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(obstacleGrid.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         obstacleGrid[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span>] = obstacleGrid[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span>] != <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; obstacleGrid.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; obstacleGrid[<span style=\"color: #800080;\">0</span>].size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 9</span>                 <span style=\"color: #0000ff;\">if</span>(i == <span style=\"color: #800080;\">0</span> &amp;&amp; j == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>                 <span style=\"color: #0000ff;\">if</span>(obstacleGrid[i][j] == <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) \n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">12</span>                     obstacleGrid[i][j] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>                     <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">if</span>(i &gt; <span style=\"color: #800080;\">0</span>) obstacleGrid[i][j] += obstacleGrid[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][j];\n</span><span style=\"color: #008080;\">16</span>                 <span style=\"color: #0000ff;\">if</span>(j &gt; <span style=\"color: #800080;\">0</span>) obstacleGrid[i][j] += obstacleGrid[i][j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">return</span> obstacleGrid[obstacleGrid.size() - <span style=\"color: #800080;\">1</span>][obstacleGrid[<span style=\"color: #800080;\">0</span>].size() - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">20</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/unique-paths/\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Unique Paths</span></span></span></a></p>\n<p>\u8fd9\u662f\u5f53\u5e74\u5b66\u7ec4\u5408\u6570\u65f6\u5019\u7684\u7ecf\u5178\u9898\u578b\u5427\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('e3f79751-76cc-47b4-bf81-2f50bab7f1f9')\"><img id=\"code_img_closed_e3f79751-76cc-47b4-bf81-2f50bab7f1f9\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_e3f79751-76cc-47b4-bf81-2f50bab7f1f9\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('e3f79751-76cc-47b4-bf81-2f50bab7f1f9',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_e3f79751-76cc-47b4-bf81-2f50bab7f1f9\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> COM(<span style=\"color: #0000ff;\">int</span> a, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 5</span>         b = min(b, a -<span style=\"color: #000000;\"> b);\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">int</span> ret = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, i, j;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(i = a, j = <span style=\"color: #800080;\">1</span>; i &gt; a - b; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             ret *=<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">for</span>(; j &lt;= b &amp;&amp; ret % j == <span style=\"color: #800080;\">0</span>; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span>                 ret /=<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ret;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span>     <span style=\"color: #0000ff;\">int</span> uniquePaths(<span style=\"color: #0000ff;\">int</span> m, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span> COM(m + n - <span style=\"color: #800080;\">2</span>, m - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/rotate-list/\">Rotate List</a></h3>\n<p>\u56e0\u4e3ak\u53ef\u80fd\u6bd4\u957f\u5ea6\u5927\uff0c\u9700\u8981\u6c42\u957f\u5ea6\u7136\u540ek\u5bf9\u957f\u5ea6\u53d6\u6a21\u3002\u90a3\u4e48\u5c31\u4e0d\u8981\u77eb\u60c5\u5730\u8ffd\u6c42\u53cc\u6307\u9488\u4e00\u904d\u626b\u63cf\u4e86\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b0979555-f067-4e36-9bd3-0f9468d514c3')\"><img id=\"code_img_closed_b0979555-f067-4e36-9bd3-0f9468d514c3\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b0979555-f067-4e36-9bd3-0f9468d514c3\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b0979555-f067-4e36-9bd3-0f9468d514c3',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b0979555-f067-4e36-9bd3-0f9468d514c3\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *rotateRight(ListNode *head, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> k) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(head == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cnt;\n</span><span style=\"color: #008080;\">14</span>         ListNode *en, *<span style=\"color: #000000;\">p;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">for</span>(cnt = <span style=\"color: #800080;\">1</span>, en = head; en-&gt;next != NULL; cnt ++, en = en-&gt;<span style=\"color: #000000;\">next);\n</span><span style=\"color: #008080;\">16</span>         k %=<span style=\"color: #000000;\"> cnt;\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">for</span>(p = head, cnt --; cnt != k; cnt --, p = p-&gt;<span style=\"color: #000000;\">next);\n</span><span style=\"color: #008080;\">18</span>         en-&gt;next =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">19</span>         en = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">20</span>         p-&gt;next =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> en;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/permutation-sequence/\"><span style=\"color: #ff0000;\">Permutation Sequence</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u4e00\u4f4d\u4e00\u4f4d\u7b97\uff0c\u6bcf\u4e00\u4f4d\u4f18\u5148\u6ca1\u4f7f\u7528\u8fc7\u7684\u8f83\u5c0f\u7684\u6570\u5b57\uff0c\u800c\u5176\u540e\u5269\u4e0b\u7684m\u4e2a\u4f4d\u7f6e\u6709 m! \u79cd\u6392\u5217\u65b9\u6cd5\uff0c\u7528 k \u51cf\u53bb\uff0c\u76f4\u5230k\u4e0d\u5927\u4e8e\u8fd9\u4e2a\u65b9\u6cd5\u6570\uff0c\u5219\u8fd9\u4e00\u4f4d\u5c31\u662f\u679a\u4e3e\u5230\u7684\u8fd9\u4e2a\u6570\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('249850ff-aab9-4daf-997f-946f316a5dfd')\"><img id=\"code_img_closed_249850ff-aab9-4daf-997f-946f316a5dfd\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_249850ff-aab9-4daf-997f-946f316a5dfd\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('249850ff-aab9-4daf-997f-946f316a5dfd',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_249850ff-aab9-4daf-997f-946f316a5dfd\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> permu[<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">bool</span> vis[<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">string</span> getPermutation(<span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> k) {\n</span><span style=\"color: #008080;\"> 6</span>         permu[<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; <span style=\"color: #800080;\">10</span>; i ++) permu[i] = permu[i - <span style=\"color: #800080;\">1</span>] *<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\"> 8</span>         memset(vis, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(vis));\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt;= n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">1</span>; j &lt;= n; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">vis[j])\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">16</span>                     <span style=\"color: #0000ff;\">if</span>(k &gt; permu[n - i]) k -= permu[n -<span style=\"color: #000000;\"> i];\n</span><span style=\"color: #008080;\">17</span>                     <span style=\"color: #0000ff;\">else</span> {ans += <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span> + j; vis[j] = <span style=\"color: #0000ff;\">true</span>; <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/spiral-matrix-ii/\"><span style=\"color: #ff0000;\">Spiral Matrix II</span></a></span></h3>\n<p>\u76f4\u63a5\u7b97\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6570\u662f\u591a\u5c11\u6709\u6728\u6709\u5f88\u9738\u6c14<img src=\"http://images.cnitblog.com/i/441540/201402/272135057726583.gif\" alt=\"\" /></p>\n<p>\u5148\u770b\u5f53\u524d\u4f4d\u7f6e\u4e4b\u5916\u6709\u51e0\u4e2a\u5d4c\u5957\u7684\u6b63\u65b9\u5f62\uff0c\u518d\u770b\u5f53\u524d\u4f4d\u7f6e\u5728\u5f53\u524d\u6b63\u65b9\u5f62\u56db\u6761\u8fb9\u7684\u7b2c\u51e0\u6761\uff0c\u6c42\u51fa\u5750\u6807(x,y)\u4f4d\u7f6e\u7684\u6570\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('bc1bc91f-68dd-4c49-950e-5389ef941e7a')\"><img id=\"code_img_closed_bc1bc91f-68dd-4c49-950e-5389ef941e7a\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_bc1bc91f-68dd-4c49-950e-5389ef941e7a\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('bc1bc91f-68dd-4c49-950e-5389ef941e7a',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_bc1bc91f-68dd-4c49-950e-5389ef941e7a\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> nsq;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span> calnum(<span style=\"color: #0000ff;\">int</span> i, <span style=\"color: #0000ff;\">int</span> j, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> num, tmp;\n</span><span style=\"color: #008080;\"> 8</span>         tmp = min(min(i, j), min(n - <span style=\"color: #800080;\">1</span> - i, n - <span style=\"color: #800080;\">1</span> -<span style=\"color: #000000;\"> j));\n</span><span style=\"color: #008080;\"> 9</span>         num =<span style=\"color: #000000;\"> nsq[tmp];\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">if</span>(i == tmp) <span style=\"color: #0000ff;\">return</span> num + j - tmp + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">if</span>(n - j - <span style=\"color: #800080;\">1</span> == tmp) <span style=\"color: #0000ff;\">return</span> num + n - <span style=\"color: #800080;\">2</span> * tmp + i -<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(n - i - <span style=\"color: #800080;\">1</span> == tmp) <span style=\"color: #0000ff;\">return</span> num + <span style=\"color: #800080;\">2</span> * (n - <span style=\"color: #800080;\">2</span> * tmp) - <span style=\"color: #800080;\">2</span> + n - j -<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span> num + <span style=\"color: #800080;\">3</span> * (n - <span style=\"color: #800080;\">2</span> * tmp) - <span style=\"color: #800080;\">3</span> + n - i -<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; generateMatrix(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">16</span>         nsq.push_back(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = n; i &gt; <span style=\"color: #800080;\">0</span>; i -= <span style=\"color: #800080;\">2</span>) nsq.push_back(<span style=\"color: #800080;\">4</span> * i - <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; nsq.size(); i ++) nsq[i] += nsq[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">21</span>             vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; n; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">                tmp.push_back(calnum(i, j, n));\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">            res.push_back(tmp);\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">30</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/length-of-last-word/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Length of Last Word</span>&nbsp;</a></p>\n<p>&nbsp;\u4ece\u540e\u5f80\u524d\u627e\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('333b00f3-5b4e-413c-91d4-c00de16516ec')\"><img id=\"code_img_closed_333b00f3-5b4e-413c-91d4-c00de16516ec\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_333b00f3-5b4e-413c-91d4-c00de16516ec\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('333b00f3-5b4e-413c-91d4-c00de16516ec',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_333b00f3-5b4e-413c-91d4-c00de16516ec\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">3</span>     <span style=\"color: #0000ff;\">int</span> lengthOfLastWord(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">s) {\n</span><span style=\"color: #008080;\">4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\">5</span>         <span style=\"color: #0000ff;\">for</span>(i = strlen(s) - <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; s[i] == <span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>; i --<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">6</span>         <span style=\"color: #0000ff;\">for</span>(j = i - <span style=\"color: #800080;\">1</span>; j &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; s[j] != <span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>; j --<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">7</span>         <span style=\"color: #0000ff;\">return</span> i &lt; <span style=\"color: #800080;\">0</span> ? <span style=\"color: #800080;\">0</span> : i -<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">8</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">9</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/insert-interval/\"><span style=\"color: #ff0000;\">Insert Interval</span></a></span></h3>\n<p>end \u6bd4 newInterval \u7684 start \u5c0f\u7684 intervals \u76f4\u63a5\u63d2\u5165\uff0c\u4ece end \u6bd4 newInterval \u7684 start \u5927\u7684 intervals \u5f00\u59cb\uff0c\u5230 start \u6bd4 newInterval \u7684 end \u5927\u7684 intervals \u7ed3\u675f\uff0c\u5bf9\u8fd9\u90e8\u5206\u533a\u95f4\u5408\u5e76\uff0c\u518d\u628a\u4e4b\u540e\u7684 intervals\u76f4\u63a5\u63d2\u5165\uff0c\u7279\u5224 newInterval \u6700\u5c0f\u548c\u6700\u5927\u4e24\u79cd\u6781\u7aef\u60c5\u51b5\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('3821d185-8dc7-4753-b5db-a55f279ae9a6')\"><img id=\"code_img_closed_3821d185-8dc7-4753-b5db-a55f279ae9a6\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_3821d185-8dc7-4753-b5db-a55f279ae9a6\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('3821d185-8dc7-4753-b5db-a55f279ae9a6',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_3821d185-8dc7-4753-b5db-a55f279ae9a6\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for an interval.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct Interval {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int start;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     int end;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     Interval() : start(0), end(0) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     Interval(int s, int e) : start(s), end(e) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     vector&lt;Interval&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">13</span>     vector&lt;Interval&gt; insert(vector&lt;Interval&gt; &amp;<span style=\"color: #000000;\">intervals, Interval newInterval) {\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(intervals.size() == <span style=\"color: #800080;\">0</span>) {res.push_back(newInterval); <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;}\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; intervals.size() &amp;&amp; newInterval.start &gt; intervals[i].end; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            res.push_back(intervals[i]);\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">for</span>(j = i; j &lt; intervals.size() &amp;&amp; newInterval.end &gt;= intervals[j].start; j ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">if</span>(j != <span style=\"color: #800080;\">0</span> &amp;&amp; i !=<span style=\"color: #000000;\"> intervals.size()) \n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            res.push_back(Interval(min(intervals[i].start, newInterval.start),\n</span><span style=\"color: #008080;\">21</span>                                 max(intervals[j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].end, newInterval.end)));\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">            res.push_back(newInterval);\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">for</span>(; j &lt; intervals.size(); j ++<span style=\"color: #000000;\">) res.push_back(intervals[j]);\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/merge-intervals/\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Merge Intervals</span></span></span></span></span></a></p>\n<p>\u5148\u6309start\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u6162\u6162\u5408\u5e76\u3002\u3002\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('444b8874-7fa9-4e72-a94f-1da8df1436fa')\"><img id=\"code_img_closed_444b8874-7fa9-4e72-a94f-1da8df1436fa\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_444b8874-7fa9-4e72-a94f-1da8df1436fa\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('444b8874-7fa9-4e72-a94f-1da8df1436fa',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_444b8874-7fa9-4e72-a94f-1da8df1436fa\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for an interval.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct Interval {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int start;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     int end;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     Interval() : start(0), end(0) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> *     Interval(int s, int e) : start(s), end(e) {}\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">12</span>     vector&lt;Interval&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">bool</span> cxompp(<span style=\"color: #0000ff;\">const</span> Interval &amp;a, <span style=\"color: #0000ff;\">const</span> Interval &amp;<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\">14</span>     {<span style=\"color: #0000ff;\">return</span> a.start &lt;<span style=\"color: #000000;\"> b.start;}\n</span><span style=\"color: #008080;\">15</span>     vector&lt;Interval&gt; merge(vector&lt;Interval&gt; &amp;<span style=\"color: #000000;\">intervals) {\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">if</span>(intervals.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        sort(intervals.begin(), intervals.end(), cxompp);\n</span><span style=\"color: #008080;\">18</span>         Interval last = intervals[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; intervals.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">if</span>(last.end &gt;=<span style=\"color: #000000;\"> intervals[i].start)\n</span><span style=\"color: #008080;\">22</span>                 last.end =<span style=\"color: #000000;\"> max(last.end, intervals[i].end);\n</span><span style=\"color: #008080;\">23</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">24</span>                 res.push_back(last), last =<span style=\"color: #000000;\"> intervals[i];\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">        res.push_back(last);\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">29</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/jump-game/\">Jump Game</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u7ef4\u62a4\u6700\u5927\u53ef\u8df3\u8ddd\u79bb\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u679a\u4e3e\u4e00\u6b21\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c6c47789-6b77-4bb5-a2b4-ff2484b51fe3')\"><img id=\"code_img_closed_c6c47789-6b77-4bb5-a2b4-ff2484b51fe3\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_c6c47789-6b77-4bb5-a2b4-ff2484b51fe3\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('c6c47789-6b77-4bb5-a2b4-ff2484b51fe3',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_c6c47789-6b77-4bb5-a2b4-ff2484b51fe3\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> canJump(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(n == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, jumpdis;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(i = jumpdis = <span style=\"color: #800080;\">0</span>; i &lt; n &amp;&amp; jumpdis &gt;= <span style=\"color: #800080;\">0</span>; i ++, jumpdis --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span>             jumpdis =<span style=\"color: #000000;\"> max(A[i], jumpdis);\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">return</span> i ==<span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">10</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/spiral-matrix/\">Spiral Matrix</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u6a21\u62df\u8f6c\u4e00\u904d\u5427\u3002\u5199\u4e86\u4fe9\u4ee3\u7801\uff0c\u5dee\u4e0d\u591a\uff0c\u5904\u7406\u62d0\u5f2f\u7684\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4ee3\u7801\u4e00\uff1a</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8afb3894-b02d-49ba-9fb8-2f86fd6746f2')\"><img id=\"code_img_closed_8afb3894-b02d-49ba-9fb8-2f86fd6746f2\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8afb3894-b02d-49ba-9fb8-2f86fd6746f2\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8afb3894-b02d-49ba-9fb8-2f86fd6746f2',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8afb3894-b02d-49ba-9fb8-2f86fd6746f2\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> dx[<span style=\"color: #800080;\">4</span>] = {<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span>, -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">int</span> dy[<span style=\"color: #800080;\">4</span>] = {<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span>, -<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 5</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">bool</span> JudgeValid(<span style=\"color: #0000ff;\">int</span> x, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> y, \n</span><span style=\"color: #008080;\"> 7</span>         vector&lt;vector&lt;<span style=\"color: #0000ff;\">bool</span>&gt; &gt; &amp;vis, vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &amp;<span style=\"color: #000000;\">matrix)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">return</span> x &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; x &lt; matrix.size() &amp;&amp; \n<span style=\"color: #008080;\">10</span>             y &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; y &lt; matrix[<span style=\"color: #800080;\">0</span>].size() &amp;&amp; vis[x][y] == <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">12</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; spiralOrder(vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &amp;<span style=\"color: #000000;\">matrix) {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> dir, x, y, nx, ny;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">if</span>(matrix.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res; \n</span><span style=\"color: #008080;\">15</span>         vector&lt;vector&lt;<span style=\"color: #0000ff;\">bool</span>&gt; &gt; vis(matrix.size(), vector&lt;<span style=\"color: #0000ff;\">bool</span>&gt;(matrix[<span style=\"color: #800080;\">0</span>].size(), <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">for</span>(dir = x = y = <span style=\"color: #800080;\">0</span>; JudgeValid(x, y, vis, matrix); x = nx, y =<span style=\"color: #000000;\"> ny)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">            res.push_back(matrix[x][y]);\n</span><span style=\"color: #008080;\">19</span>             vis[x][y] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span>             nx = x +<span style=\"color: #000000;\"> dx[dir];\n</span><span style=\"color: #008080;\">21</span>             ny = y +<span style=\"color: #000000;\"> dy[dir];\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">JudgeValid(nx, ny, vis, matrix))\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">24</span>                 dir = (dir + <span style=\"color: #800080;\">1</span>) % <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span>                 nx = x +<span style=\"color: #000000;\"> dx[dir];\n</span><span style=\"color: #008080;\">26</span>                 ny = y +<span style=\"color: #000000;\"> dy[dir];\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">29</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">31</span> };            </pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4ee3\u7801\u4e8c\uff1a</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('9eddffb4-c64e-433d-9105-f862ad51d08e')\"><img id=\"code_img_closed_9eddffb4-c64e-433d-9105-f862ad51d08e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_9eddffb4-c64e-433d-9105-f862ad51d08e\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('9eddffb4-c64e-433d-9105-f862ad51d08e',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_9eddffb4-c64e-433d-9105-f862ad51d08e\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> dx[<span style=\"color: #800080;\">4</span>] = {<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span>, -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">int</span> dy[<span style=\"color: #800080;\">4</span>] = {<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span>, -<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 5</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 6</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; spiralOrder(vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &amp;<span style=\"color: #000000;\">matrix) {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> dir, x, y, nx, ny;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> l, r, u, d;\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">if</span>(matrix.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res; \n</span><span style=\"color: #008080;\">10</span>         l = u = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>         r = matrix[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].size();\n</span><span style=\"color: #008080;\">12</span>         d =<span style=\"color: #000000;\"> matrix.size();\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(dir = x = y = <span style=\"color: #800080;\">0</span>; res.size() &lt; matrix.size() * matrix[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].size(); \n</span><span style=\"color: #008080;\">14</span>             x = nx, y =<span style=\"color: #000000;\"> ny)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            res.push_back(matrix[x][y]);\n</span><span style=\"color: #008080;\">17</span>             nx = x +<span style=\"color: #000000;\"> dx[dir];\n</span><span style=\"color: #008080;\">18</span>             ny = y +<span style=\"color: #000000;\"> dy[dir];\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">if</span>(nx == d || nx == u || ny == r || ny ==<span style=\"color: #000000;\"> l)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">21</span>                 dir = (dir + <span style=\"color: #800080;\">1</span>) % <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">22</span>                 <span style=\"color: #0000ff;\">if</span>(dir == <span style=\"color: #800080;\">0</span>) l ++, r --, d --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span>                 <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(dir == <span style=\"color: #800080;\">3</span>) u ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>                 nx = x +<span style=\"color: #000000;\"> dx[dir];\n</span><span style=\"color: #008080;\">25</span>                 ny = y +<span style=\"color: #000000;\"> dy[dir];\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">30</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/maximum-subarray/\">Maximum Subarray</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u6700\u5927\u5b50\u4e32\u548c\uff0c\u5b50\u4e32\u8981\u6c42\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4e00\u4e2a\u53d8\u91cf sum \u8868\u793a\u5f53\u524d\u6c42\u5f97\u7684\u5b50\u4e32\u548c\uff0c\u5f53 sum \u5c0f\u4e8e0\u65f6\uff0c\u5bf9\u540e\u9762\u7684\u5b50\u4e32\u6ca1\u6709\u8d21\u732e\uff0c\u5219\u628a sum \u7f6e\u96f6\uff0c\u4e2d\u95f4\u5904\u7406\u4e00\u4e0b\u8981\u6c42\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u7684\u8981\u6c42\u5373\u53ef\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('999840fb-a30c-4dc1-a27c-a0ae54ea0318')\"><img id=\"code_img_closed_999840fb-a30c-4dc1-a27c-a0ae54ea0318\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_999840fb-a30c-4dc1-a27c-a0ae54ea0318\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('999840fb-a30c-4dc1-a27c-a0ae54ea0318',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_999840fb-a30c-4dc1-a27c-a0ae54ea0318\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> maxSubArray(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> ans = A[<span style=\"color: #800080;\">0</span>], sum = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             sum +=<span style=\"color: #000000;\"> A[i];\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(sum &lt; <span style=\"color: #800080;\">0</span>) sum = <span style=\"color: #800080;\">0</span>, ans =<span style=\"color: #000000;\"> max(ans, A[i]);\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">else</span> ans =<span style=\"color: #000000;\"> max(ans, sum);\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">13</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/n-queens-ii/\">N-Queens II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u9898\u76ee\u6ca1\u8bf4 n \u7684\u53d6\u503c\u8303\u56f4\uff0c\u5c31\u4e0d\u7528 \u4f4d\u8fd0\u7b97 \u505a\u6807\u8bb0\u4e86\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u8001\u8001\u5b9e\u5b9e\u5f00\u4e09\u4e2a bool \u6570\u7ec4\uff0c\u4e00\u4e2a\u6807\u8bb0\u7eb5\u5217\uff0c\u53e6\u5916\u4e24\u4e2a\u6807\u8bb0\u4e24\u4e2a\u659c\u5217\uff0c\u4e00\u884c\u4e00\u884cDFS\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('12f59f49-7a25-4863-9668-5fd75fc817dc')\"><img id=\"code_img_closed_12f59f49-7a25-4863-9668-5fd75fc817dc\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_12f59f49-7a25-4863-9668-5fd75fc817dc\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('12f59f49-7a25-4863-9668-5fd75fc817dc',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_12f59f49-7a25-4863-9668-5fd75fc817dc\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">bool</span>&gt;<span style=\"color: #000000;\"> col, lc, rc;\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">int</span> cur, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(cur ==<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             ans ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">if</span>(!col[i] &amp;&amp; !lc[n - cur - <span style=\"color: #800080;\">1</span> + i] &amp;&amp; !rc[cur +<span style=\"color: #000000;\"> i])\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">16</span>                 col[i] = lc[n - cur - <span style=\"color: #800080;\">1</span> + i] = rc[cur + i] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>                 DFS(cur + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, n);\n</span><span style=\"color: #008080;\">18</span>                 col[i] = lc[n - cur - <span style=\"color: #800080;\">1</span> + i] = rc[cur + i] = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">int</span> totalNQueens(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">23</span>         ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>         col.resize(n, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">25</span>         lc.resize(n &lt;&lt; <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">26</span>         rc.resize(n &lt;&lt; <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">27</span>         DFS(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, n);\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">30</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/n-queens/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">N-Queens</span></a></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u540c\u4e0a</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('c0b40da7-cd36-48fb-9986-a1d82755d553')\"><img id=\"code_img_closed_c0b40da7-cd36-48fb-9986-a1d82755d553\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_c0b40da7-cd36-48fb-9986-a1d82755d553\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('c0b40da7-cd36-48fb-9986-a1d82755d553',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_c0b40da7-cd36-48fb-9986-a1d82755d553\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; &gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 5</span>     vector&lt;<span style=\"color: #0000ff;\">bool</span>&gt;<span style=\"color: #000000;\"> col, lc, rc;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">int</span> cur, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">if</span>(cur ==<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            res.push_back(tmp);\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">string</span> now(n, <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">if</span>(!col[i] &amp;&amp; !lc[n - cur - <span style=\"color: #800080;\">1</span> + i] &amp;&amp; !rc[cur +<span style=\"color: #000000;\"> i])\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">18</span>                 col[i] = lc[n - cur - <span style=\"color: #800080;\">1</span> + i] = rc[cur + i] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>                 now[i] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">Q</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                tmp.push_back(now);\n</span><span style=\"color: #008080;\">21</span>                 DFS(cur + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, n);\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">                tmp.pop_back();\n</span><span style=\"color: #008080;\">23</span>                 now[i] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>                 col[i] = lc[n - cur - <span style=\"color: #800080;\">1</span> + i] = rc[cur + i] = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">28</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; &gt; solveNQueens(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">29</span>         col.resize(n, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">30</span>         lc.resize(n &lt;&lt; <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">31</span>         rc.resize(n &lt;&lt; <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">32</span>         DFS(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, n);\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">35</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/powx-n/\"><span style=\"color: #ff0000;\">Pow(x, n)</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5f88\u591a\u4eba\u7528\u7279\u5224\u9519\u8fc7\u4e86 n = -2147483648 \u8fd9\u4e48\u4f18\u7f8e\u7684 trick\uff0c\u800c\u4e0d\u7279\u5224\u7684\u8bdd\uff0c\u4f3c\u4e4e\u53ea\u80fd long long \u4e86\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u7ecf\u5178\u7684\u5feb\u901f\u5e42\uff0c\u7528\u4e8c\u8fdb\u5236\u7406\u89e3\u4e5f\u597d\uff0c\u7528\u6298\u534a\u7406\u89e3\u4e5f\u597d\uff0c\u7f51\u4e0a\u5f88\u591a\u8d44\u6599\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('4e7a8905-dc20-480c-b3d1-963fd1f33d1e')\"><img id=\"code_img_closed_4e7a8905-dc20-480c-b3d1-963fd1f33d1e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_4e7a8905-dc20-480c-b3d1-963fd1f33d1e\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('4e7a8905-dc20-480c-b3d1-963fd1f33d1e',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_4e7a8905-dc20-480c-b3d1-963fd1f33d1e\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">double</span> pow(<span style=\"color: #0000ff;\">double</span> x, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">double</span> res = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">long</span> <span style=\"color: #0000ff;\">long</span> nn =<span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">if</span>(nn &lt; <span style=\"color: #800080;\">0</span>) x = <span style=\"color: #800080;\">1</span> / x, nn = -<span style=\"color: #000000;\">nn;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\">(nn)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(nn &amp; <span style=\"color: #800080;\">1</span>) res *=<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">10</span>             x *=<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">11</span>             nn &gt;&gt;= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/anagrams/\"><span style=\"color: #ff0000;\">Anagrams</span></a></span></h3>\n<p>\u8fd9\u6982\u5ff5\u4ee5\u524d\u6ca1\u542c\u8fc7\u8bf6\u3002\u3002\u9898\u4e5f\u6ca1\u770b\u5230\u6837\u4f8b\uff0c\u4e0d\u77e5\u9053\u4ee5\u540e\u4f1a\u4e0d\u4f1a\u66f4\u65b0\uff0c\u7f51\u4e0a\u67e5\u4e86\u624d\u660e\u767d\u5565\u610f\u601d\u3002</p>\n<p>\u8c03\u6362\u5355\u8bcd\u5b57\u6bcd\u987a\u5e8f\u80fd\u4e00\u81f4\u7684\u5355\u8bcd\u96c6\u5408\u5168\u653e\u8fdb\u7b54\u6848\u3002\u6bd4\u5982\u6709tea, eat, aet\uff0c\u5c31\u90fd\u8981\u653e\u8fdb\u7b54\u6848\uff0c\u6709cat, atc\uff0c\u5c31\u90fd\u8981\u653e\u8fdb\u7b54\u6848\uff0c\u800c\u5982\u679c\u5b64\u96f6\u96f6\u6709\u4e2adog\uff0c\u6ca1\u5176\u4ed6\u53ef\u548c\u4ed6\u4e00\u7ec4\u7684\uff0c\u90a3\u4e48\u5c31\u4e0d\u653e\u8fdb\u7b54\u6848\u3002</p>\n<p>\u624b\u5199hash\u80fd\u66f4\u5feb\u4e9b\uff0c\u4f46\u662f\u9898\u76ee\u6ca1\u7ed9\u6570\u636e\u8303\u56f4\uff0c\u7ed9hash\u6570\u7ec4\u5b9a\u591a\u5927\u90fd\u6ca1\u5408\u7406\u6027\uff0c\u5e72\u8106\u7528unordered_map\u597d\u4e86\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('0acb0960-acb3-4f9c-8d47-e58b67428342')\"><img id=\"code_img_closed_0acb0960-acb3-4f9c-8d47-e58b67428342\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_0acb0960-acb3-4f9c-8d47-e58b67428342\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('0acb0960-acb3-4f9c-8d47-e58b67428342',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_0acb0960-acb3-4f9c-8d47-e58b67428342\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; anagrams(vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; &amp;<span style=\"color: #000000;\">strs) {\n</span><span style=\"color: #008080;\"> 5</span>         unordered_map&lt;<span style=\"color: #0000ff;\">string</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> mp;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; strs.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">string</span> tmp =<span style=\"color: #000000;\"> strs[i];\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            sort(tmp.begin(), tmp.end());\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(!mp.count(tmp)) mp[tmp] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">else</span> mp[tmp] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; strs.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">string</span> tmp =<span style=\"color: #000000;\"> strs[i];\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            sort(tmp.begin(), tmp.end());\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">if</span>(mp.count(tmp) &amp;&amp; mp[tmp] &gt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) res.push_back(strs[i]);\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">21</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/rotate-image/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Rotate Image</span></a></p>\n<p>\u56db\u4e2a\u4e00\u7ec4\uff0c\u5c31\u5730\u65cb\u8f6c\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('3c21c9f8-eccc-4b75-87c5-b8b924872e88')\"><img id=\"code_img_closed_3c21c9f8-eccc-4b75-87c5-b8b924872e88\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_3c21c9f8-eccc-4b75-87c5-b8b924872e88\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('3c21c9f8-eccc-4b75-87c5-b8b924872e88',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_3c21c9f8-eccc-4b75-87c5-b8b924872e88\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">void</span> rotate(vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; &amp;<span style=\"color: #000000;\">matrix) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(matrix.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> len =<span style=\"color: #000000;\"> matrix.size();\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">int</span> lenlimi = len + <span style=\"color: #800080;\">1</span> &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; lenlimi; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; (len &amp; <span style=\"color: #800080;\">1</span> ? lenlimi - <span style=\"color: #800080;\">1</span> : lenlimi); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 <span style=\"color: #0000ff;\">int</span> tmp =<span style=\"color: #000000;\"> matrix[i][j];\n</span><span style=\"color: #008080;\">11</span>                 matrix[i][j] = matrix[len - j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][i];\n</span><span style=\"color: #008080;\">12</span>                 matrix[len - j - <span style=\"color: #800080;\">1</span>][i] = matrix[len - i - <span style=\"color: #800080;\">1</span>][len - j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">13</span>                 matrix[len - i - <span style=\"color: #800080;\">1</span>][len - j - <span style=\"color: #800080;\">1</span>] = matrix[j][len - i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">14</span>                 matrix[j][len - i - <span style=\"color: #800080;\">1</span>] =<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">17</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/permutations-ii/\">Permutations II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u6709\u91cd\u590d\u6570\u5b57\uff0c\u628a\u6570\u5b57\u7edf\u8ba1\u8d77\u6765\u597d\u4e86\u3002\u56e0\u4e3a\u9898\u76ee\u6ca1\u8bf4\u6570\u5b57\u5927\u5c0f\uff0c\u6240\u4ee5\u7edf\u8ba1\u7528\u4e86unordered_map\u3002</span></span></span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4e5f\u53ef\u4ee5\u628a\u6570\u7ec4\u6392\u5e8f\uff0cDFS\u65f6\u8df3\u8fc7\u91cd\u590d\u7684\u6570\u5b57\u3002</span></span></span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('562ad02f-dddf-4207-a4ba-fe882d7139be')\"><img id=\"code_img_closed_562ad02f-dddf-4207-a4ba-fe882d7139be\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_562ad02f-dddf-4207-a4ba-fe882d7139be\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('562ad02f-dddf-4207-a4ba-fe882d7139be',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_562ad02f-dddf-4207-a4ba-fe882d7139be\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     unordered_map&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> mp;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 5</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> numsize;\n</span><span style=\"color: #008080;\"> 7</span>     <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cnt)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">if</span>(cnt ==<span style=\"color: #000000;\"> numsize)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            res.push_back(tmp);\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(unordered_map&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span>&gt;::iterator it = mp.begin(); it != mp.end(); it ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">if</span>(it-&gt;second != <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">17</span>                 tmp.push_back(it-&gt;<span style=\"color: #000000;\">first);\n</span><span style=\"color: #008080;\">18</span>                 it-&gt;second --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>                 DFS(cnt + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                tmp.pop_back();\n</span><span style=\"color: #008080;\">21</span>                 it-&gt;second ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">25</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; permute(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">num) {\n</span><span style=\"color: #008080;\">26</span>         numsize =<span style=\"color: #000000;\"> num.size();\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; num.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">if</span>(!mp.count(num[i])) mp[num[i]] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">30</span>             <span style=\"color: #0000ff;\">else</span> mp[num[i]] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">32</span>         DFS(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">35</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/permutations/\">Permutations</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u867d\u7136\u9898\u76ee\u6ca1\u8bf4\u6709\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u3002\u3002\u65e2\u7136 Permutations II \u8bf4\u6709\u4e86\uff0c\u90a3\u5c31\u5f53\u8fd9\u4e2a\u6ca1\u6709\u5427\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u4f20\u7edfDFS\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('82dcc67e-334b-419c-956f-5ee4c5d3e1f6')\"><img id=\"code_img_closed_82dcc67e-334b-419c-956f-5ee4c5d3e1f6\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_82dcc67e-334b-419c-956f-5ee4c5d3e1f6\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('82dcc67e-334b-419c-956f-5ee4c5d3e1f6',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_82dcc67e-334b-419c-956f-5ee4c5d3e1f6\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">int</span> cur, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">num)\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">if</span>(cur ==<span style=\"color: #000000;\"> num.size())\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">            res.push_back(num);\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = cur; i &lt; num.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            swap(num[cur], num[i]);\n</span><span style=\"color: #008080;\">14</span>             DFS(cur + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, num);\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">            swap(num[cur], num[i]);\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; permute(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">num) {\n</span><span style=\"color: #008080;\">19</span>         DFS(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, num);\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">22</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/jump-game-ii/\">Jump Game II</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u7ef4\u62a4\u4e00\u6b65\u6700\u8fdc\u5230\u8fbe\u7684\u4f4d\u7f6e\uff0c\u5230\u8fbe\u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u524d\u7684\u4f4d\u7f6e\u9700\u8981\u7684\u6b65\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5230\u8fbe\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u4e0b\u4e00\u6b65\u7684\u6700\u8fdc\u4f4d\u7f6e\u5df2\u7ecf\u66f4\u65b0\u5b8c\u6bd5\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b9b0ca3f-32a0-479c-b2b6-45ce00ce5c8f')\"><img id=\"code_img_closed_b9b0ca3f-32a0-479c-b2b6-45ce00ce5c8f\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b9b0ca3f-32a0-479c-b2b6-45ce00ce5c8f\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b9b0ca3f-32a0-479c-b2b6-45ce00ce5c8f',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b9b0ca3f-32a0-479c-b2b6-45ce00ce5c8f\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> jump(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> nex = <span style=\"color: #800080;\">0</span>, pace = <span style=\"color: #800080;\">0</span>, far = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt;= nex &amp;&amp; i &lt; n - <span style=\"color: #800080;\">1</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             far = max(far, A[i] +<span style=\"color: #000000;\"> i);\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(i ==<span style=\"color: #000000;\"> nex)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 pace ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>                 nex =<span style=\"color: #000000;\"> far;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> pace;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">16</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/wildcard-matching/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #ff0000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Wildcard Matching</span></a></span></p>\n<p>\u540c\u6b65\u626b\u63cf\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u5f53 p \u9047\u5230 '*' \uff0c\u8bb0\u5f55s\u548cp\u7684\u5f53\u524d\u626b\u63cf\u4f4d\u7f6e\uff0c\u5f53 s \u4e0e p \u4e0d\u5339\u914d\u65f6\uff0c\u8dd1\u626b\u63cf\u6307\u9488\u56de\u5230 '*'&nbsp;\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c s \u626b\u63cf\u6307\u9488\u56de\u5230\u4e0a\u6b21\u9047\u5230&nbsp;'*' \u4e4b\u540e\u4e0e p \u5f00\u59cb\u5339\u914d\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('f53416b5-ff72-4739-9b28-9a437f0c28ca')\"><img id=\"code_img_closed_f53416b5-ff72-4739-9b28-9a437f0c28ca\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_f53416b5-ff72-4739-9b28-9a437f0c28ca\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('f53416b5-ff72-4739-9b28-9a437f0c28ca',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_f53416b5-ff72-4739-9b28-9a437f0c28ca\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> isMatch(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *s, <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">p) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> last_star = -<span style=\"color: #800080;\">1</span>, last_s = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, i, j;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(i = j = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">; s[i]; )\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">if</span>(s[i] == p[j] || p[j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">?</span><span style=\"color: #800000;\">'</span>) i ++, j ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(p[j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">*</span><span style=\"color: #800000;\">'</span>) last_star = ++ j, last_s =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(last_star != -<span style=\"color: #800080;\">1</span>) i = ++ last_s, j =<span style=\"color: #000000;\"> last_star;\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">while</span>(p[j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">*</span><span style=\"color: #800000;\">'</span>) j ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span> !s[i] &amp;&amp; !<span style=\"color: #000000;\">p[j];\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/multiply-strings/\">Multiply Strings</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;</span></span>\u7ffb\u8f6cnum1\u548cnum2\uff0c\u5927\u6574\u6570\u4e58\u6cd5\uff0c\u628a\u7ed3\u679c\u518d\u7ffb\u8f6c\u3002\u6ce8\u610f int \u548c char \u7684\u8f6c\u6362\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('d31de125-0b4e-45a5-8f9d-530b72e102c1')\"><img id=\"code_img_closed_d31de125-0b4e-45a5-8f9d-530b72e102c1\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_d31de125-0b4e-45a5-8f9d-530b72e102c1\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('d31de125-0b4e-45a5-8f9d-530b72e102c1',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_d31de125-0b4e-45a5-8f9d-530b72e102c1\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span> multiply(<span style=\"color: #0000ff;\">string</span> num1, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> num2) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">string</span> ans(num1.length() + num2.length() + <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">        reverse(num1.begin(), num1.end());\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        reverse(num2.begin(), num2.end());\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">int</span> cur = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, i, j, k;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; num1.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt; num2.length(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">12</span>                 ans[i + j] += cur + (num1[i] - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span>) * (num2[j] - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">13</span>                 cur = ans[i + j] / <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>                 ans[i + j] %= <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">for</span>(k = i + j; cur; k ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">18</span>                 ans[k] +=<span style=\"color: #000000;\"> cur;\n</span><span style=\"color: #008080;\">19</span>                 cur = ans[k] / <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span>                 ans[k] %= <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">for</span>(k = ans.length() - <span style=\"color: #800080;\">1</span>; k &gt; <span style=\"color: #800080;\">0</span> &amp;&amp; ans[k] == <span style=\"color: #800080;\">0</span>; k --<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">24</span>         ans.resize(k + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; ans.length(); i ++) ans[i] += <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">        reverse(ans.begin(), ans.end());\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">29</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/trapping-rain-water/\">Trapping Rain Water</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u53d6\u8fd9\u4e2a\u4f4d\u7f6e&ldquo;\u5de6\u8fb9\u6700\u9ad8\u7684&rdquo;\u548c&ldquo;\u53f3\u8fb9\u6700\u9ad8\u7684&rdquo;\u7684&rdquo;\u8f83\u4f4e\u8005&ldquo;\uff0c\u5982\u679c&ldquo;\u8f83\u4f4e\u8005&rdquo;\u6bd4\u8fd9\u4e2a\u4f4d\u7f6e\u9ad8\uff0c\u5219\u8fd9\u4e2a\u4f4d\u7f6e\u5b58\u6c34\u9ad8\u5ea6\u4e3a&ldquo;\u8f83\u4f4e\u8005&rdquo;\u51cf\u8be5\u4f4d\u7f6e\u9ad8\u5ea6\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('3c8b4292-8aed-4a13-935a-5cef5267f53e')\"><img id=\"code_img_closed_3c8b4292-8aed-4a13-935a-5cef5267f53e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_3c8b4292-8aed-4a13-935a-5cef5267f53e\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('3c8b4292-8aed-4a13-935a-5cef5267f53e',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_3c8b4292-8aed-4a13-935a-5cef5267f53e\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> trap(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> pre;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, maxheight, ans;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(i = maxheight = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             maxheight =<span style=\"color: #000000;\"> max(A[i], maxheight);\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            pre.push_back(maxheight);\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">for</span>(maxheight = ans = <span style=\"color: #800080;\">0</span>, i = n - <span style=\"color: #800080;\">1</span>; i &gt; <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">13</span>             maxheight =<span style=\"color: #000000;\"> max(A[i], maxheight);\n</span><span style=\"color: #008080;\">14</span>             ans += max(<span style=\"color: #800080;\">0</span>, min(pre[i] - A[i], maxheight -<span style=\"color: #000000;\"> A[i]));\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/first-missing-positive/\"><span style=\"color: #ff0000;\">First Missing Positive</span></a></span></h3>\n<p>\u9898\u76ee\u8981\u6c42\u65f6\u95f4O(n)\uff0c\u7a7a\u95f4O(1)\uff0c\u7ecf\u5206\u6790\uff0c\u4e0d\u5f97\u4e0d\u7834\u574f\u539f\u6570\u7ec4 A\u3002</p>\n<p>\u65b9\u6cd5\u4e00\uff1a</p>\n<p>\u5254\u9664\u975e\u6574\u6570\uff0c\u628a\u539f\u6570\u7ec4 A \u5f53\u4f5c\u5b58\u5728\u6807\u8bb0\uff0c\u5b58\u5728\u7684\u6570 x \u5219 A[x-1]\u53d6\u8d1f\u6570\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('df30d60a-29cf-4151-8f79-b7e52419bd7d')\"><img id=\"code_img_closed_df30d60a-29cf-4151-8f79-b7e52419bd7d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_df30d60a-29cf-4151-8f79-b7e52419bd7d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('df30d60a-29cf-4151-8f79-b7e52419bd7d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_df30d60a-29cf-4151-8f79-b7e52419bd7d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> firstMissingPositive(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(i = j = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span>             <span style=\"color: #0000ff;\">if</span>(A[i] &gt; <span style=\"color: #800080;\">0</span>) A[j ++] =<span style=\"color: #000000;\"> A[i];\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; j; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(abs(A[i]) &lt;= j) A[abs(A[i]) - <span style=\"color: #800080;\">1</span>] = -abs(A[abs(A[i]) - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; j; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(A[i] &gt; <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">return</span> j + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">13</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>\u65b9\u6cd5\u4e8c\uff1a<br />\u628a\u51fa\u73b0\u7684\u7b26\u5408\u8303\u56f4\u7684\u6570swap\u5230\u4e0b\u6807\u548c\u6570\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u518d\u6b21\u904d\u5386\uff0c\u6570\u548c\u4e0b\u6807\u4e0d\u5bf9\u5e94\u5219\u662f\u7b2c\u4e00\u4e2a\u6ca1\u51fa\u73b0\u7684\u6570\u3002\u6ce8\u610f\u5904\u7406\u6709\u91cd\u590d\u6570\u5b57\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('300a7f8f-4b90-4ff4-bed3-379f208b9908')\"><img id=\"code_img_closed_300a7f8f-4b90-4ff4-bed3-379f208b9908\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_300a7f8f-4b90-4ff4-bed3-379f208b9908\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('300a7f8f-4b90-4ff4-bed3-379f208b9908',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_300a7f8f-4b90-4ff4-bed3-379f208b9908\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> firstMissingPositive(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span>             <span style=\"color: #0000ff;\">while</span>(A[i] &lt;= n &amp;&amp; A[i] &gt; <span style=\"color: #800080;\">0</span> &amp;&amp; A[i] != i + <span style=\"color: #800080;\">1</span> &amp;&amp; A[A[i] - <span style=\"color: #800080;\">1</span>] !=<span style=\"color: #000000;\"> A[i]) \n</span><span style=\"color: #008080;\"> 7</span>                 swap(A[i], A[A[i] - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(A[i] != i + <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">return</span> i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">12</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/combination-sum/\">Combination Sum</a></h3>\n<p>\u57fa\u7840DFS</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('651637be-5fec-42e2-92ff-6a35409f1d4f')\"><img id=\"code_img_closed_651637be-5fec-42e2-92ff-6a35409f1d4f\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_651637be-5fec-42e2-92ff-6a35409f1d4f\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('651637be-5fec-42e2-92ff-6a35409f1d4f',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_651637be-5fec-42e2-92ff-6a35409f1d4f\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">void</span> DFS(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;num, <span style=\"color: #0000ff;\">int</span> ith, <span style=\"color: #0000ff;\">int</span> now, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(now ==<span style=\"color: #000000;\"> target)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            ans.push_back(tmp);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(ith == num.size()) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">int</span> cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">while</span>(now &lt;=<span style=\"color: #000000;\"> target)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">16</span>             DFS(num, ith + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, now, target);\n</span><span style=\"color: #008080;\">17</span>             now +=<span style=\"color: #000000;\"> num[ith];\n</span><span style=\"color: #008080;\">18</span>             cnt ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            tmp.push_back(num[ith]);\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">while</span>(cnt --<span style=\"color: #000000;\">) tmp.pop_back();\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; combinationSum(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;candidates, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        sort(candidates.begin(), candidates.end());\n</span><span style=\"color: #008080;\">25</span>         DFS(candidates, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, target);\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">28</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/combination-sum-ii/\">Combination Sum II</a></h3>\n<p>\u5982\u679c\u4e00\u4e2a\u6570\u6ca1\u6709\u88ab\u7528\uff0c\u90a3\u4e48\u540e\u9762\u91cd\u590d\u7684\u8fd9\u4e2a\u6570\u5c31\u522b\u7528\uff0c\u907f\u514d\u91cd\u590d\u89e3\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8eda5d47-f181-4b35-838d-f45d049b0a24')\"><img id=\"code_img_closed_8eda5d47-f181-4b35-838d-f45d049b0a24\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8eda5d47-f181-4b35-838d-f45d049b0a24\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8eda5d47-f181-4b35-838d-f45d049b0a24',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8eda5d47-f181-4b35-838d-f45d049b0a24\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">void</span> DFS(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;num, <span style=\"color: #0000ff;\">int</span> ith, <span style=\"color: #0000ff;\">int</span> now, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(now ==<span style=\"color: #000000;\"> target)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            ans.push_back(tmp);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(ith == num.size()) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nex;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">for</span>(nex = ith + <span style=\"color: #800080;\">1</span>; nex &lt; num.size() &amp;&amp; num[nex] == num[ith]; nex ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        DFS(num, nex, now, target);\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">if</span>(num[ith] + now &lt;=<span style=\"color: #000000;\"> target)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">18</span>             now +=<span style=\"color: #000000;\"> num[ith];\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            tmp.push_back(num[ith]);\n</span><span style=\"color: #008080;\">20</span>             DFS(num, ith + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, now, target);\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">            tmp.pop_back();\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; combinationSum2(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;num, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">        sort(num.begin(), num.end());\n</span><span style=\"color: #008080;\">26</span>         DFS(num, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, target);\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">29</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/count-and-say/\">Count and Say</a></h3>\n<p>\u76f4\u63a5\u6a21\u62df\uff0c\u9012\u63a8\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('d742639a-0723-46aa-932f-dc47bd799b82')\"><img id=\"code_img_closed_d742639a-0723-46aa-932f-dc47bd799b82\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_d742639a-0723-46aa-932f-dc47bd799b82\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('d742639a-0723-46aa-932f-dc47bd799b82',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_d742639a-0723-46aa-932f-dc47bd799b82\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span> countAndSay(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">string</span> f[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 5</span>         f[<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             f[i &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].clear();\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; f[i &amp; <span style=\"color: #800080;\">1</span> ^ <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].length();)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cnt;\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">char</span> x = f[i &amp; <span style=\"color: #800080;\">1</span> ^ <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][j];\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">for</span>(cnt = <span style=\"color: #800080;\">0</span>; j &lt; f[i &amp; <span style=\"color: #800080;\">1</span> ^ <span style=\"color: #800080;\">1</span>].length() &amp;&amp; f[i &amp; <span style=\"color: #800080;\">1</span> ^ <span style=\"color: #800080;\">1</span>][j] == x; cnt ++, j ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">14</span>                 f[i &amp; <span style=\"color: #800080;\">1</span>] += <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span> +<span style=\"color: #000000;\"> cnt;\n</span><span style=\"color: #008080;\">15</span>                 f[i &amp; <span style=\"color: #800080;\">1</span>] +=<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">return</span> f[n &amp; <span style=\"color: #800080;\">1</span> ^ <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">20</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/sudoku-solver/\">Sudoku Solver</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u8fd9\u9053\u9898\u8003\u5bdf\u56de\u6eaf\u548c\u6570\u72ec\u7ed3\u679c\u7684\u5224\u65ad\u3002ACM\u505a\u8fc7\uff0c\u5c31\u76f4\u63a5\u62ffdancing links\u4ee3\u7801\u4e86\uff0c4ms\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u5173\u4e8edancing links\uff0c\u5bf9\u4e8e\u9762\u8bd5\u9898\u6765\u8bf4\u53d8\u6001\u4e86\u4e9b\uff0c\u5e94\u8be5\u4e0d\u81f3\u4e8e\u8003\u5bdf\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8b5748ea-942e-42a5-beff-247246fc92f2')\"><img id=\"code_img_closed_8b5748ea-942e-42a5-beff-247246fc92f2\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8b5748ea-942e-42a5-beff-247246fc92f2\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8b5748ea-942e-42a5-beff-247246fc92f2',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8b5748ea-942e-42a5-beff-247246fc92f2\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">  3</span>     <span style=\"color: #0000ff;\">int</span> rw[<span style=\"color: #800080;\">10</span>], cl[<span style=\"color: #800080;\">10</span>], <span style=\"color: #0000ff;\">in</span>[<span style=\"color: #800080;\">10</span>], RW[<span style=\"color: #800080;\">81</span>], CL[<span style=\"color: #800080;\">81</span>], IN[<span style=\"color: #800080;\">81</span><span style=\"color: #000000;\">], goal;\n</span><span style=\"color: #008080;\">  4</span>     <span style=\"color: #0000ff;\">char</span> buf[<span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">  5</span>     <span style=\"color: #0000ff;\">void</span> Mark(<span style=\"color: #0000ff;\">int</span> i, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> num)\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">  7</span>         rw[RW[i]] ^= <span style=\"color: #800080;\">1</span> &lt;&lt;<span style=\"color: #000000;\"> num;\n</span><span style=\"color: #008080;\">  8</span>         cl[CL[i]] ^= <span style=\"color: #800080;\">1</span> &lt;&lt;<span style=\"color: #000000;\"> num;\n</span><span style=\"color: #008080;\">  9</span>         <span style=\"color: #0000ff;\">in</span>[IN[i]] ^= <span style=\"color: #800080;\">1</span> &lt;&lt;<span style=\"color: #000000;\"> num;\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 11</span>     <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> init()\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 13</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\"> 14</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">10</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 15</span>             cl[i] = rw[i] = <span style=\"color: #0000ff;\">in</span>[i] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 16</span>         <span style=\"color: #0000ff;\">for</span>(i = goal = <span style=\"color: #800080;\">0</span>; buf[i]; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 17</span>             goal += buf[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 18</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">81</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 20</span>             RW[i] = i / <span style=\"color: #800080;\">9</span>, CL[i] = i % <span style=\"color: #800080;\">9</span>, IN[i] = i / <span style=\"color: #800080;\">3</span> % <span style=\"color: #800080;\">3</span> + i / <span style=\"color: #800080;\">27</span> * <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 21</span>             <span style=\"color: #0000ff;\">if</span>(buf[i] != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 22</span>                 Mark(i, buf[i] - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 23</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 25</span>     inline <span style=\"color: #0000ff;\">int</span> Judge(<span style=\"color: #0000ff;\">int</span> i, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> num)\n</span><span style=\"color: #008080;\"> 26</span>     {<span style=\"color: #0000ff;\">return</span> ~(rw[RW[i]] | cl[CL[i]] | <span style=\"color: #0000ff;\">in</span>[IN[i]]) &amp; (<span style=\"color: #800080;\">1</span> &lt;&lt;<span style=\"color: #000000;\"> num);}\n</span><span style=\"color: #008080;\"> 27</span>     <span style=\"color: #0000ff;\">int</span> Oper(<span style=\"color: #0000ff;\">int</span> sx, <span style=\"color: #0000ff;\">int</span> k, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cur)\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 29</span>         Mark(sx, k), buf[sx] = k + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 30</span>         <span style=\"color: #0000ff;\">if</span>(dfs(cur + <span style=\"color: #800080;\">1</span>)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 31</span>         Mark(sx, k), buf[sx] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 32</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 34</span>     <span style=\"color: #0000ff;\">int</span> JudgeRWCLIN(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cur)\n</span><span style=\"color: #008080;\"> 35</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 36</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, k, x, cnt, sx;\n</span><span style=\"color: #008080;\"> 37</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">9</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 38</span>             <span style=\"color: #0000ff;\">for</span>(k = <span style=\"color: #800080;\">0</span>; k &lt; <span style=\"color: #800080;\">9</span>; ++<span style=\"color: #000000;\"> k)\n</span><span style=\"color: #008080;\"> 39</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 40</span>                 <span style=\"color: #0000ff;\">if</span>(~rw[i] &amp; (<span style=\"color: #800080;\">1</span> &lt;&lt;<span style=\"color: #000000;\"> k))\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\"> 42</span>                     <span style=\"color: #0000ff;\">for</span>(j = cnt = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">9</span>; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\"> 44</span>                         x = i * <span style=\"color: #800080;\">9</span> +<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\"> 45</span>                         <span style=\"color: #0000ff;\">if</span>(buf[x] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span> &amp;&amp; Judge(x, k)) ++ cnt, sx =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\"> 47</span>                     <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 48</span>                     <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 49</span>                         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Oper(sx, k, cur);\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\"> 51</span>                 <span style=\"color: #0000ff;\">if</span>(~cl[i] &amp; (<span style=\"color: #800080;\">1</span> &lt;&lt;<span style=\"color: #000000;\"> k))\n</span><span style=\"color: #008080;\"> 52</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\"> 53</span>                     <span style=\"color: #0000ff;\">for</span>(j = cnt = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">9</span>; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 54</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\"> 55</span>                         x = j * <span style=\"color: #800080;\">9</span> +<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\"> 56</span>                         <span style=\"color: #0000ff;\">if</span>(buf[x] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span> &amp;&amp; Judge(x, k)) ++ cnt, sx =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\"> 57</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\"> 58</span>                     <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 59</span>                     <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 60</span>                         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Oper(sx, k, cur);\n</span><span style=\"color: #008080;\"> 61</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\"> 62</span>                 <span style=\"color: #0000ff;\">if</span>(~<span style=\"color: #0000ff;\">in</span>[i] &amp; (<span style=\"color: #800080;\">1</span> &lt;&lt;<span style=\"color: #000000;\"> k))\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\"> 64</span>                     <span style=\"color: #0000ff;\">for</span>(j = cnt = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">9</span>; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 65</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\"> 66</span>                         x = i / <span style=\"color: #800080;\">3</span> * <span style=\"color: #800080;\">27</span> + j / <span style=\"color: #800080;\">3</span> * <span style=\"color: #800080;\">9</span> + i % <span style=\"color: #800080;\">3</span> * <span style=\"color: #800080;\">3</span> + j % <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 67</span>                         <span style=\"color: #0000ff;\">if</span>(buf[x] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span> &amp;&amp; Judge(x, k)) ++ cnt, sx =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\"> 69</span>                     <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 70</span>                     <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 71</span>                         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Oper(sx, k, cur);\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\"> 73</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 74</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 75</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 76</span>                         \n<span style=\"color: #008080;\"> 77</span>         \n<span style=\"color: #008080;\"> 78</span>     <span style=\"color: #0000ff;\">bool</span> dfs(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cur)\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 80</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, num, cnt;\n</span><span style=\"color: #008080;\"> 81</span>         <span style=\"color: #0000ff;\">if</span>(cur == goal) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 82</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">81</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 83</span>             <span style=\"color: #0000ff;\">if</span>(buf[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 84</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 85</span>                 <span style=\"color: #0000ff;\">for</span>(j = cnt = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">9</span>; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 86</span>                     <span style=\"color: #0000ff;\">if</span>(Judge(i, j)) ++ cnt, num =<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\"> 87</span>                 <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 88</span>                 <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 89</span>                         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Oper(i, num, cur);\n</span><span style=\"color: #008080;\"> 90</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 91</span>         <span style=\"color: #0000ff;\">if</span>((num = JudgeRWCLIN(cur)) == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 92</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(num == <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 93</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">81</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 94</span>             <span style=\"color: #0000ff;\">if</span>(buf[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 95</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 96</span>                 <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">9</span>; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 97</span>                     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(Judge(i, j))\n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\"> 99</span>                         Mark(i, j), buf[i] = j + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">100</span>                         <span style=\"color: #0000ff;\">if</span>(dfs(cur + <span style=\"color: #800080;\">1</span>)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">101</span>                         Mark(i, j), buf[i] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">102</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">103</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">104</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">106</span>     <span style=\"color: #0000ff;\">void</span> solveSudoku(vector&lt;vector&lt;<span style=\"color: #0000ff;\">char</span>&gt; &gt; &amp;<span style=\"color: #000000;\">board) {\n</span><span style=\"color: #008080;\">107</span>         <span style=\"color: #0000ff;\">int</span> site = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">108</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">9</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">109</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">9</span>; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">110</span>                 buf[site ++] =<span style=\"color: #000000;\"> board[i][j];\n</span><span style=\"color: #008080;\">111</span> <span style=\"color: #000000;\">        init();\n</span><span style=\"color: #008080;\">112</span>         dfs(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">113</span>         site = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">114</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">9</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">115</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">9</span>; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">116</span>                 board[i][j] = buf[site ++<span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">117</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">118</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/valid-sudoku/\">Valid Sudoku</a></h3>\n<p>\u884c\u5217\u4e5d\u5bab\u683c\u90fd\u5224\u65ad\u4e00\u4e0b\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('00ffa891-c089-4ed7-8020-21e6d1d6e9f0')\"><img id=\"code_img_closed_00ffa891-c089-4ed7-8020-21e6d1d6e9f0\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_00ffa891-c089-4ed7-8020-21e6d1d6e9f0\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('00ffa891-c089-4ed7-8020-21e6d1d6e9f0',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_00ffa891-c089-4ed7-8020-21e6d1d6e9f0\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> isValidSudoku(vector&lt;vector&lt;<span style=\"color: #0000ff;\">char</span>&gt; &gt; &amp;<span style=\"color: #000000;\">board) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">bool</span> flag[<span style=\"color: #800080;\">3</span>][<span style=\"color: #800080;\">9</span>][<span style=\"color: #800080;\">9</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 5</span>         memset(flag, <span style=\"color: #0000ff;\">false</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(flag));\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">9</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">9</span>; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 <span style=\"color: #0000ff;\">if</span>(board[i][j] != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">12</span>                     <span style=\"color: #0000ff;\">int</span> x = board[i][j] - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>                     <span style=\"color: #0000ff;\">if</span>(flag[<span style=\"color: #800080;\">0</span>][i][x] == <span style=\"color: #0000ff;\">true</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>                     flag[<span style=\"color: #800080;\">0</span>][i][x] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>                     <span style=\"color: #0000ff;\">if</span>(flag[<span style=\"color: #800080;\">1</span>][j][x] == <span style=\"color: #0000ff;\">true</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>                     flag[<span style=\"color: #800080;\">1</span>][j][x] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>                     <span style=\"color: #0000ff;\">if</span>(flag[<span style=\"color: #800080;\">2</span>][i / <span style=\"color: #800080;\">3</span> * <span style=\"color: #800080;\">3</span> + j / <span style=\"color: #800080;\">3</span>][x] == <span style=\"color: #0000ff;\">true</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>                     flag[<span style=\"color: #800080;\">2</span>][i / <span style=\"color: #800080;\">3</span> * <span style=\"color: #800080;\">3</span> + j / <span style=\"color: #800080;\">3</span>][x] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/search-insert-position/\">Search Insert Position</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u4e8c\u5206</span></span></span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('e40d97eb-a4f4-4582-b2ba-8b2fea3d9ee5')\"><img id=\"code_img_closed_e40d97eb-a4f4-4582-b2ba-8b2fea3d9ee5\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_e40d97eb-a4f4-4582-b2ba-8b2fea3d9ee5\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('e40d97eb-a4f4-4582-b2ba-8b2fea3d9ee5',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_e40d97eb-a4f4-4582-b2ba-8b2fea3d9ee5\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> searchInsert(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> left, right, mid;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(left = <span style=\"color: #800080;\">0</span>, right = n; left &lt;<span style=\"color: #000000;\"> right; )\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             mid = left + right &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(A[mid] == target) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(A[mid] &gt; target) right =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">else</span> left = mid + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> left;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">14</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/search-for-a-range/\">Search for a Range</a></h3>\n<p>\u4e8c\u5206\uff0c\u5bb9\u6613\u9519\u3002\u53ef\u4ee5\u7528lower_bound\u548cupper_bound\u3002</p>\n<p>\u624b\u5de5\u4ee3\u7801\uff1a</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('1d2c2f7f-bff6-4dc4-8b9c-cbb910f01ca1')\"><img id=\"code_img_closed_1d2c2f7f-bff6-4dc4-8b9c-cbb910f01ca1\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_1d2c2f7f-bff6-4dc4-8b9c-cbb910f01ca1\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('1d2c2f7f-bff6-4dc4-8b9c-cbb910f01ca1',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_1d2c2f7f-bff6-4dc4-8b9c-cbb910f01ca1\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; searchRange(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> left, right, mid, l, r;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(left = <span style=\"color: #800080;\">0</span>, right = n; left &lt;<span style=\"color: #000000;\"> right; )\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             mid = left + right &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(A[mid] &gt;= target) right =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">else</span> left = mid + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         l =<span style=\"color: #000000;\"> left;\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">for</span>(left = <span style=\"color: #800080;\">0</span>, right = n; left &lt;<span style=\"color: #000000;\"> right; )\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">14</span>             mid = left + right &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">if</span>(A[mid] &gt; target) right =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">else</span> left = mid + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">18</span>         r = left - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">if</span>(l &gt;= n || A[l] != target) <span style=\"color: #0000ff;\">return</span> vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(<span style=\"color: #800080;\">2</span>, -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">20</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; ans =<span style=\"color: #000000;\"> {l, r};\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>STL\uff1a</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('aa508be0-836b-49b7-8c74-a81e1749320a')\"><img id=\"code_img_closed_aa508be0-836b-49b7-8c74-a81e1749320a\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_aa508be0-836b-49b7-8c74-a81e1749320a\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('aa508be0-836b-49b7-8c74-a81e1749320a',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_aa508be0-836b-49b7-8c74-a81e1749320a\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; searchRange(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> l = lower_bound(A, A + n, target) -<span style=\"color: #000000;\"> A;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> r = upper_bound(A, A + n, target) -<span style=\"color: #000000;\"> A;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">if</span>(l == n || A[l] != target) <span style=\"color: #0000ff;\">return</span> vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;(<span style=\"color: #800080;\">2</span>, -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 7</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; ans = {l, r - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">10</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/search-in-rotated-sorted-array/\">Search in Rotated Sorted Array</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u8fd8\u662f\u4e8c\u5206\uff0c\u4f46\u662f\u8981\u5224\u65ad\u4e00\u4e0b mid \u5728\u54ea\u90e8\u5206\u91cc\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('cd0f34c3-38b9-4705-b393-3a7ce657136d')\"><img id=\"code_img_closed_cd0f34c3-38b9-4705-b393-3a7ce657136d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_cd0f34c3-38b9-4705-b393-3a7ce657136d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('cd0f34c3-38b9-4705-b393-3a7ce657136d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_cd0f34c3-38b9-4705-b393-3a7ce657136d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> search(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> left = <span style=\"color: #800080;\">0</span>, right = n - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, mid;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">while</span>(left &lt;<span style=\"color: #000000;\"> right)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             mid = left + right &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(A[mid] == target) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(A[mid] &gt;=<span style=\"color: #000000;\"> A[left])\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">if</span>(target &lt; A[mid] &amp;&amp; A[left] &lt;= target) right =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">else</span> left = mid + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">16</span>                 <span style=\"color: #0000ff;\">if</span>(target &lt;= A[right] &amp;&amp; A[mid] &lt; target) left = mid + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>                 <span style=\"color: #0000ff;\">else</span> right =<span style=\"color: #000000;\"> mid;\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">return</span> A[left] == target ? left : -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">22</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/longest-valid-parentheses/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #ff0000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Longest Valid Parentheses</span></a></span></p>\n<p>\u8fd9\u9053\u9898\u65f6\u95f4\u9650\u5236\u5728O(n)\uff0c\u7528\u4e00\u4e2a stack \u5b9e\u73b0\u62ec\u53f7\u914d\u5bf9+\u7edf\u8ba1, \u4e3a\u4e86\u65b9\u4fbf\u5b9e\u73b0\uff0c\u5199\u6210\u6570\u7ec4\u7684\u5f62\u5f0f\u3002</p>\n<p>\u5bf9\u4e0d\u540c\u6df1\u5ea6\u7684\u62ec\u53f7\u914d\u5bf9\u7edf\u8ba1\u4e2a\u6570\uff0c\u4e00\u5c42\u914d\u5bf9\u6210\u529f\u628a\u8be5\u5c42\u7edf\u8ba1\u7ed3\u679c\u52a0\u7ed9\u4e0a\u4e00\u5c42\uff0c\u8fd9\u4e00\u5c42\u6e05\u7a7a\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('9a208b9e-8d45-49c9-863d-96ba5b9ba027')\"><img id=\"code_img_closed_9a208b9e-8d45-49c9-863d-96ba5b9ba027\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_9a208b9e-8d45-49c9-863d-96ba5b9ba027\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('9a208b9e-8d45-49c9-863d-96ba5b9ba027',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_9a208b9e-8d45-49c9-863d-96ba5b9ba027\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> longestValidParentheses(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; cnt(<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, ans;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(i = ans = <span style=\"color: #800080;\">0</span>; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(s[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span>                 cnt.push_back(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">if</span>(cnt.size() &gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">14</span>                     cnt[cnt.size() - <span style=\"color: #800080;\">2</span>] += *cnt.rbegin() + <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">                    cnt.pop_back();\n</span><span style=\"color: #008080;\">16</span>                     ans = max(ans, *<span style=\"color: #000000;\">cnt.rbegin());\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">18</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">19</span>                     cnt[<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/next-permutation/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Next Permutation</span></a></p>\n<p>\u4ece\u540e\u5f80\u524d\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u964d\u5e8f\u7684 num[i]\uff0c\u518d\u91cd\u65b0\u4ece\u540e\u5f80\u524d\u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4 num[i] \u5927\u7684\uff0cswap(num[i], num[j])\uff0c\u518d\u628a i \u4e4b\u540e\u7684\u6392\u5e8f\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('248ccfcc-f8fd-4ef7-a41e-4fed81dc2dcb')\"><img id=\"code_img_closed_248ccfcc-f8fd-4ef7-a41e-4fed81dc2dcb\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_248ccfcc-f8fd-4ef7-a41e-4fed81dc2dcb\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('248ccfcc-f8fd-4ef7-a41e-4fed81dc2dcb',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_248ccfcc-f8fd-4ef7-a41e-4fed81dc2dcb\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">void</span> nextPermutation(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">num) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(i = num.size() - <span style=\"color: #800080;\">2</span>; i &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; num[i] &gt;= num[i + <span style=\"color: #800080;\">1</span>]; i --<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(j = num.size() - <span style=\"color: #800080;\">1</span>; j &gt; i &amp;&amp; num[j] &lt;= num[i]; j --<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(i &lt;<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            swap(num[i], num[j]);\n</span><span style=\"color: #008080;\">10</span>             sort(num.begin() + i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, num.end());\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            reverse(num.begin(), num.end());\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/substring-with-concatenation-of-all-words/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #ff0000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Substring with Concatenation of All Words</span></a></span></p>\n<p>\u76f4\u89c2\u7684\u65b9\u6cd5\u662f\u679a\u4e3e\u8d77\u70b9\uff0c\u5224\u65ad\u8fd9\u4e2a\u8d77\u70b9\u4e0b\u7684\u5b50\u4e32\u662f\u5426\u5408\u6cd5\uff0cO(S.length()*L.size())\u3002</p>\n<p>\u5176\u5b9e\u53ef\u4ee5\u628a S \u5206\u6210&nbsp;L[0].length() \u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5e8f\u5217\u90fd\u662f\u5143\u7d20\u95f4\u76f8\u9694 L[0].length() \u7684&ldquo;string\u5f00\u5934&rdquo;\uff0c\u8fd9\u4e9b\u5e8f\u5217\u4e92\u4e0d\u76f8\u5e72\u3002</p>\n<p>\u5982\u4e0b\u8868\uff0c\u5047\u8bbe L[0].length()=4\uff0c\u7b2c\u4e00\u884c\u6570\u5b57\u4e3a\u5206\u7ec4\u7ec4\u53f7\uff0c\u7b2c\u4e8c\u884c\u6570\u5b57\u8868\u793a S \u7684\u5e8f\u53f7\u3002</p>\n<table style=\"width: 609px;\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><colgroup><col span=\"21\" width=\"29\" /></colgroup>\n<tbody>\n<tr>\n<td class=\"xl65\" width=\"29\" height=\"26\">(0)</td>\n<td class=\"xl65\" width=\"29\">(1)</td>\n<td class=\"xl65\" width=\"29\">(2)</td>\n<td class=\"xl65\" width=\"29\">(3)</td>\n<td class=\"xl65\" width=\"29\">(0)</td>\n<td class=\"xl65\" width=\"29\">(1)</td>\n<td class=\"xl65\" width=\"29\">(2)</td>\n<td class=\"xl65\" width=\"29\">(3)</td>\n<td class=\"xl65\" width=\"29\">(0)</td>\n<td class=\"xl65\" width=\"29\">(1)</td>\n<td class=\"xl65\" width=\"29\">(2)</td>\n<td class=\"xl65\" width=\"29\">(3)</td>\n<td class=\"xl65\" width=\"29\">(0)</td>\n<td class=\"xl65\" width=\"29\">(1)</td>\n<td class=\"xl65\" width=\"29\">(2)</td>\n<td class=\"xl65\" width=\"29\">(3)</td>\n<td class=\"xl65\" width=\"29\">(0)</td>\n<td class=\"xl65\" width=\"29\">(1)</td>\n<td class=\"xl65\" width=\"29\">(2)</td>\n<td class=\"xl65\" width=\"29\">(3)</td>\n<td class=\"xl65\" width=\"29\">(0)</td>\n</tr>\n<tr>\n<td class=\"xl66\" height=\"26\">0</td>\n<td class=\"xl66\">1</td>\n<td class=\"xl66\">2</td>\n<td class=\"xl66\">3</td>\n<td class=\"xl66\">4</td>\n<td class=\"xl66\">5</td>\n<td class=\"xl66\">6</td>\n<td class=\"xl66\">7</td>\n<td class=\"xl66\">8</td>\n<td class=\"xl66\">9</td>\n<td class=\"xl66\">10</td>\n<td class=\"xl66\">11</td>\n<td class=\"xl66\">12</td>\n<td class=\"xl66\">13</td>\n<td class=\"xl66\">14</td>\n<td class=\"xl66\">15</td>\n<td class=\"xl66\">16</td>\n<td class=\"xl66\">17</td>\n<td class=\"xl66\">18</td>\n<td class=\"xl66\">19</td>\n<td class=\"xl66\">20</td>\n</tr>\n</tbody>\n</table>\n<p>\u5bf9\u6bcf\u4e2a\u5e8f\u5217\uff0c\u7528\u5355\u8c03\u961f\u5217\u7684\u601d\u8def\u6765\u5904\u7406\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5b50\u4e32\u5165\u961f\uff0c\u5f53\u5305\u542b\u4e86 L \u4e2d\u6240\u6709 string \u7684\u65f6\u5019\uff0c\u4fdd\u5b58\u7b54\u6848\u3002\u5f53\u65b0\u5143\u7d20\u5165\u961f\u65f6\u8d85\u51fa\u7edf\u8ba1\u5141\u8bb8\u65f6&mdash;&mdash;\u5373 L \u4e2d\u6709 3 \u4e2a \"str\", \u800c\u8fd9\u65f6\u5019\u9047\u5230\u7b2c 4 \u4e2a&mdash;&mdash;\u5219\u5f00\u59cb\u51fa\u961f\uff0c\u4e00\u76f4\u51fa\u5230\u961f\u5217\u91cc\u4e0d\u8db3 3 \u4e2a \"str\"\uff0c\u7136\u540e\u7ee7\u7eed\u3002</p>\n<p>\u8fd9\u6837\u590d\u6742\u5ea6\u4e3aO(L[0].length() * S.length() / L[0].length()) = O(S.length())\u3002\u76ee\u524d\u63d0\u4ea4\u7ed3\u679c\u662f180ms\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('7ca9c590-e991-4375-b7f8-461442fe4785')\"><img id=\"code_img_closed_7ca9c590-e991-4375-b7f8-461442fe4785\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_7ca9c590-e991-4375-b7f8-461442fe4785\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('7ca9c590-e991-4375-b7f8-461442fe4785',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_7ca9c590-e991-4375-b7f8-461442fe4785\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; findSubstring(<span style=\"color: #0000ff;\">string</span> S, vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; &amp;<span style=\"color: #000000;\">L) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(L.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 6</span>         unordered_map&lt;<span style=\"color: #0000ff;\">string</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> mp, sum;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">int</span> llen = L[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].length(), i, front, rear;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; L.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(!mp.count(L[i])) mp[L[i]] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">else</span> mp[L[i]] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; llen; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             sum =<span style=\"color: #000000;\"> mp;\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">int</span> cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">for</span>(front = rear = i; front + llen &lt;= S.length(); front +=<span style=\"color: #000000;\"> llen)\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">19</span>                 <span style=\"color: #0000ff;\">string</span> tmp =<span style=\"color: #000000;\"> S.substr(front, llen);\n</span><span style=\"color: #008080;\">20</span>                 <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(sum.count(tmp))\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">22</span>                     <span style=\"color: #0000ff;\">if</span>(sum[tmp] &gt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">24</span>                         sum[tmp] --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span>                         cnt ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">26</span>                         <span style=\"color: #0000ff;\">if</span>(cnt ==<span style=\"color: #000000;\"> L.size())\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">                        {\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">                            ans.push_back(rear);\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">                        }\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">31</span>                     <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">33</span>                         <span style=\"color: #0000ff;\">while</span>(sum[tmp] == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">                        {\n</span><span style=\"color: #008080;\">35</span>                             <span style=\"color: #0000ff;\">string</span> ntmp =<span style=\"color: #000000;\"> S.substr(rear, llen);\n</span><span style=\"color: #008080;\">36</span>                             sum[ntmp] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">37</span>                             cnt --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">38</span>                             rear +=<span style=\"color: #000000;\"> llen;\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">                        }\n</span><span style=\"color: #008080;\">40</span>                         sum[tmp] --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">41</span>                         cnt ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">42</span>                         <span style=\"color: #0000ff;\">if</span>(cnt ==<span style=\"color: #000000;\"> L.size())\n</span><span style=\"color: #008080;\">43</span> <span style=\"color: #000000;\">                        {\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">                            ans.push_back(rear);\n</span><span style=\"color: #008080;\">45</span> <span style=\"color: #000000;\">                        }\n</span><span style=\"color: #008080;\">46</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">47</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">48</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">49</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">50</span>                     <span style=\"color: #0000ff;\">while</span>(rear &lt;<span style=\"color: #000000;\"> front)\n</span><span style=\"color: #008080;\">51</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">52</span>                         <span style=\"color: #0000ff;\">string</span> ntmp =<span style=\"color: #000000;\"> S.substr(rear, llen);\n</span><span style=\"color: #008080;\">53</span>                         sum[ntmp] ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">54</span>                         cnt --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">55</span>                         rear +=<span style=\"color: #000000;\"> llen;\n</span><span style=\"color: #008080;\">56</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">57</span>                     rear +=<span style=\"color: #000000;\"> llen;\n</span><span style=\"color: #008080;\">58</span>                     cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">59</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">60</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">61</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">62</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">63</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">64</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/divide-two-integers/\">Divide Two Integers</a></h3>\n<p>\u5047\u8bbe dividend \u4e0e divisor \u6b63\u8d1f\u4e00\u81f4\uff0c divisor^(2^n) \u4e3a\u6700\u63a5\u8fd1 dividend \u7684 divisor \u7684\u5e42\uff0c\u90a3\u4e48\u4ee4 newdividend = dividend - divisor^(2^n)\uff0cans = ans + 2^n\uff0c\u95ee\u9898\u5c31\u66f4\u65b0\u4e3a newdividend \u9664\u4ee5 divisor\uff0c\u5982\u6b64\u8fed\u4ee3\u3002\u7528 divisor^(2^n) \u662f\u56e0\u4e3a divisor \u4e0d\u505c\u5730\u8f97\u8f6c\u52a0\u81ea\u5df1\u5c31\u53ef\u4ee5\u5f97\u5230\u4e86\u3002</p>\n<p>\u6709 -2147483648 \u8fd9\u6837\u7684\u6781\u9650\u6570\u636e\uff0c\u56e0\u4e3a int \u8303\u56f4\u662f -2147483648~+2147483647\uff0c\u53d1\u73b0\u8d1f\u6570\u6bd4\u6b63\u6570\u8303\u56f4&ldquo;\u591a1&rdquo;\uff0c\u5e72\u8106\u628a\u6240\u6709\u6570\u90fd\u8f6c\u6210\u8d1f\u6570\u7b97\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u7528 long long \u4e86\u3002\u6700\u540e\u8003\u5bdf\u4e00\u4e0bflag\u3002</p>\n<p>\uff08\u5982\u679c\u8f6c\u6210\u6b63\u6570\u7684\u8bdd\uff0cint \u7684 -(-2147483648)\u8fd8\u662f -2147483648\u3002\u3002\uff09</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('7e1ec9cb-c3e9-4016-8639-2aa3dad158c8')\"><img id=\"code_img_closed_7e1ec9cb-c3e9-4016-8639-2aa3dad158c8\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_7e1ec9cb-c3e9-4016-8639-2aa3dad158c8\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('7e1ec9cb-c3e9-4016-8639-2aa3dad158c8',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_7e1ec9cb-c3e9-4016-8639-2aa3dad158c8\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> divide(<span style=\"color: #0000ff;\">int</span> dividend, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> divisor) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">bool</span> flag = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(divisor &gt; <span style=\"color: #800080;\">0</span>) divisor = -divisor, flag ^= <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">if</span>(dividend &gt; <span style=\"color: #800080;\">0</span>) dividend = -dividend, flag ^= <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span>, res = divisor, ex = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">if</span>(divisor &lt; dividend) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">while</span>(res &gt;= dividend -<span style=\"color: #000000;\"> res)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">11</span>             res +=<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">12</span>             ex +=<span style=\"color: #000000;\"> ex;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">while</span>(res &lt;= divisor &amp;&amp;<span style=\"color: #000000;\"> dividend)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">if</span>(res &gt;=<span style=\"color: #000000;\"> dividend)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">18</span>                 dividend -=<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">19</span>                 ans +=<span style=\"color: #000000;\"> ex;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">21</span>             res &gt;&gt;= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">22</span>             ex &gt;&gt;= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">return</span> flag ? -<span style=\"color: #000000;\">ans : ans;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">26</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/implement-strstr/\">Implement strStr()</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;</span></span>KMP\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('2dcb0aa7-7aa7-4f8f-b462-b8f96d68f740')\"><img id=\"code_img_closed_2dcb0aa7-7aa7-4f8f-b462-b8f96d68f740\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_2dcb0aa7-7aa7-4f8f-b462-b8f96d68f740\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('2dcb0aa7-7aa7-4f8f-b462-b8f96d68f740',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_2dcb0aa7-7aa7-4f8f-b462-b8f96d68f740\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">char</span> *strStr(<span style=\"color: #0000ff;\">char</span> *haystack, <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">needle) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> hlen = (<span style=\"color: #0000ff;\">int</span>)strlen(haystack), nlen = (<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">)strlen(needle);\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(nlen == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> haystack;\n</span><span style=\"color: #008080;\"> 6</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; next(nlen + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 7</span>         next[<span style=\"color: #800080;\">0</span>] = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>, j = -<span style=\"color: #800080;\">1</span>; i &lt;<span style=\"color: #000000;\"> nlen;)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(j == -<span style=\"color: #800080;\">1</span> || needle[i] ==<span style=\"color: #000000;\"> needle[j])\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">12</span>                 i ++, j ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">if</span>(needle[i] != needle[j]) next[i] =<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">else</span> next[i] =<span style=\"color: #000000;\"> next[j];\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">else</span> j =<span style=\"color: #000000;\"> next[j];\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>, j = <span style=\"color: #800080;\">0</span>; i &lt;<span style=\"color: #000000;\"> hlen;)\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">20</span>             <span style=\"color: #0000ff;\">if</span>(j == -<span style=\"color: #800080;\">1</span> || haystack[i] ==<span style=\"color: #000000;\"> needle[j])\n</span><span style=\"color: #008080;\">21</span>                 i ++, j ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">22</span>             <span style=\"color: #0000ff;\">else</span> j =<span style=\"color: #000000;\"> next[j];\n</span><span style=\"color: #008080;\">23</span>             <span style=\"color: #0000ff;\">if</span>(j == nlen) <span style=\"color: #0000ff;\">return</span> haystack + i -<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/remove-element/\">Remove Element</a></h3>\n<p>\u4e24\u4e2a\u6e38\u6807 i, j \u5f02\u6b65\u632a\u52a8\uff0c\u628a\u4e0d\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u6570\u5f80\u524d\u632a\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('bee94646-5026-4377-97b8-7323251ce9b8')\"><img id=\"code_img_closed_bee94646-5026-4377-97b8-7323251ce9b8\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_bee94646-5026-4377-97b8-7323251ce9b8\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('bee94646-5026-4377-97b8-7323251ce9b8',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_bee94646-5026-4377-97b8-7323251ce9b8\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">3</span>     <span style=\"color: #0000ff;\">int</span> removeElement(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> elem) {\n</span><span style=\"color: #008080;\">4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\">5</span>         <span style=\"color: #0000ff;\">for</span>(i = j = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">6</span>             <span style=\"color: #0000ff;\">if</span>(A[i] != elem) A[j ++] =<span style=\"color: #000000;\"> A[i];\n</span><span style=\"color: #008080;\">7</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">8</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">9</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/remove-duplicates-from-sorted-array/\">Remove Duplicates from Sorted Array</a></h3>\n<p>\u4e24\u4e2a\u6e38\u6807 i, j \u5f02\u6b65\u632a\u52a8\uff0c\u4e0d\u91cd\u590d\u503c\u5f80\u524d\u632a\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('79f45975-6cf4-4243-8442-233014767c03')\"><img id=\"code_img_closed_79f45975-6cf4-4243-8442-233014767c03\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_79f45975-6cf4-4243-8442-233014767c03\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('79f45975-6cf4-4243-8442-233014767c03',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_79f45975-6cf4-4243-8442-233014767c03\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">3</span>     <span style=\"color: #0000ff;\">int</span> removeDuplicates(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">4</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\">5</span>         <span style=\"color: #0000ff;\">for</span>(i = j = <span style=\"color: #800080;\">1</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">6</span>             <span style=\"color: #0000ff;\">if</span>(A[i] != A[i - <span style=\"color: #800080;\">1</span>]) A[j ++] =<span style=\"color: #000000;\"> A[i];\n</span><span style=\"color: #008080;\">7</span>         <span style=\"color: #0000ff;\">return</span> n ? j : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">8</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">9</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/reverse-nodes-in-k-group/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Reverse Nodes in k-Group</span></a></p>\n<p>\u7528\u5934\u63d2\u6cd5\u6765\u505a\u7684\uff0c\u987a\u5e8f\u63d2\u5165\u5230\u9996\u8282\u70b9\u4e4b\u540e\uff0c\u5c31\u53cd\u8f6c\u4e86\u3002\u6bcf k \u4e2a\u8282\u70b9\u5904\u7406\u4e4b\u540e\uff0c\u628a\u9996\u8282\u6307\u9488\u70b9\u79fb\u52a8\u5230\u4e0b k \u4e2a\u7684\u5f00\u5934\u3002\u6700\u540e\u9762\u4e0d\u8db3 k \u4e2a\u7684\u8bdd\uff0c\u518d\u53cd\u8f6c\u56de\u6765\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('42078e9e-8c5c-4610-8a08-b3f52d0fae0b')\"><img id=\"code_img_closed_42078e9e-8c5c-4610-8a08-b3f52d0fae0b\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_42078e9e-8c5c-4610-8a08-b3f52d0fae0b\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('42078e9e-8c5c-4610-8a08-b3f52d0fae0b',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_42078e9e-8c5c-4610-8a08-b3f52d0fae0b\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">int</span> Reverse(ListNode *&amp;pre, ListNode *&amp;p, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> k)\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">14</span>         ListNode *nex, *<span style=\"color: #000000;\">tmp;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; p != NULL; i ++, p =<span style=\"color: #000000;\"> tmp)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">if</span>(i == <span style=\"color: #800080;\">1</span>) nex =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">18</span>             tmp = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">19</span>             p-&gt;next = pre-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">20</span>             pre-&gt;next =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">if</span>(i == k) i = <span style=\"color: #800080;\">0</span>, pre =<span style=\"color: #000000;\"> nex;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">23</span>         nex-&gt;next =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">26</span>     ListNode *reverseKGroup(ListNode *head, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> k) {\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">if</span>(head == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">28</span>         ListNode *tmphead = <span style=\"color: #0000ff;\">new</span> ListNode(<span style=\"color: #800080;\">0</span>), *pre = tmphead, *p =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">29</span>         tmphead-&gt;next =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">30</span>         <span style=\"color: #0000ff;\">if</span>(Reverse(pre, p, k) != <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">32</span>             p = pre-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\">            Reverse(pre, p, k);\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">35</span>         <span style=\"color: #0000ff;\">return</span> tmphead-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">37</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/swap-nodes-in-pairs/\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Swap Nodes in Pairs</span></span></span></a></p>\n<p>Reverse Nodes in k-Group\u7684\u7b80\u5316\u7248\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('6975be32-49d3-4182-bab9-804d0adc4f75')\"><img id=\"code_img_closed_6975be32-49d3-4182-bab9-804d0adc4f75\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_6975be32-49d3-4182-bab9-804d0adc4f75\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('6975be32-49d3-4182-bab9-804d0adc4f75',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_6975be32-49d3-4182-bab9-804d0adc4f75\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *swapPairs(ListNode *<span style=\"color: #000000;\">head) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(head == NULL) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">13</span>         ListNode *tmphead = <span style=\"color: #0000ff;\">new</span> ListNode(<span style=\"color: #800080;\">0</span>), *pre = tmphead, *p = head, *tmp, *<span style=\"color: #000000;\">nex;\n</span><span style=\"color: #008080;\">14</span>         tmphead-&gt;next =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; p != NULL; i ++, p =<span style=\"color: #000000;\"> tmp)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">if</span>(i &amp; <span style=\"color: #800080;\">1</span> ^ <span style=\"color: #800080;\">1</span>) nex =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">18</span>             tmp = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">19</span>             p-&gt;next = pre-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">20</span>             pre-&gt;next =<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">if</span>(i &amp; <span style=\"color: #800080;\">1</span>) pre =<span style=\"color: #000000;\"> nex;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">23</span>         nex-&gt;next =<span style=\"color: #000000;\"> NULL;\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">return</span> tmphead-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">26</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/merge-k-sorted-lists/\">Merge k Sorted Lists</a></h3>\n<p>\u4e00\u4e2a\u5806\uff08\u8fd9\u91cc\u7528\u4e86\u4f18\u5148\u7ea7\u961f\u5217\uff09\uff0c\u628a\u6240\u6709 list \u7684\u9996\u5143\u7d20\u653e\u5806\u91cc\uff0cO(logn)\u53d6\u5f97\u6700\u5c0f\u503c\u63d2\u5165\u65b0\u961f\u5217\uff0c\u5f02\u6b65\u63a8\u8fdb\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('65ccdffe-5e23-4f31-9ddd-a08ee1720cad')\"><img id=\"code_img_closed_65ccdffe-5e23-4f31-9ddd-a08ee1720cad\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_65ccdffe-5e23-4f31-9ddd-a08ee1720cad\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('65ccdffe-5e23-4f31-9ddd-a08ee1720cad',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_65ccdffe-5e23-4f31-9ddd-a08ee1720cad\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> comp\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>()(ListNode *a,ListNode *<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\">14</span>         {<span style=\"color: #0000ff;\">return</span> a-&gt;val &gt; b-&gt;<span style=\"color: #000000;\">val;}\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">    };\n</span><span style=\"color: #008080;\">16</span>     ListNode *mergeKLists(vector&lt;ListNode *&gt; &amp;<span style=\"color: #000000;\">lists) {\n</span><span style=\"color: #008080;\">17</span>         ListNode *tmphead = <span style=\"color: #0000ff;\">new</span> ListNode(<span style=\"color: #800080;\">0</span>), *p =<span style=\"color: #000000;\"> tmphead;\n</span><span style=\"color: #008080;\">18</span>         priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, comp&gt;<span style=\"color: #000000;\"> q;\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; lists.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span>             <span style=\"color: #0000ff;\">if</span>(lists[i] !=<span style=\"color: #000000;\"> NULL) q.push(lists[i]);\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">q.empty())\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">23</span>             p-&gt;next =<span style=\"color: #000000;\"> q.top();\n</span><span style=\"color: #008080;\">24</span>             p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">            q.pop();\n</span><span style=\"color: #008080;\">26</span>             <span style=\"color: #0000ff;\">if</span>(p -&gt;next != NULL) q.push(p-&gt;<span style=\"color: #000000;\">next);\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">return</span> tmphead-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">30</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/generate-parentheses/\">Generate Parentheses</a></h3>\n<p>DFS\uff0c\u4fdd\u6301\u5f53\u524d\u53f3\u62ec\u53f7\u4e0d\u591a\u4e8e\u5de6\u62ec\u53f7\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('ad7c5396-54e4-4747-b3c7-925361e85d5d')\"><img id=\"code_img_closed_ad7c5396-54e4-4747-b3c7-925361e85d5d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_ad7c5396-54e4-4747-b3c7-925361e85d5d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('ad7c5396-54e4-4747-b3c7-925361e85d5d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_ad7c5396-54e4-4747-b3c7-925361e85d5d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">int</span> left, <span style=\"color: #0000ff;\">int</span> right, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(left == right &amp;&amp; left ==<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            ans.push_back(tmp);\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">if</span>(left &lt;<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">14</span>             tmp[left + right] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>             DFS(left + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, right, n);\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">if</span>(right &lt;<span style=\"color: #000000;\"> left)\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">19</span>             tmp[left + right] = <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">)</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span>             DFS(left, right + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, n);\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; generateParenthesis(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">24</span>         tmp.resize(n &lt;&lt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">25</span>         DFS(<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, n);\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">28</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/valid-parentheses/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Valid Parentheses</span></a></p>\n<p>\u7528\u6808\u914d\u5bf9\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('3a1d3d37-9a29-4c30-8dca-d8c275fe072d')\"><img id=\"code_img_closed_3a1d3d37-9a29-4c30-8dca-d8c275fe072d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_3a1d3d37-9a29-4c30-8dca-d8c275fe072d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('3a1d3d37-9a29-4c30-8dca-d8c275fe072d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_3a1d3d37-9a29-4c30-8dca-d8c275fe072d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> isValid(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\"> 4</span>         stack&lt;<span style=\"color: #0000ff;\">char</span>&gt;<span style=\"color: #000000;\"> st;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">switch</span><span style=\"color: #000000;\">(s[i])\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 9</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">(</span><span style=\"color: #800000;\">'</span>: st.push(<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">(</span><span style=\"color: #800000;\">'</span>); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">[</span><span style=\"color: #800000;\">'</span>: st.push(<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">[</span><span style=\"color: #800000;\">'</span>); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">{</span><span style=\"color: #800000;\">'</span>: st.push(<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">{</span><span style=\"color: #800000;\">'</span>); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">)</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">13</span>                     <span style=\"color: #0000ff;\">if</span>(st.empty() || st.top() != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">(</span><span style=\"color: #800000;\">'</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>                     st.pop(); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">]</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">16</span>                     <span style=\"color: #0000ff;\">if</span>(st.empty() || st.top() != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">[</span><span style=\"color: #800000;\">'</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>                     st.pop(); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">}</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">19</span>                     <span style=\"color: #0000ff;\">if</span>(st.empty() || st.top() != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">{</span><span style=\"color: #800000;\">'</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span>                     st.pop(); <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">21</span>                     \n<span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> st.empty();\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">26</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/\">Remove Nth Node From End of List</a></h3>\n<p>\u4e24\u4e2a\u6307\u9488\u76f8\u9694 n \u8ddd\u79bb\uff0c\u524d\u9762\u7684\u6307\u9488\u5230\u4e86\u672b\u5c3e\uff0c\u540e\u9762\u7684\u6307\u9488\u5c31\u662f\u5220\u9664\u7684\u4f4d\u7f6e\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('5941284c-c4f7-4edb-9ef2-c7cb32168209')\"><img id=\"code_img_closed_5941284c-c4f7-4edb-9ef2-c7cb32168209\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_5941284c-c4f7-4edb-9ef2-c7cb32168209\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('5941284c-c4f7-4edb-9ef2-c7cb32168209',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_5941284c-c4f7-4edb-9ef2-c7cb32168209\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *removeNthFromEnd(ListNode *head, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">12</span>         ListNode *pre, *slow, *<span style=\"color: #000000;\">quick;\n</span><span style=\"color: #008080;\">13</span>         ListNode *newhead = <span style=\"color: #0000ff;\">new</span> ListNode(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">14</span>         newhead-&gt;next =<span style=\"color: #000000;\"> head;\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">for</span>(pre = slow = quick = newhead; quick != NULL; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">18</span>             pre =<span style=\"color: #000000;\"> slow;\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">if</span>(i &gt;= n) slow = slow-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">20</span>             quick = quick-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">22</span>         pre-&gt;next = slow-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        free(slow);\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">return</span> newhead-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">26</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/letter-combinations-of-a-phone-number/\">Letter Combinations of a Phone Number</a></h3>\n<p>\u57fa\u7840DFS\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('f548780e-877c-4a5b-a4ed-131fb90eadeb')\"><img id=\"code_img_closed_f548780e-877c-4a5b-a4ed-131fb90eadeb\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_f548780e-877c-4a5b-a4ed-131fb90eadeb\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('f548780e-877c-4a5b-a4ed-131fb90eadeb',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_f548780e-877c-4a5b-a4ed-131fb90eadeb\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">const</span> vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; v = {<span style=\"color: #800000;\">\"\"</span>, <span style=\"color: #800000;\">\"\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">abc</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">def</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ghi</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">jkl</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">mno</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">pqrs</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">tuv</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">wxyz</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">void</span> DFS(<span style=\"color: #0000ff;\">int</span> cur, <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> d)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">if</span>(cur ==<span style=\"color: #000000;\"> d.length())\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            ans.push_back(tmp);\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; v[d[cur] - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span>].length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             tmp[cur] = v[d[cur] - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">][i];\n</span><span style=\"color: #008080;\">16</span>             DFS(cur + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, d);\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">19</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; letterCombinations(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> digits) {\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        tmp.resize(digits.length());\n</span><span style=\"color: #008080;\">21</span>         DFS(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, digits);\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/4sum/\"><span style=\"color: #ff0000;\">4Sum</span></a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u5c1d\u8bd5\u4e86O(n^2)\u7684\uff0c\u4f46\u662f\u5e94\u8be5\u5e38\u6570\u5f88\u5927\u5427\uff0c\u8d85\u65f6\u4e86\u3002\u5c31\u662f\u54c8\u5e0c\u5b58\u4e24\u4e24\u7684\u548c\uff0c\u7136\u540e\u901a\u8fc7\u67e5\u54c8\u5e0c\u8868\u627e\u5230 \u4e24\u4e24+\u4e24\u4e24\uff0c\u8981\u5224\u65ad\u6570\u5b57\u91cd\u590d\u60c5\u51b5\u3002\u8fd9\u9898\u6570\u636e\u91cf\u633a\u5927\u7684\uff0cO(n^3)\u5982\u679c\u7528\u4e0d\u592a\u597d\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684\u8bdd\u4e5f\u4f1a\u8d85\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">O(n^3)\u65b9\u6cd5\uff1a\u5148\u5bf9num\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u4e24\u5934\u679a\u4e3e\u4e24\u4e2a\u6570\uff0cO(n^2)\uff0c\u540e\u4e24\u4e2a\u6570\u5728\u524d\u4e24\u4e2a\u6570\u4e4b\u95f4\u7684\u4e24\u7aef\u5f00\u59cb\uff0c\u548c\u5c0f\u4e86\u5de6\u8fb9\u7684\u5f80\u53f3\uff0c\u548c\u5927\u4e86\u53f3\u8fb9\u7684\u5f80\u5de6\u8c03\u6574\uff0cO(n)\uff0c\u603b\u5171O(n^3)\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('b1add403-7546-46bc-956b-8aed9a63ced4')\"><img id=\"code_img_closed_b1add403-7546-46bc-956b-8aed9a63ced4\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_b1add403-7546-46bc-956b-8aed9a63ced4\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('b1add403-7546-46bc-956b-8aed9a63ced4',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_b1add403-7546-46bc-956b-8aed9a63ced4\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; fourSum(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;num, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(num.size() &lt; <span style=\"color: #800080;\">4</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        sort(num.begin(), num.end());\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> left = <span style=\"color: #800080;\">0</span>; left &lt; num.size() - <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">;)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> right = num.size() - <span style=\"color: #800080;\">1</span>; right &gt; left + <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">int</span> ml = left + <span style=\"color: #800080;\">1</span>, mr = right - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">while</span>(ml &lt;<span style=\"color: #000000;\"> mr)\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">14</span>                     <span style=\"color: #0000ff;\">int</span> tmpsum = num[left] + num[right] + num[ml] +<span style=\"color: #000000;\"> num[mr];\n</span><span style=\"color: #008080;\">15</span>                     <span style=\"color: #0000ff;\">if</span>(tmpsum &gt; target) mr --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>                     <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(tmpsum &lt; target) ml ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>                     <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">19</span>                         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; tmp =<span style=\"color: #000000;\"> {num[left], num[ml], num[mr], num[right]};\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                        ans.push_back(tmp);\n</span><span style=\"color: #008080;\">21</span>                         ml ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">22</span>                         mr --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">24</span>                     <span style=\"color: #0000ff;\">for</span>(; ml != left + <span style=\"color: #800080;\">1</span> &amp;&amp; ml &lt; mr &amp;&amp; num[ml] == num[ml - <span style=\"color: #800080;\">1</span>]; ml ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">25</span>                     <span style=\"color: #0000ff;\">for</span>(; mr != right - <span style=\"color: #800080;\">1</span> &amp;&amp; ml &lt; mr &amp;&amp; num[mr] == num[mr + <span style=\"color: #800080;\">1</span>]; mr --<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">27</span>                 <span style=\"color: #0000ff;\">for</span>(right --; right &gt; left + <span style=\"color: #800080;\">2</span> &amp;&amp; num[right] == num[right + <span style=\"color: #800080;\">1</span>]; right --<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">for</span>(left ++; left &lt; num.size() - <span style=\"color: #800080;\">3</span> &amp;&amp; num[left] == num[left - <span style=\"color: #800080;\">1</span>]; left ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">31</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">33</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/3sum-closest/\">3Sum Closest</a></h3>\n<p>O(n^2)\uff0c\u5148\u6392\u5e8f\uff0c\u679a\u4e3e\u7b2c\u4e00\u4e2a\u6570\uff0c\u540e\u4e24\u4e2a\u6570\u4e00\u4e2a\u5728\u7b2c\u4e00\u4e2a\u6570\u540e\u8fb9\u4e00\u4e2a\u5f00\u59cb\uff0c\u4e00\u4e2a\u4ece \u672b\u5c3e\u5f00\u59cb\uff0c\u548c<span id=\"1KSFindDIV\" class=\"KSFIND_CLASS\">4Sum</span>\u7c7b\u4f3c\u8c03\u6574\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('50264a38-78ee-40b6-9d18-8019c7013c25')\"><img id=\"code_img_closed_50264a38-78ee-40b6-9d18-8019c7013c25\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_50264a38-78ee-40b6-9d18-8019c7013c25\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('50264a38-78ee-40b6-9d18-8019c7013c25',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_50264a38-78ee-40b6-9d18-8019c7013c25\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> threeSumClosest(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;num, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">bool</span> findans = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        sort(num.begin(), num.end());\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; num.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> left = i + <span style=\"color: #800080;\">1</span>, right = num.size() - <span style=\"color: #800080;\">1</span>; left &lt;<span style=\"color: #000000;\"> right;)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">int</span> tmpsum = num[i] + num[left] +<span style=\"color: #000000;\"> num[right];\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">if</span>(tmpsum &gt; target) right --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(tmpsum &lt; target) left ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tmpsum;\n</span><span style=\"color: #008080;\">15</span>                 <span style=\"color: #0000ff;\">if</span>(!findans || abs(tmpsum - target) &lt; abs(ans -<span style=\"color: #000000;\"> target))\n</span><span style=\"color: #008080;\">16</span>                     ans = tmpsum, findans = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">21</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/3sum/\">3Sum</a></h3>\n<p>\u540c\u4e0a\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('84f77e3e-0434-4904-adcf-0d261bbc80f8')\"><img id=\"code_img_closed_84f77e3e-0434-4904-adcf-0d261bbc80f8\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_84f77e3e-0434-4904-adcf-0d261bbc80f8\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('84f77e3e-0434-4904-adcf-0d261bbc80f8',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_84f77e3e-0434-4904-adcf-0d261bbc80f8\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 4</span>     vector&lt;vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &gt; threeSum(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">num) {\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(num.size() &lt; <span style=\"color: #800080;\">3</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        sort(num.begin(), num.end());\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt;<span style=\"color: #000000;\"> num.size();)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> left = i + <span style=\"color: #800080;\">1</span>, right = num.size() - <span style=\"color: #800080;\">1</span>; left &lt;<span style=\"color: #000000;\">right;)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">11</span>                 <span style=\"color: #0000ff;\">int</span> tmpsum = num[i] + num[left] +<span style=\"color: #000000;\"> num[right];\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">if</span>(tmpsum &lt; <span style=\"color: #800080;\">0</span>) left ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>                 <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(tmpsum &gt; <span style=\"color: #800080;\">0</span>) right --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">16</span>                     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; tmp =<span style=\"color: #000000;\"> {num[i], num[left], num[right]};\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">                    ans.push_back(tmp);\n</span><span style=\"color: #008080;\">18</span>                     left ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>                     right --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">21</span>                 <span style=\"color: #0000ff;\">for</span>(; left != i + <span style=\"color: #800080;\">1</span> &amp;&amp; left &lt; right &amp;&amp; num[left] == num[left - <span style=\"color: #800080;\">1</span>]; left ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">22</span>                 <span style=\"color: #0000ff;\">for</span>(; right != num.size() - <span style=\"color: #800080;\">1</span> &amp;&amp; left &lt; right &amp;&amp; num[right] == num[right + <span style=\"color: #800080;\">1</span>]; right --<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">24</span>             <span style=\"color: #0000ff;\">for</span>(i ++; i &lt; num.size() &amp;&amp; num[i] == num[i - <span style=\"color: #800080;\">1</span>]; i ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">28</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/longest-common-prefix/\">Longest Common Prefix</a></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u4e00\u4e2a\u4e00\u4e2a\u626b</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('5198e9ec-823b-4aad-bdcc-17dc30f684af')\"><img id=\"code_img_closed_5198e9ec-823b-4aad-bdcc-17dc30f684af\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_5198e9ec-823b-4aad-bdcc-17dc30f684af\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('5198e9ec-823b-4aad-bdcc-17dc30f684af',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_5198e9ec-823b-4aad-bdcc-17dc30f684af\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">string</span> longestCommonPrefix(vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; &amp;<span style=\"color: #000000;\">strs) {\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(strs.size() == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">if</span>(strs.size() == <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> strs[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; ; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; strs.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span>                 <span style=\"color: #0000ff;\">if</span>(strs[i].size() == j || strs[i][j] != strs[i - <span style=\"color: #800080;\">1</span>][j]) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">11</span>             ans += strs[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">][j];\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/roman-to-integer/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Roman to Integer</span></a></p>\n<p>\u5404\u6709\u5404\u7684\u65b9\u6cd5\uff0c\u91cd\u70b9\u662f\u8bb0\u5f55&ldquo;\u4e0a\u4e00\u4e2a&rdquo;\u6570\u6bd4&ldquo;\u8fd9\u4e2a&rdquo;\u6570\u5927\u6216\u5c0f\uff0c\u6765\u786e\u5b9a\u8c01\u51cf\u8c01\u3002\u57fa\u672c\u662f\u53f3\u7ed3\u5408\u7684\uff0c\u6240\u4ee5\u4ece\u540e\u5f80\u524d\u626b\u597d\u5904\u7406\u4e9b\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('a7b8ecb3-a543-4b5f-9efe-81d07779e16d')\"><img id=\"code_img_closed_a7b8ecb3-a543-4b5f-9efe-81d07779e16d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_a7b8ecb3-a543-4b5f-9efe-81d07779e16d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('a7b8ecb3-a543-4b5f-9efe-81d07779e16d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_a7b8ecb3-a543-4b5f-9efe-81d07779e16d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n    </span><span style=\"color: #0000ff;\">int</span> ro[<span style=\"color: #800080;\">128</span><span style=\"color: #000000;\">];\n    </span><span style=\"color: #0000ff;\">int</span> romanToInt(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n        ro[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">I</span><span style=\"color: #800000;\">'</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n        ro[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">V</span><span style=\"color: #800000;\">'</span>] = <span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">;\n        ro[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">X</span><span style=\"color: #800000;\">'</span>] = <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n        ro[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">L</span><span style=\"color: #800000;\">'</span>] = <span style=\"color: #800080;\">50</span><span style=\"color: #000000;\">;\n        ro[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">C</span><span style=\"color: #800000;\">'</span>] = <span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">;\n        ro[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">D</span><span style=\"color: #800000;\">'</span>] = <span style=\"color: #800080;\">500</span><span style=\"color: #000000;\">;\n        ro[</span><span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">M</span><span style=\"color: #800000;\">'</span>] = <span style=\"color: #800080;\">1000</span><span style=\"color: #000000;\">;\n        </span><span style=\"color: #0000ff;\">int</span> ans = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, last;\n        </span><span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = s.length() - <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n        {\n            </span><span style=\"color: #0000ff;\">if</span>(ans == -<span style=\"color: #800080;\">1</span>) ans =<span style=\"color: #000000;\"> ro[s[i]];\n            </span><span style=\"color: #0000ff;\">else</span><span style=\"color: #000000;\">\n            {\n                </span><span style=\"color: #0000ff;\">if</span>(last &gt; ro[s[i]]) ans -=<span style=\"color: #000000;\"> ro[s[i]];\n                </span><span style=\"color: #0000ff;\">else</span> ans +=<span style=\"color: #000000;\"> ro[s[i]];\n            }\n            last </span>=<span style=\"color: #000000;\"> ro[s[i]];\n        }\n        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n    }\n};</span></pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/integer-to-roman/\">Integer to Roman</a></h3>\n<p>\u6bcf\u4e2a\u5341\u8fdb\u5236\u4f4d\u683c\u5f0f\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u5b57\u6bcd\u66ff\u6362\u4e00\u4e0b\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('1f26d724-f861-4b6c-a92b-30efc13b834f')\"><img id=\"code_img_closed_1f26d724-f861-4b6c-a92b-30efc13b834f\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_1f26d724-f861-4b6c-a92b-30efc13b834f\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('1f26d724-f861-4b6c-a92b-30efc13b834f',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_1f26d724-f861-4b6c-a92b-30efc13b834f\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">string</span>&gt; table = {<span style=\"color: #800000;\">\"\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">I</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">II</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">III</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">IV</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">V</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">VI</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">VII</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">VIII</span><span style=\"color: #800000;\">\"</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">IX</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">string</span> ro = <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">IVXLCDM</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">char</span> convert(<span style=\"color: #0000ff;\">char</span> x, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(x == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">I</span><span style=\"color: #800000;\">'</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ro[i];\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">if</span>(x == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">V</span><span style=\"color: #800000;\">'</span>) <span style=\"color: #0000ff;\">return</span> ro[i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">if</span>(x == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">X</span><span style=\"color: #800000;\">'</span>) <span style=\"color: #0000ff;\">return</span> ro[i + <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">11</span>     <span style=\"color: #0000ff;\">string</span> intToRoman(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> num) {\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; num; i += <span style=\"color: #800080;\">2</span>, num /= <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">int</span> x = num % <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">string</span> tmp =<span style=\"color: #000000;\"> table[x];\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; tmp.size(); j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">18</span>                 tmp[j] =<span style=\"color: #000000;\"> convert(tmp[j], i);\n</span><span style=\"color: #008080;\">19</span>             ans = tmp +<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/container-with-most-water/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #ff0000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Container With Most Water</span></a></p>\n<p>\u4ece\u4e24\u7aef\u5f00\u59cb\u679a\u4e3e\uff0c\u8f83\u9ad8\u7684\u6321\u677f\u5f80\u4e2d\u95f4\u679a\u4e3e\u7684\u8bdd\u4e00\u5b9a\u65e0\u6cd5\u5f97\u5230\u66f4\u4f18\u89e3\uff0c\u6545\u53cd\u590d\u4ece\u8f83\u4f4e\u6321\u677f\u5411\u4e2d\u95f4\u679a\u4e3e\uff0cO(n)\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('4af4f9bc-df56-43e1-ad96-1623960173fe')\"><img id=\"code_img_closed_4af4f9bc-df56-43e1-ad96-1623960173fe\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_4af4f9bc-df56-43e1-ad96-1623960173fe\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('4af4f9bc-df56-43e1-ad96-1623960173fe',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_4af4f9bc-df56-43e1-ad96-1623960173fe\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> maxArea(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;<span style=\"color: #000000;\">height) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> left = <span style=\"color: #800080;\">0</span>, right = height.size() - <span style=\"color: #800080;\">1</span>, ans = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">while</span>(left &lt;<span style=\"color: #000000;\"> right)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             ans = max(ans, min(height[left], height[right]) * (right -<span style=\"color: #000000;\"> left));\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(height[left] &lt; height[right]) left ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">else</span> right --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">13</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/regular-expression-matching/\"><span style=\"color: #ff0000;\">Regular Expression Matching</span></a></span></h3>\n<p>\u6bcf\u9047\u5230\u4e00\u4e2a '*' \uff0c\u95ee\u9898\u90fd\u4f1a\u51fa\u73b0\u5206\u679d\uff0c\u9700\u8981\u7528\u5230\u6808\u6216\u8005\u9012\u5f52\u3002</p>\n<p>\u6ca1\u6709 '*' \u7684\u60c5\u51b5\u597d\u5904\u7406\uff0c\u9047\u5230 '*' \u7684\u65f6\u5019\uff0c\u7a77\u4e3e\u6240\u6709\u5339\u914d\u957f\u5ea6\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('153e850c-518b-4d4f-8da4-db3ff430413d')\"><img id=\"code_img_closed_153e850c-518b-4d4f-8da4-db3ff430413d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_153e850c-518b-4d4f-8da4-db3ff430413d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('153e850c-518b-4d4f-8da4-db3ff430413d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_153e850c-518b-4d4f-8da4-db3ff430413d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> isMatch(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *s, <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">p) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(*p == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> *s == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(*(p + <span style=\"color: #800080;\">1</span>) != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">*</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">if</span>(*s &amp;&amp; (*s == *p || *p == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\"> 8</span>                <span style=\"color: #0000ff;\">return</span> isMatch(s + <span style=\"color: #800080;\">1</span>, p + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">11</span>         <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">for</span>(; *s &amp;&amp; (*s == *p || *p == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">.</span><span style=\"color: #800000;\">'</span>); s ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">if</span>(isMatch(s, p + <span style=\"color: #800080;\">2</span>)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">return</span> isMatch(s, p + <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/palindrome-number/\">Palindrome Number</a></h3>\n<p>\u9996\u5148\u5904\u7406\u8d1f\u6570\u7684trick\u3002\u7136\u540e\u4e3b\u8981\u601d\u8def\u5c31\u662f\u901a\u8fc7 while(...) a = a * 10 + x % 10; \u6765\u5c06 x \u7ffb\u8f6c\u3002</p>\n<p>\u4f46\u662f\u6ce8\u610f\u5230 x \u5f88\u5927\u7684\u65f6\u5019\uff0c\u7ffb\u8f6c\u7684 x \u4f1a\u8d85\u51fa int \u8303\u56f4\uff0c\u4e5f\u8bb8\u4f1a\u521a\u597d\u6210\u4e3a\u53e6\u4e00\u4e2a\u548c a \u5f97\u51fa\u7684\u6570\u76f8\u7b49\u7684\u6b63\u6570\uff0c\u6240\u4ee5\u4e0d\u80fd\u5b8c\u5168\u7ffb\u8f6c\u540e\u5224\u65ad\uff0c\u800c\u53ef\u4ee5\u5728\u7ffb\u8f6c\u6070\u597d\u4e00\u534a\u7684\u65f6\u5019\u5224\u65ad\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('e930c0de-33a3-4ddc-a749-2219700d34c2')\"><img id=\"code_img_closed_e930c0de-33a3-4ddc-a749-2219700d34c2\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_e930c0de-33a3-4ddc-a749-2219700d34c2\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('e930c0de-33a3-4ddc-a749-2219700d34c2',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_e930c0de-33a3-4ddc-a749-2219700d34c2\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">bool</span> isPalindrome(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> x) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(x &lt; <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">if</span>(x == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">int</span> a = <span style=\"color: #800080;\">0</span>, b = x, cnt = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">while</span>(x /= <span style=\"color: #800080;\">10</span>) cnt ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(; b &amp;&amp; cnt &gt;= <span style=\"color: #800080;\">0</span>; b /= <span style=\"color: #800080;\">10</span>, cnt -= <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">) \n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> a == b / <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(cnt == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> a ==<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\">12</span>             a = a * <span style=\"color: #800080;\">10</span> + b % <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">16</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/string-to-integer-atoi/\">String to Integer (atoi)</a></h3>\n<p>\u4efb\u4f55\u7c7b\u4f3c\u591a\u7b26\u53f7\u3001\u7b26\u53f7\u6570\u5b57\u95f4\u6709\u7a7a\u683c\u7684\u5c0f\u95ee\u9898\u90fd\u76f4\u63a5\u8f93\u51fa 0\uff0c\u8fd9\u5c31\u597d\u529e\u4e86\u3002\u5904\u7406\u8d8a\u754c\u7528 long long\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('303e6ae1-cd39-4c44-bcf9-3cb1cc9152e1')\"><img id=\"code_img_closed_303e6ae1-cd39-4c44-bcf9-3cb1cc9152e1\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_303e6ae1-cd39-4c44-bcf9-3cb1cc9152e1\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('303e6ae1-cd39-4c44-bcf9-3cb1cc9152e1',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_303e6ae1-cd39-4c44-bcf9-3cb1cc9152e1\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> atoi(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">str) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">long</span> <span style=\"color: #0000ff;\">long</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">bool</span> flag = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(; *str == <span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span>; str ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">if</span>(*str == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">+</span><span style=\"color: #800000;\">'</span>) str ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(*str == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">-</span><span style=\"color: #800000;\">'</span>) flag = <span style=\"color: #0000ff;\">true</span>, str ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>         <span style=\"color: #0000ff;\">for</span>(; isdigit(*str); str ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">11</span>             ans = ans * <span style=\"color: #800080;\">10</span> + *str - <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">if</span>((flag ? -ans : ans) &gt; INT_MAX) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> INT_MAX;\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>((flag ? -ans : ans) &lt; INT_MIN) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> INT_MIN;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">return</span> (<span style=\"color: #0000ff;\">int</span>)(flag ? -<span style=\"color: #000000;\">ans : ans);\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">17</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/reverse-integer/\">Reverse Integer</a></h3>\n<p>\u8fd8\u662f\u5173\u4e8e\u8d8a\u754c\u7684\u8ba8\u8bba\uff0c\u4e0d\u8fc7\u8fd9\u9053\u9898\u672c\u8eab\u6ca1\u6709\u8bbe\u7f6e\u5904\u7406\u65b9\u5f0f\uff0c\u91cd\u70b9\u5728\u4e8e\u9762\u8bd5\u65f6\u7684\u4ea4\u6d41\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('85ef271c-a00f-4a12-9707-ee54d6e48b6b')\"><img id=\"code_img_closed_85ef271c-a00f-4a12-9707-ee54d6e48b6b\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_85ef271c-a00f-4a12-9707-ee54d6e48b6b\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('85ef271c-a00f-4a12-9707-ee54d6e48b6b',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_85ef271c-a00f-4a12-9707-ee54d6e48b6b\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">3</span>     <span style=\"color: #0000ff;\">int</span> reverse(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> x) {\n</span><span style=\"color: #008080;\">4</span>         <span style=\"color: #0000ff;\">int</span> a = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">5</span>         <span style=\"color: #0000ff;\">for</span>( <span style=\"color: #0000ff;\">int</span> b = x &gt;= <span style=\"color: #800080;\">0</span> ? x : -x; b; b /= <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">6</span>             a = a * <span style=\"color: #800080;\">10</span> + b % <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">7</span>         <span style=\"color: #0000ff;\">return</span> x &gt;= <span style=\"color: #800080;\">0</span> ? a : -<span style=\"color: #000000;\">a;\n</span><span style=\"color: #008080;\">8</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">9</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/zigzag-conversion/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">ZigZag Conversion</span></a></p>\n<p>\u9898\u610f\u7684 \"z\" \u5b57\u5f62\u6307\u4e00\u5217nRows\u4e2a\uff0c\u7136\u540e\u659c\u7740\u5f80\u53f3\u4e0a\u4e00\u683c\u4e00\u4e2a\u56de\u5230\u7b2c\u4e00\u884c\uff0c\u7136\u540e\u518d\u4e00\u5217nRows\u4e2a\u3002\u6bd4\u5982nRows=5\uff0c\u5982\u4e0b\uff1a</p>\n<table style=\"width: 435px;\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><colgroup><col span=\"15\" width=\"29\" /></colgroup>\n<tbody>\n<tr>\n<td class=\"xl65\" width=\"29\" height=\"26\">1</td>\n<td class=\"xl65\" width=\"29\">\u3000</td>\n<td class=\"xl65\" width=\"29\">\u3000</td>\n<td class=\"xl65\" width=\"29\">\u3000</td>\n<td class=\"xl65\" width=\"29\">9</td>\n<td class=\"xl65\" width=\"29\">\u3000</td>\n<td class=\"xl65\" width=\"29\">\u3000</td>\n<td class=\"xl65\" width=\"29\">\u3000</td>\n<td class=\"xl65\" width=\"29\">17</td>\n<td class=\"xl65\" width=\"29\">\u3000</td>\n<td class=\"xl65\" width=\"29\">\u3000</td>\n<td class=\"xl65\" width=\"29\">\u3000</td>\n<td class=\"xl65\" width=\"29\">25</td>\n<td class=\"xl66\" width=\"29\">\u3000</td>\n<td class=\"xl66\" width=\"29\">\u3000</td>\n</tr>\n<tr>\n<td class=\"xl65\" height=\"26\">2</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">8</td>\n<td class=\"xl65\">10</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">16</td>\n<td class=\"xl65\">18</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">24</td>\n<td class=\"xl65\">26</td>\n<td class=\"xl66\">\u3000</td>\n<td class=\"xl66\">\u3000</td>\n</tr>\n<tr>\n<td class=\"xl65\" height=\"26\">3</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">7</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">11</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">15</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">19</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">23</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">27</td>\n<td class=\"xl66\">\u3000</td>\n<td class=\"xl66\">&hellip;</td>\n</tr>\n<tr>\n<td class=\"xl65\" height=\"26\">4</td>\n<td class=\"xl65\">6</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">12</td>\n<td class=\"xl65\">14</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">20</td>\n<td class=\"xl65\">22</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">28</td>\n<td class=\"xl65\">30</td>\n<td class=\"xl66\">\u3000</td>\n</tr>\n<tr>\n<td class=\"xl65\" height=\"26\">5</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">13</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">21</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">\u3000</td>\n<td class=\"xl65\">29</td>\n<td class=\"xl66\">\u3000</td>\n<td class=\"xl66\">\u3000</td>\n</tr>\n</tbody>\n</table>\n<p>\u6bcf\u884c\u5b57\u6bcd\u5728\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u95f4\u9694\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u867d\u7136\u4e24\u5c42for\u5faa\u73af\uff0c\u4f46\u662fs\u4e2d\u6bcf\u4e2a\u5b57\u6bcd\u53ea\u8bbf\u95ee\u4e86\u4e00\u6b21\uff0cO(n)\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('8aa04ee4-925f-4d93-a525-fdca782af9a2')\"><img id=\"code_img_closed_8aa04ee4-925f-4d93-a525-fdca782af9a2\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_8aa04ee4-925f-4d93-a525-fdca782af9a2\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('8aa04ee4-925f-4d93-a525-fdca782af9a2',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_8aa04ee4-925f-4d93-a525-fdca782af9a2\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span> convert(<span style=\"color: #0000ff;\">string</span> s, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nRows) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">if</span>(nRows == <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> s;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">int</span> a = (nRows &lt;&lt; <span style=\"color: #800080;\">1</span>) - <span style=\"color: #800080;\">2</span>, b = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; nRows; i ++, a -= <span style=\"color: #800080;\">2</span>, b += <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">bool</span> flag = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = i; j &lt;<span style=\"color: #000000;\"> s.length(); \n</span><span style=\"color: #008080;\">11</span>                     j += flag ? (b ? b : a) : (a ? a : b), flag ^= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">12</span>                 ans +=<span style=\"color: #000000;\"> s[j];\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">16</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/longest-palindromic-substring/\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #ff0000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Longest Palindromic Substring</span></a></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u7f51\u4e0aO(n)\u7684\u65b9\u6cd5\u662f\u5389\u5bb3\u554a\u3002\u3002\u3002\u7b80\u5355\u89e3\u91ca\u5982\u4e0b\uff1a</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">1\u3001\u9884\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u524d\u540e\u52a0&ldquo;\u54e8\u5175&rdquo;\u5b57\u7b26\u6bd4\u5982 '!'\uff0c\u6bcf\u4e2a\u5b57\u6bcd\u65c1\u8fb9\u52a0\u8f85\u52a9\u5b57\u7b26\u6bd4\u5982'#'\uff0c\u8fd9\u6837\u4f8b\u5982\u5b57\u7b26\u4e32 s = \"ababbcbb\" \u5c31\u53d8\u6210 tmp = \"!#a#b#a#b#b#c#b#b#!\"\u3002\u8fd9\u6837\u7684\u597d\u5904\u662f\u4e0d\u7528\u8ba8\u8bba\u56de\u6587\u4e32\u957f\u5ea6\u7684\u5947\u5076\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">2\u3001\u5bf9\u8f6c\u5316\u540e\u7684\u4e32\uff0c\u7ef4\u62a4\u4e00\u4e2a center \u548c\u4e00\u4e2a reach\uff0ccenter \u662f\u5f53\u524d\u5df2\u53d1\u73b0\u7684 reach \u6700\u8fdc\u7684\u56de\u6587\u4e32\u4e2d\u5fc3\u4f4d\u7f6e\uff0creach \u662f\u8fd9\u4e2a\u56de\u6587\u4e32\u6700\u53f3\u7aef\u7684\u4f4d\u7f6e\uff0ccenter\u548creach\u53ef\u521d\u59cb\u5316\u4e3a 1\uff0c\u5373\u7b2c\u4e00\u4e2a'#'\u7684\u4f4d\u7f6e\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">3\u3001\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 vector&lt;int&gt; r(tmp.length())\uff0cr[i] \u8868\u793a i \u4f4d\u7f6e\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u534a\u5f84\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">4\u3001\u5728\u8003\u5bdf\u4f4d\u7f6e i \u7684\u65f6\u5019\uff0c\u6240\u6709 j &lt; i \u7684 r[j] \u90fd\u662f\u5df2\u77e5\u7684\u5b50\u95ee\u9898\u3002\u5982\u679c i \u5728 reach \u7684\u5de6\u8fb9\uff0c\u5219 i \u5305\u542b\u5728\u4ee5 center \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u4e2d\uff0c\u90a3\u4e48\u53ef\u4ee5\u60f3\u5230\uff0c\u5982\u679c\u548c i \u5173\u4e8e center \u5bf9\u79f0\u4f4d\u7f6e\u7684 mirrori \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u8986\u76d6\u8303\u56f4\u6ca1\u6709\u5230\u8fbe center \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u8fb9\u7f18\uff0c\u5219 i \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u80af\u5b9a\u548c mirrori \u7684\u4e00\u6837\u3002\u800c\u5982\u679c mirrori \u7684\u56de\u6587\u4e32\u5230\u8fbe\u4e86\u8fb9\u7f18\u751a\u81f3\u8d85\u8fc7\uff0c\u6216\u8005 i \u672c\u6765\u5c31\u5728 reach \u7684\u53f3\u8fb9\uff0c\u90a3\u4e48<span style=\"color: #0000ff;\">\u5bf9 i \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u8fdb\u884c\u4e00\u6b21\u6269\u5c55\uff0c\u5219\u7ed3\u679c \u6216\u8005\u521a\u597d\u4e0d\u6269\u5c55\uff0c\u6216\u8005\u4e00\u5b9a\u66f4\u65b0\u4e86reach</span>\u3002\u65e0\u8bba\u600e\u6837\uff0c\u8fd9\u91cc\u90fd\u5f97\u5230\u4e86 r[i]\u3002</span></span><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u77e5\u9053\u4e86\u6240\u6709 r[i]\uff0c\u7b54\u6848\u5c31\u51fa\u6765\u4e86\u3002</span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u6838\u5fc3\u95ee\u9898\u5728\u4e8e\u7b2c4\u6b65&ldquo;\u5bf9 i \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u8fdb\u884c\u6269\u5c55&rdquo;\u7684\u590d\u6742\u5ea6\u3002\u6bcf\u6b21\u53d1\u751f&ldquo;\u5bf9 i \u6269\u5c55&ldquo;\uff0c\u5fc5\u7136\u662f\u5bf9 reach \u7684\u6269\u5c55(\u4e5f\u53ef\u80fd\u521a\u597d\u4e0d\u6269\u5c55\uff0c\u8fd9\u4e2a\u4e0d\u5f71\u54cd\u590d\u6742\u5ea6\uff09\uff0c\u800c reach \u7684\u6269\u5c55\u8303\u56f4\u662f&nbsp;tmp \u7684\u957f\u5ea6\u5927\u7ea6 2n\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3a O(n)\u3002</span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('4bc8feb7-7135-40ad-8147-8fb071f6d317')\"><img id=\"code_img_closed_4bc8feb7-7135-40ad-8147-8fb071f6d317\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_4bc8feb7-7135-40ad-8147-8fb071f6d317\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('4bc8feb7-7135-40ad-8147-8fb071f6d317',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_4bc8feb7-7135-40ad-8147-8fb071f6d317\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">string</span> longestPalindrome(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\"> 4</span>         <span style=\"color: #0000ff;\">int</span> center = <span style=\"color: #800080;\">1</span>, reach = <span style=\"color: #800080;\">1</span>, ansstart = <span style=\"color: #800080;\">0</span>, anslength = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">string</span> tmp = <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">!#</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span>             tmp += s[i], tmp += <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">#</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         tmp + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">!</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> r(tmp.length());\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">2</span>; i &lt; tmp.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">int</span> mirrori = center * <span style=\"color: #800080;\">2</span> -<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">13</span>             r[i] = reach &gt; i ? min(r[mirrori], reach - i) : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">for</span>(; tmp[i + r[i] + <span style=\"color: #800080;\">1</span>] == tmp[i - r[i] - <span style=\"color: #800080;\">1</span>]; r[i] ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">if</span>(i + r[i] &gt; reach) reach = i + r[i], center =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">16</span>             <span style=\"color: #0000ff;\">if</span>(r[i] &gt;<span style=\"color: #000000;\"> anslength)\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">18</span>                 ansstart = i - r[i] &gt;&gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>                 anslength =<span style=\"color: #000000;\"> r[i];\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">22</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> s.substr(ansstart, anslength);\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/add-two-numbers/\">Add Two Numbers</a></h3>\n<p>\u5927\u6574\u6570\u52a0\u6cd5\u7684\u94fe\u8868\u7248\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('49f53ded-1556-4457-91e6-aaabb0fe3e51')\"><img id=\"code_img_closed_49f53ded-1556-4457-91e6-aaabb0fe3e51\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_49f53ded-1556-4457-91e6-aaabb0fe3e51\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('49f53ded-1556-4457-91e6-aaabb0fe3e51',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_49f53ded-1556-4457-91e6-aaabb0fe3e51\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #008000;\"> * Definition for singly-linked list.\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #008000;\"> * struct ListNode {\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #008000;\"> *     int val;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #008000;\"> *     ListNode *next;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #008000;\"> *     ListNode(int x) : val(x), next(NULL) {}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #008000;\"> * };\n</span><span style=\"color: #008080;\"> 8</span>  <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">11</span>     ListNode *addTwoNumbers(ListNode *l1, ListNode *<span style=\"color: #000000;\">l2) {\n</span><span style=\"color: #008080;\">12</span>         ListNode *ans = <span style=\"color: #0000ff;\">new</span> ListNode(<span style=\"color: #800080;\">0</span>), *p =<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">int</span> cur = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">14</span>         <span style=\"color: #0000ff;\">while</span>(l1 != NULL || l2 != NULL ||<span style=\"color: #000000;\"> cur)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">16</span>             p-&gt;val = (l1 ? l1-&gt;val : <span style=\"color: #800080;\">0</span>) + (l2 ? l2-&gt;val : <span style=\"color: #800080;\">0</span>) +<span style=\"color: #000000;\"> cur;\n</span><span style=\"color: #008080;\">17</span>             cur = p-&gt;val / <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>             p-&gt;val %= <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">if</span>(l1) l1 = l1-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">20</span>             <span style=\"color: #0000ff;\">if</span>(l2) l2 = l2-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">if</span>(l1 || l2 ||<span style=\"color: #000000;\"> cur)\n</span><span style=\"color: #008080;\">22</span>                 p-&gt;next = <span style=\"color: #0000ff;\">new</span> ListNode(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">23</span>             p = p-&gt;<span style=\"color: #000000;\">next;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">27</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<p><a href=\"http://oj.leetcode.com/problems/longest-substring-without-repeating-characters/\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 500 24px/26px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">Longest Substring Without Repeating Characters</span></span></span></a></p>\n<p>\u7ef4\u62a4\u4e00\u4e2a\u4e0d\u91cd\u590d\u5b57\u7b26\u7684\u533a\u95f4\u3002</p>\n<p>\u4ee3\u7801\u4e00\uff1a</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('29cf7589-39d4-4597-8fbe-133e0dc8638b')\"><img id=\"code_img_closed_29cf7589-39d4-4597-8fbe-133e0dc8638b\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_29cf7589-39d4-4597-8fbe-133e0dc8638b\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('29cf7589-39d4-4597-8fbe-133e0dc8638b',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_29cf7589-39d4-4597-8fbe-133e0dc8638b\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> lengthOfLongestSubstring(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;<span style=\"color: #0000ff;\">bool</span>&gt; isin(<span style=\"color: #800080;\">128</span>, <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> front = <span style=\"color: #800080;\">0</span>, rear = <span style=\"color: #800080;\">0</span>; front &lt; s.length(); front ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(isin[s[front]])\n</span><span style=\"color: #008080;\"> 9</span>                 <span style=\"color: #0000ff;\">for</span>(; rear &lt; front &amp;&amp; isin[s[front]]; isin[s[rear]] = <span style=\"color: #0000ff;\">false</span>, rear ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">10</span>             isin[s[front]] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>             ans = max(ans, front - rear + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>\u4ee3\u7801\u4e8c\uff1a</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('7c49298e-52e9-464b-b37d-bf4a0bbfd0dd')\"><img id=\"code_img_closed_7c49298e-52e9-464b-b37d-bf4a0bbfd0dd\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_7c49298e-52e9-464b-b37d-bf4a0bbfd0dd\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('7c49298e-52e9-464b-b37d-bf4a0bbfd0dd',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_7c49298e-52e9-464b-b37d-bf4a0bbfd0dd\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> lengthOfLongestSubstring(<span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> s) {\n</span><span style=\"color: #008080;\"> 4</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; site(<span style=\"color: #800080;\">128</span>, -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span> nowstart = -<span style=\"color: #800080;\">1</span>, ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; s.length(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(site[s[i]] &gt;=<span style=\"color: #000000;\"> nowstart)\n</span><span style=\"color: #008080;\"> 9</span>                 nowstart = site[s[i]] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span>             site[s[i]] =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">11</span>             ans = max(i - nowstart + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">15</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"color: #ff0000;\"><a href=\"http://oj.leetcode.com/problems/median-of-two-sorted-arrays/\"><span style=\"color: #ff0000;\">Median of Two Sorted Arrays</span></a></span></h3>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">&nbsp;\u5982\u679c A[pa] &lt; B[pb]\uff0c\u90a3\u4e48 A[pa] \u4e00\u5b9a\u5728 A \u4e0e B \u5408\u5e76\u540e\u7684\u524d&nbsp;pa + pb + 2&nbsp;\u4e2a\u6570\u4e2d\u3002</span></span></span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u8bc1\u660e\uff1a A \u4e2d\u6709 pa + 1&nbsp;\u4e2a\u6570 &lt;=&nbsp;A[pa]\uff0cB \u4e2d\u6709\u5c0f\u4e8e pb + 1 \u4e2a\u6570 &lt;= A[pa]\uff0c\u5408\u5e76\u540e\u6709\u5c11\u4e8epa + pb + 2 \u4e2a\u6570 &lt;= A[pa]\u3002</span></span></span></span></p>\n<p><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\"><span style=\"font: 14px/20px 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span class=\"Apple-converted-space\">\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u8fed\u4ee3\u627e&nbsp;A \u4e0e B \u5408\u5e76\u540e\u7684\u7b2c k \u5927\u6570\u3002</span></span></span></span></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('0a798fff-9594-455d-85d1-6eacaa5b2086')\"><img id=\"code_img_closed_0a798fff-9594-455d-85d1-6eacaa5b2086\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_0a798fff-9594-455d-85d1-6eacaa5b2086\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('0a798fff-9594-455d-85d1-6eacaa5b2086',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_0a798fff-9594-455d-85d1-6eacaa5b2086\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">int</span> findKth(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span> m, <span style=\"color: #0000ff;\">int</span> B[], <span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> k)\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pm, pn;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">while</span>(<span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(m == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> B[k - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">if</span>(n == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span> A[k - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">if</span>(k == <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> min(A[k - <span style=\"color: #800080;\">1</span>], B[k - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">if</span>(m &lt;= n) pm = min(k &gt;&gt; <span style=\"color: #800080;\">1</span>, m), pn = k -<span style=\"color: #000000;\"> pm;\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">else</span> pn = min(k &gt;&gt; <span style=\"color: #800080;\">1</span>, n), pm = k -<span style=\"color: #000000;\"> pn;\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">if</span>(A[pm - <span style=\"color: #800080;\">1</span>] &lt; B[pn - <span style=\"color: #800080;\">1</span>]) A += pm, m -= pm, k -=<span style=\"color: #000000;\"> pm;\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(A[pm - <span style=\"color: #800080;\">1</span>] &gt; B[pn - <span style=\"color: #800080;\">1</span>]) B += pn, n -= pn, k-=<span style=\"color: #000000;\"> pn;\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">return</span> A[pm - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">19</span>     <span style=\"color: #0000ff;\">double</span> findMedianSortedArrays(<span style=\"color: #0000ff;\">int</span> A[], <span style=\"color: #0000ff;\">int</span> m, <span style=\"color: #0000ff;\">int</span> B[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n) {\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">if</span>((m + n) &amp; <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> findKth(A, m, B, n, (m + n &gt;&gt; <span style=\"color: #800080;\">1</span>) + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">21</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">return</span> (findKth(A, m, B, n, m + n &gt;&gt; <span style=\"color: #800080;\">1</span>) + \n<span style=\"color: #008080;\">22</span>             findKth(A, m, B, n, (m + n &gt;&gt; <span style=\"color: #800080;\">1</span>) + <span style=\"color: #800080;\">1</span>)) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">24</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<h3 style=\"font: 500 24px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333333; text-transform: none; text-indent: 0px; letter-spacing: normal; margin-top: 20px; margin-bottom: 10px; word-spacing: 0px; display: inline; white-space: normal; box-sizing: border-box; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><a href=\"http://oj.leetcode.com/problems/two-sum/\">Two Sum</a></h3>\n<p>\u54c8\u5e0c\u5b58\u4f4d\u7f6e\uff0cO(n)\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('27adda97-53c2-48b3-a331-b15f5a465355')\"><img id=\"code_img_closed_27adda97-53c2-48b3-a331-b15f5a465355\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_27adda97-53c2-48b3-a331-b15f5a465355\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('27adda97-53c2-48b3-a331-b15f5a465355',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_27adda97-53c2-48b3-a331-b15f5a465355\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Solution {\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\"> 3</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; twoSum(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt; &amp;numbers, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> target) {\n</span><span style=\"color: #008080;\"> 4</span>         unordered_map&lt;<span style=\"color: #0000ff;\">int</span>, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> mp;\n</span><span style=\"color: #008080;\"> 5</span>         vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 6</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; numbers.size(); i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">if</span>(mp.count(target -<span style=\"color: #000000;\"> numbers[i]))\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">10</span>                 ans.push_back(mp[target - numbers[i]] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">11</span>                 ans.push_back(i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">12</span>                 <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">if</span>(!mp.count(numbers[i])) mp[numbers[i]] =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">18</span> };</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code</span></div>\n<p>&nbsp;</p>\n<div id=\"KSFIND_MASK\" style=\"background: #000000; padding: 0px !important; border: 0px currentColor !important; left: 0px !important; top: 0px !important; width: 0px; height: 0px; display: none; position: absolute !important; z-index: 1000000 !important; cursor: auto; opacity: 0.22;\">&nbsp;</div>"
			}, {
				"title": "MFC+Android\u6a21\u62df\u5668 \u5b9e\u73b0 \u81ea\u52a8\u73a9\u201c\u5929\u5929\u7231\u6d88\u9664\u201d",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/11/20/3434070.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 20 Nov 2013 09:57:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/11/20/3434070.html",
				"description": "<p align=\"left\">\u670b\u53cb\u7528QT\u505a\u4e86\u4e2a\u81ea\u52a8\u73a9\u7684\uff0c\u89c9\u5f97\u6709\u610f\u601d\uff0c\u81ea\u5df1\u4e5f\u60f3\u7528MFC\u505a\u4e2a\u8bd5\u8bd5\u3002</p>\n<p align=\"left\">\u6a21\u62df\u5668\u7528\u7684BlueStacks\u3002Android SDK\u5e26\u7684\u90a3\u4e2a\u6a21\u62df\u5668\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u8bbe\u7f6e\u7684\u95ee\u9898\uff0c\u5f00\u6e38\u620f\u5f88\u5361\u3002</p>\n<p align=\"left\">\u7528MFC\u5efa\u4e86\u5bf9\u8bdd\u6846\u5de5\u7a0b\uff0c\u914d\u7f6e\u6781\u7b80\u5316\u3002</p>\n<p align=\"left\">1\u3001\u63a7\u5236\u9f20\u6807\u79fb\u52a8</p>\n<div class=\"cnblogs_code\">\n<pre>SetCursorPos(x1, y1);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8bbe\u7f6e\u9f20\u6807\u4f4d\u7f6e</span>\nmouse_event(MOUSEEVENTF_LEFTDOWN, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5de6\u952e\u6309\u4e0b</span>\nSetCursorPos(x2, y2);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8bbe\u7f6e\u9f20\u6807\u4f4d\u7f6e</span>\nmouse_event(MOUSEEVENTF_LEFTUP, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5de6\u952e\u5f39\u8d77</span></pre>\n</div>\n<p>\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u9f20\u6807\u4ece(x1,y1)\u62d6\u62fd\u81f3(x2,y2)\u7684\u52a8\u4f5c\uff0c</p>\n<p align=\"left\">2\u3001\u83b7\u53d6\u5c4f\u5e55\u50cf\u7d20RGB</p>\n<p align=\"left\">\u8981\u80fd\u81ea\u52a8\u73a9\uff0c\u80af\u5b9a\u8981\u5206\u8fa8\u6e38\u620f\u754c\u9762\u4e2d\u4e0d\u540c\u5c0f\u52a8\u7269\u3002\u51e0\u4e2a\u5c0f\u52a8\u7269\u989c\u8272\u533a\u5206\u8fd8\u662f\u5f88\u660e\u663e\u7684\uff0c\u76f4\u89c2\u65b9\u6cd5\u5c31\u662f\u83b7\u53d6\u5c0f\u52a8\u7269\u4e2d\u5fc3\u4f4d\u7f6e\u50cf\u7d20\u7684RGB\u4e86\u3002</p>\n<p align=\"left\">MFC\u4e00\u4e2a\u4f20\u7edf\u65b9\u5f0f\u5c31\u662f\u7528GetPixel\u6765\u505a</p>\n<div class=\"cnblogs_code\">\n<pre>HDC hDC = ::GetDC(NULL);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u83b7\u53d6\u5c4f\u5e55</span>\nCOLORREF cl = GetPixel(hDC,point.x,point.y);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5f97\u5230\u5c4f\u5e55(x,y)\u5750\u6807\u50cf\u7d20\n\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u83b7\u53d6RGB</span>\nrr =<span style=\"color: #000000;\"> GetRValue(cl);\ngg </span>=<span style=\"color: #000000;\"> GetGValue(cl);\nbb </span>=<span style=\"color: #000000;\"> GetBValue(cl);\n\nCString tmp;\ntmp.Format(_T(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%02X%02X%02X</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">), rr, gg, bb);\nMessageBox(tmp);\n::ReleaseDC(NULL,hDC);</span></pre>\n</div>\n<p>\u4f46\u662f\u505a\u597d\u4e4b\u540e\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u81ea\u52a8\u73a9\u7684\u65f6\u5019\u53d1\u73b0\uff0c\u65e0\u8bbaTimer\u8bbe\u591a\u5c0f\uff0c\u51e0\u4e4e\u90fd\u662f\u4e00\u79d2\u52a8\u4e00\u4e0b\uff0c\u8fd9\u6837\u8fd8\u4e0d\u5982\u81ea\u5df1\u624b\u5feb\u70b9\u73a9\u7684\u5206\u9ad8\u3002<br />\u5206\u6bb5\u8f93\u51fa\u8fd0\u884c\u65f6\u95f4\u540e\u53d1\u73b0\uff0c\u4e00\u4e2aGetPixel()\u8981\u8fd0\u884c30ms\u3002\u597d\uff01\u6162\uff01\u554a\uff0149\u4e2a\u5c0f\u52a8\u7269\u7684\u989c\u8272\u83b7\u53d6\u4e0b\u6765\u5c31\u4e00\u79d2\u591a\u4e86\u3002</p>\n<p align=\"left\">\u4e8e\u662f\u7f51\u4e0a\u627e\u5230\u6709\u4eba\u8bf4\u7528GetDIBits\u3002\u5343\u8f9b\u4e07\u82e6\u627e\u5230\u4e86\u96f6\u788e\u7684\u5b9e\u73b0\u65b9\u6cd5\u3002\u5176\u5b9eBitmap\u6587\u4ef6\u7ed3\u6784\u8fd8\u662f\u719f\u6089\u7684\uff0c\u53d6\u4e2a\u50cf\u7d20\u4e0d\u5728\u8bdd\u4e0b\uff0c\u53ef\u662fMFC\u7684\u5404\u79cdHDC\u3001CDC\u3001BITMAP\u3001HBITMAP\u3001CBitmap\u641e\u5f97\u4eba\u597d\u6655\u554a\uff0c\u8f6c\u6765\u8f6c\u53bb\u7ec8\u4e8e\u662f\u628aHDC\u641e\u5230BITMAP\u91cc\u4e86\uff0c\u5269\u4e0b\u5c31\u80fd\u5f04\u4e86\u3002</p>\n<div class=\"cnblogs_code\">\n<pre>HDC hWinDC=<span style=\"color: #000000;\">::GetDC(NULL); \nHDC hMemDC</span>=<span style=\"color: #000000;\">CreateCompatibleDC(hWinDC); \nHBITMAP hMemBmp </span>=<span style=\"color: #000000;\"> CreateCompatibleBitmap(hWinDC,sizeX,sizeY); \nHBITMAP hBmpOld </span>=<span style=\"color: #000000;\"> (HBITMAP)SelectObject(hMemDC,hMemBmp); \nBitBlt(hMemDC,</span><span style=\"color: #800080;\">0</span>,<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">,sizeY,sizeX,hWinDC,m_startx,m_starty,SRCCOPY); \nSelectObject(hMemDC, hBmpOld); \nBITMAP bm;   \n::GetObject(hMemBmp,</span><span style=\"color: #0000ff;\">sizeof</span>(BITMAP),&amp;bm); </pre>\n</div>\n<p>\u6709\u4e86BITMAP\uff0c\u5c31\u7528bmp\u7684\u6587\u4ef6\u7ed3\u6784\u53bb\u62ff\u50cf\u7d20\u5427\u3002\u3002\u3002<br />\u6bcf\u6b21\u8ba1\u7b97\u65f6\u95f4\u5927\u7ea630ms\u3002</p>\n<p align=\"left\">&nbsp;</p>\n<p align=\"left\">3\u3001\u7b97\u6cd5</p>\n<p align=\"left\">\u66b4\u529b\u679a\u4e3e\u3002\u3002\u3002\u6ca1\u5565\u8bf4\u7684\u3002</p>\n<p align=\"left\">&nbsp;</p>\n<p align=\"left\">4\u3001\u70ed\u952e</p>\n<p align=\"left\">\u81ea\u52a8\u5f00\u59cb\u4e4b\u540e\u5982\u4f55\u505c\u4e0b\u6765\uff1f\u5b9a\u65f6\u81ea\u52a8\u505c\u4e0d\u592a\u5408\u9002\uff0c\u56e0\u4e3a\u6e38\u620f\u4e2d\u6709\u65f6\u95f4\u5956\u52b1\u3002\u6839\u636e\u5176\u4ed6\u6761\u4ef6\uff1f\u597d\u50cf\u7565\u590d\u6742\u3002</p>\n<p align=\"left\">\u81ea\u52a8\u8fdb\u884c\u7684\u65f6\u5019\u53ea\u8981\u9f20\u6807\u52a8\u4f5c\u6709\u89e6\u53d1\uff0c\u5c31\u6ca1\u6cd5\u901a\u8fc7\u952e\u76d8\u9f20\u6807\u56de\u5230\u7a0b\u5e8f\u6765\u7ec8\u6b62\uff0c\u6309\u952e\u7cbe\u7075\u4e4b\u7c7b\u7684\u5de5\u5177\u90fd\u4f1a\u6709\u70ed\u952e\uff0c\u4e8e\u662f\u67e5MFC\u70ed\u952e\u600e\u4e48\u641e\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">1\u3001\u81ea\u5df1\u5b9a\u4e49\u7cfb\u7edf\u7684WM_HOTKEY\u6d88\u606f</span>\n<span style=\"color: #0000ff;\">#define</span> ID_DOIT   0X6000 \n\n<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">2\u3001\u58f0\u660eOnHotkey\u65b9\u6cd5\uff0c\u5728.h\u5934\u6587\u4ef6\u7684\u4f4d\u7f6e</span>\n<span style=\"color: #000000;\">afx_msg LONG OnHotKey(WPARAM wPARAM, LPARAM lPARAM);\nDECLARE_MESSAGE_MAP()\n\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">3\u3001\u6dfb\u52a0BEGIN_MESSAGE_MAP\u4e2d\u7684\u58f0\u660e</span>\n<span style=\"color: #000000;\">BEGIN_MESSAGE_MAP(xxxxx, xxxxx)\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">...</span>\n<span style=\"color: #000000;\">ON_MESSAGE(WM_HOTKEY,OnHotKey)\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">...</span>\n<span style=\"color: #000000;\">END_MESSAGE_MAP()\n\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">4\u3001\u6ce8\u518c\u70ed\u952e\uff0c\u4e00\u822c\u5728OnInitDialog\uff0c\u8fd9\u91cc\u8bbe\u7f6ectrl+p</span>\n::RegisterHotKey(<span style=\"color: #0000ff;\">this</span>-&gt;GetSafeHwnd(),ID_DOIT,MOD_CONTROL,<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">P</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">);\n\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">5\u3001\u5b9e\u73b0OnHotKey\u65b9\u6cd5\uff0c\u5904\u7406\u5177\u4f53\u70ed\u952e\u4e8b\u4ef6\uff1a</span>\n<span style=\"color: #000000;\">LONG xxx::OnHotKey(WPARAM wPARAM, LPARAM lPARAM)\n{\n    DoSomething();\n    </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n}</span></pre>\n</div>\n<p><br />\u5982\u6b64\u4e0b\u6765\uff0c\u5c31\u5b8c\u6210\u4e86\u3002</p>\n<p align=\"left\">\u52a8\u753b\u6d88\u9664\u7684\u65f6\u5019\u3001\u6709\u67d0\u4e2a\u5c0f\u52a8\u7269\u95ea\u52a8\u7684\u65f6\u5019\u7a0b\u5e8f\u4f1a\u53d7\u5230\u5e72\u6270\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5f71\u54cd\u4e0d\u5927\uff0c\u70b9\u51fb\u7684\u9891\u7387\u8fd8\u662f\u633a\u5feb\u7684\u3002Timer\u8bbe\u7f6e150~250\uff0c\u4e5f\u5c31\u662f\u6bcf\u79d2\u81ea\u52a8\u64cd\u4f5c\u5927\u7ea64~8\u6b21\uff0c\u65e0\u6548\u64cd\u4f5c\u65e0\u6240\u8c13\u3002</p>\n<p align=\"left\">\u987a\u4fbf\u5f55\u4e86\u4e2a\u89c6\u9891\u3002\u6ca1\u7ba1\u5bf9\u8bdd\u6846\u754c\u9762\u6c42\u4e0d\u5410\u69fd\u3002\u3002\u3002\u7b97\u6cd5\u6ca1\u4f18\u5316\uff0c\u6a21\u62df\u5668\u4e5f\u7a0d\u6709\u70b9\u5361\uff0c\u8bd5\u4e86\u51e0\u76d8\u4e5f\u5c31\u4e00\u767e\u591a\u4e07\u5206\uff0c\u8fd8\u4e0d\u7b97\u592a\u53d8\u6001\u3002\u3002\u3002</p>\n<p align=\"left\">\u89c6\u9891\u5bc6\u7801\uff1a<span style=\"color: #ff0000;\">mfcttaxctest</span></p>\n<p align=\"left\"><span style=\"color: #ff0000;\"><object width=\"320\" height=\"240\" data=\"http://player.youku.com/player.php/sid/XNjM3MzM0NDYw/v.swf\" type=\"application/x-shockwave-flash\"><param name=\"src\" value=\"http://player.youku.com/player.php/sid/XNjM3MzM0NDYw/v.swf\" /></object></span></p>"
			}, {
				"title": "\u6e56\u53572013\u7b2c\u4e5d\u5c4a\u7701\u8d5b\u89e3\u9898\u62a5\u544a\uff08\u957f\u671f\u62d6\u5ef6\u66f4\u65b0\u4e2d\u3002\u3002\u3002\uff09",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/10/27/3391142.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Sun, 27 Oct 2013 11:36:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/10/27/3391142.html",
				"description": "<p>\u5076\u5c14\u505a\u4e00\u9898\uff0c\u505a\u4e00\u9898\u66f4\u65b0\u4e00\u9898\u597d\u4e86\u3002\u3002\u3002</p>\n<p>&nbsp;</p>\n<p>A\u3001<a href=\"http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1328\">COJ1328: \u8fd1\u4f3c\u56de\u6587\u8bcd</a></p>\n<p>\u8f6c\u5316\u7684\u65f6\u5019\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u6bcd\u5728\u539f\u4e32\u4f4d\u7f6e\uff0c\u5bf9\u65b0\u4e32\u679a\u4e3e\u4e2d\u70b9\uff0c\u5411\u4e24\u8fb9\u679a\u4e3e\u5224\u8fd1\u4f3c\u56de\u6587\uff0c\u66f4\u65b0\u66f4\u957f\u56de\u6587\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('7909dabb-eab3-4aa0-81fa-7d8b0aeb8cd8')\"><img id=\"code_img_closed_7909dabb-eab3-4aa0-81fa-7d8b0aeb8cd8\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_7909dabb-eab3-4aa0-81fa-7d8b0aeb8cd8\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('7909dabb-eab3-4aa0-81fa-7d8b0aeb8cd8',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_7909dabb-eab3-4aa0-81fa-7d8b0aeb8cd8\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> #include&lt;ctype.h&gt;\n<span style=\"color: #008080;\"> 5</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">1011</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\"> buf[maxn];\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">char</span> <span style=\"color: #0000ff;\">as</span><span style=\"color: #000000;\">[maxn];\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> p[maxn];\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> k;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">int</span> i, j, start, maxlen, alen, neq, ca = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;k) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        gets(buf);\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">        gets(buf);\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">for</span>(i = j = <span style=\"color: #800080;\">0</span>; buf[i]; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">18</span>             <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(isalpha(buf[i]))\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">20</span>                 <span style=\"color: #0000ff;\">as</span>[j] =<span style=\"color: #000000;\"> tolower(buf[i]);\n</span><span style=\"color: #008080;\">21</span>                 p[j] =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">22</span>                 j ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">as</span>[j] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span>         alen =<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">26</span>         maxlen = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">27</span>         start = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; <span style=\"color: #0000ff;\">as</span>[i]; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">30</span>             <span style=\"color: #0000ff;\">for</span>(j = neq = <span style=\"color: #800080;\">0</span>; i - j &gt;= <span style=\"color: #800080;\">0</span> &amp;&amp; i + j &lt; alen; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">32</span>                 neq += <span style=\"color: #0000ff;\">as</span>[i - j] != <span style=\"color: #0000ff;\">as</span>[i +<span style=\"color: #000000;\"> j];\n</span><span style=\"color: #008080;\">33</span>                 <span style=\"color: #0000ff;\">if</span>(neq &gt; k) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">35</span>             j --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">36</span>             <span style=\"color: #0000ff;\">if</span>(p[i + j] - p[i - j] + <span style=\"color: #800080;\">1</span> &gt;<span style=\"color: #000000;\"> maxlen)\n</span><span style=\"color: #008080;\">37</span>                 maxlen = p[i + j] - p[i - j] + <span style=\"color: #800080;\">1</span>, start = p[i -<span style=\"color: #000000;\"> j];\n</span><span style=\"color: #008080;\">38</span>             <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">1</span>, neq = <span style=\"color: #800080;\">0</span>; i - j &gt;= -<span style=\"color: #800080;\">1</span> &amp;&amp; i + j &lt; alen; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">40</span>                 neq += <span style=\"color: #0000ff;\">as</span>[i - j + <span style=\"color: #800080;\">1</span>] != <span style=\"color: #0000ff;\">as</span>[i +<span style=\"color: #000000;\"> j];\n</span><span style=\"color: #008080;\">41</span>                 <span style=\"color: #0000ff;\">if</span>(neq &gt; k) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">43</span>             j --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">44</span>             <span style=\"color: #0000ff;\">if</span>(j &lt;= <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">45</span>             <span style=\"color: #0000ff;\">if</span>(p[i + j] - p[i - j + <span style=\"color: #800080;\">1</span>] + <span style=\"color: #800080;\">1</span> &gt;<span style=\"color: #000000;\"> maxlen)\n</span><span style=\"color: #008080;\">46</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">47</span>                 maxlen = p[i + j] - p[i - j + <span style=\"color: #800080;\">1</span>] + <span style=\"color: #800080;\">1</span>, start = p[i - j + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">48</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">50</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Case %d: %d %d\\n</span><span style=\"color: #800000;\">\"</span>, ++ca, maxlen, start + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">51</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">52</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">53</span> }</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p>B\u3001<a href=\"http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1329\">COJ1329: \u4e00\u884c\u76d2\u5b50</a></p>\n<p>\u6784\u9020\u53cc\u5411\u94fe\u8868\uff0c\u6309\u8981\u6c42\u8fdb\u884c\u4e00\u7cfb\u5217\u94fe\u63a5\u64cd\u4f5c\uff0c\u5bf9\u53cd\u8f6c\u52a0\u4e00\u4e2a\u6807\u8bb0\u5373\u53ef\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('efd27e1f-c187-49df-bd2e-adfd9b66e46e')\"><img id=\"code_img_closed_efd27e1f-c187-49df-bd2e-adfd9b66e46e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_efd27e1f-c187-49df-bd2e-adfd9b66e46e\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('efd27e1f-c187-49df-bd2e-adfd9b66e46e',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_efd27e1f-c187-49df-bd2e-adfd9b66e46e\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\"> 5</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">100111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> turn;\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Box\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">10</span>     <span style=\"color: #0000ff;\">int</span> lr[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">Box b[maxn];\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, m, p, x, y;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #0000ff;\">void</span> init(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">16</span>     turn = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>     b[<span style=\"color: #800080;\">0</span>].lr[<span style=\"color: #800080;\">1</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt;= n + <span style=\"color: #800080;\">1</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">19</span>         b[i].lr[<span style=\"color: #800080;\">0</span>] = i - <span style=\"color: #800080;\">1</span>, b[i].lr[<span style=\"color: #800080;\">1</span>] = i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">23</span>     <span style=\"color: #0000ff;\">int</span> ca = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>     <span style=\"color: #0000ff;\">long</span> <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">25</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;m) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">        init(n);\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">while</span>(m --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">30</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">p);\n</span><span style=\"color: #008080;\">31</span>             <span style=\"color: #0000ff;\">switch</span><span style=\"color: #000000;\">(p)\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">33</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">34</span>                     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;x, &amp;<span style=\"color: #000000;\">y);\n</span><span style=\"color: #008080;\">35</span>                     b[b[x].lr[turn]].lr[!turn] = b[x].lr[!<span style=\"color: #000000;\">turn];\n</span><span style=\"color: #008080;\">36</span>                     b[b[x].lr[!turn]].lr[turn] =<span style=\"color: #000000;\"> b[x].lr[turn];\n</span><span style=\"color: #008080;\">37</span>                     b[x].lr[turn] =<span style=\"color: #000000;\"> b[y].lr[turn];\n</span><span style=\"color: #008080;\">38</span>                     b[x].lr[!turn] =<span style=\"color: #000000;\"> y;\n</span><span style=\"color: #008080;\">39</span>                     b[y].lr[turn] =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">40</span>                     b[b[x].lr[turn]].lr[!turn] =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">41</span>                     <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">42</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">43</span>                     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;x, &amp;<span style=\"color: #000000;\">y);\n</span><span style=\"color: #008080;\">44</span>                     b[b[x].lr[turn]].lr[!turn] = b[x].lr[!<span style=\"color: #000000;\">turn];\n</span><span style=\"color: #008080;\">45</span>                     b[b[x].lr[!turn]].lr[turn] =<span style=\"color: #000000;\"> b[x].lr[turn];\n</span><span style=\"color: #008080;\">46</span>                     b[x].lr[!turn] = b[y].lr[!<span style=\"color: #000000;\">turn];\n</span><span style=\"color: #008080;\">47</span>                     b[x].lr[turn] =<span style=\"color: #000000;\"> y;\n</span><span style=\"color: #008080;\">48</span>                     b[y].lr[!turn] =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">49</span>                     b[b[x].lr[!turn]].lr[turn] =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">50</span>                     <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">51</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">52</span>                     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;x, &amp;<span style=\"color: #000000;\">y);\n</span><span style=\"color: #008080;\">53</span>                     <span style=\"color: #0000ff;\">if</span>(b[x].lr[turn] != y &amp;&amp; b[x].lr[!turn] !=<span style=\"color: #000000;\"> y)\n</span><span style=\"color: #008080;\">54</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">55</span>                         b[b[x].lr[turn]].lr[!turn] =<span style=\"color: #000000;\"> y;\n</span><span style=\"color: #008080;\">56</span>                         b[b[x].lr[!turn]].lr[turn] =<span style=\"color: #000000;\"> y;\n</span><span style=\"color: #008080;\">57</span>                         b[b[y].lr[turn]].lr[!turn] =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">58</span>                         b[b[y].lr[!turn]].lr[turn] =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">59</span> <span style=\"color: #000000;\">                        swap(b[x], b[y]);\n</span><span style=\"color: #008080;\">60</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">61</span>                     <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">62</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">63</span>                         <span style=\"color: #0000ff;\">if</span>(b[x].lr[turn] ==<span style=\"color: #000000;\"> y) swap(x, y);\n</span><span style=\"color: #008080;\">64</span>                         b[b[x].lr[turn]].lr[!turn] =<span style=\"color: #000000;\"> y;\n</span><span style=\"color: #008080;\">65</span>                         b[b[y].lr[!turn]].lr[turn] =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">66</span>                         b[x].lr[!turn] = b[y].lr[!<span style=\"color: #000000;\">turn];\n</span><span style=\"color: #008080;\">67</span>                         b[y].lr[turn] =<span style=\"color: #000000;\"> b[x].lr[turn];\n</span><span style=\"color: #008080;\">68</span>                         b[x].lr[turn] =<span style=\"color: #000000;\"> y;\n</span><span style=\"color: #008080;\">69</span>                         b[y].lr[!turn] =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">70</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">71</span>                     <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">72</span>                 <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">73</span>                     turn  = !<span style=\"color: #000000;\">turn;\n</span><span style=\"color: #008080;\">74</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">75</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">76</span>         ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">77</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> start, end, cnt;\n</span><span style=\"color: #008080;\">78</span>         <span style=\"color: #0000ff;\">if</span>(!turn) start = <span style=\"color: #800080;\">0</span>, end = n + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">79</span>         <span style=\"color: #0000ff;\">else</span> start = n + <span style=\"color: #800080;\">1</span>, end = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">80</span>         cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">81</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = start; i != end; i = b[i].lr[!turn], cnt ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">82</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">83</span>             <span style=\"color: #0000ff;\">if</span>(cnt &amp; <span style=\"color: #800080;\">1</span>) ans +=<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">84</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">85</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Case %d: %lld\\n</span><span style=\"color: #800000;\">\"</span>, ++<span style=\"color: #000000;\">ca, ans);\n</span><span style=\"color: #008080;\">86</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">87</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">88</span> }</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p>C\u3001<a href=\"http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1330\">COJ1330: \u5b57\u7b26\u8bc6\u522b\uff1f</a></p>\n<p>\u68c0\u67e5\u7b2c\u56db\u884c\u661f\u53f7\u7684\u4f4d\u7f6e\u5373\u53ef</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('4d7e909a-ef85-4cf5-b1aa-be43272e8c7c')\"><img id=\"code_img_closed_4d7e909a-ef85-4cf5-b1aa-be43272e8c7c\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_4d7e909a-ef85-4cf5-b1aa-be43272e8c7c\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('4d7e909a-ef85-4cf5-b1aa-be43272e8c7c',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_4d7e909a-ef85-4cf5-b1aa-be43272e8c7c\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\"> 3</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">char</span> s[<span style=\"color: #800080;\">50</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 5</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, n;\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;n) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">4</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 9</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, s);\n</span><span style=\"color: #008080;\">10</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; (n &lt;&lt; <span style=\"color: #800080;\">2</span>); i += <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">if</span>(s[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">*</span><span style=\"color: #800000;\">'</span>) printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(s[i + <span style=\"color: #800080;\">1</span>] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">*</span><span style=\"color: #800000;\">'</span>) printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">else</span> printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">3</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">16</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, s);\n</span><span style=\"color: #008080;\">17</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">19</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">20</span> }</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>E\u3001<a href=\"http://acm.csu.edu.cn/OnlineJudge/problem.php?id=1332\">COJ1332: \u5272\u8033\u6cd5</a></p>\n<p>\u9996\u5148\u660e\u786e\uff0c1\u3001\u4efb\u4f55\u5bf9\u89d2\u7ebf\uff0c\u662f\u5426\u53ef\u4ee5\u5207\u5272\uff0c\u4e0e\u5207\u5272\u7684\u6b65\u9aa4\u65e0\u5173\u30022\u3001\u4efb\u4f55\u8fb9\u548c\u5207\u5272\u7684\u7ebf\uff0c\u90fd\u80af\u5b9a\u662f\u67d0\u4e2a\u4e09\u89d2\u5f62\u7684\u4e00\u6761\u8fb9\u3002</p>\n<p>\u7531\u6b64\uff0c\u9884\u5904\u7406\u6240\u6709\u53ef\u5207\u5272\u7684\u5bf9\u89d2\u7ebf\uff0c\u9009\u4e00\u6761\u8fb9\u4f5c\u4e3a\u8d77\u59cb\uff08p[0]~p[n-1]\u6700\u5408\u9002\uff0c\u53ef\u4fdd\u8bc1start&lt;end\uff09\uff0c\u5176\u4ed6\u7684\u70b9\u4e0e\u8fd9\u6761\u8fb9\u53ef\u6784\u6210\u4e09\u89d2\u5f62\u3002</p>\n<p>\u5982\u679c\u8fd9\u6761\u4e09\u89d2\u5f62\u9664\u4e86p[start]~p[end]\u8fd9\u6761\u8fb9\u4e4b\u5916\u7684\u4e24\u6761\u8fb9\u90fd\u662f\u53ef\u5207\u5272\u8fb9\uff08\u6216\u8005\u6709\u4e00\u6761\u662f\u591a\u8fb9\u5f62\u7684\u8fb9\uff09\uff0c\u5219\u53ef\u5206\u5272\u5b50\u95ee\u9898\u3002</p>\n<p>dp[start][end]\u8868\u793ap[start]~p[end]\u4e3a\u8d77\u59cb\u8fb9\uff0c\u4e0ep[start~end]\u7684\u8fd9\u4e9b\u70b9\u6784\u6210\u7684\u591a\u8fb9\u5f62\u4f5c\u4e3a\u5b50\u95ee\u9898\u5207\u5272\u4e4b\u540e\u7684\u6700\u4f18\u89e3\u3002</p>\n<p>\u8fd9\u6837\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e3adp[start][end] = dp[start][i] + dp[i][end] + Dis(p[start], p[i]) + Dis(p[i], p[end])\uff0c\u800c\u6709\u4e00\u6761\u8fb9\u662f\u591a\u8fb9\u5f62\u8fb9\u7684\u65f6\u5019\u7279\u522b\u5904\u7406\u4e00\u4e0b\u3002</p>\n<p>\u53e6\u5916\u5224\u65ad\u662f\u5426\u4e3a\u53ef\u5207\u5272\u5bf9\u89d2\u7ebf\u7684\u65f6\u5019\uff0c\u8981\u6ce8\u610f1\u3001\u5bf9\u89d2\u7ebf\u4e0d\u4e0e\u4efb\u4f55\u5176\u4ed6\u8fb9\u89c4\u8303\u76f8\u4ea4\u30022\u3001\u5176\u4ed6\u4efb\u4f55\u9876\u70b9\u4e0d\u5728\u5bf9\u89d2\u7ebf\u4e0a\u30023\u3001\u5bf9\u89d2\u7ebf\u4e0d\u5728\u591a\u8fb9\u5f62\u5916\u90e8\u3002</p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('2000a792-eef9-45ac-b953-7145d0c3217d')\"><img id=\"code_img_closed_2000a792-eef9-45ac-b953-7145d0c3217d\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_2000a792-eef9-45ac-b953-7145d0c3217d\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('2000a792-eef9-45ac-b953-7145d0c3217d',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" />\n<div id=\"cnblogs_code_open_2000a792-eef9-45ac-b953-7145d0c3217d\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> inf =<span style=\"color: #000000;\"> 1e20;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">  9</span> inline <span style=\"color: #0000ff;\">double</span> dcmp(<span style=\"color: #0000ff;\">double</span> x){<span style=\"color: #0000ff;\">return</span> (x &gt; eps) - (x &lt; -<span style=\"color: #000000;\">eps);}\n</span><span style=\"color: #008080;\"> 10</span> inline <span style=\"color: #0000ff;\">double</span> min(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span> b) {<span style=\"color: #0000ff;\">return</span> a &lt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 11</span> inline <span style=\"color: #0000ff;\">double</span> max(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span> b) {<span style=\"color: #0000ff;\">return</span> a &gt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 12</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 15</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;\n</span><span style=\"color: #008080;\"> 16</span>     Point(){x = y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 17</span>     Point(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span> b){x = a, y =<span style=\"color: #000000;\"> b;}\n</span><span style=\"color: #008080;\"> 18</span>     inline Point <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 19</span>     {<span style=\"color: #0000ff;\">return</span> Point(x - b.x, y -<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 20</span>     inline Point <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 21</span>     {<span style=\"color: #0000ff;\">return</span> Point(x + b.x, y +<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 22</span>     inline Point <span style=\"color: #0000ff;\">operator</span>*(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 23</span>     {<span style=\"color: #0000ff;\">return</span> Point(x * b, y *<span style=\"color: #000000;\"> b);}\n</span><span style=\"color: #008080;\"> 24</span>     inline <span style=\"color: #0000ff;\">double</span> Dis(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 25</span>     {<span style=\"color: #0000ff;\">return</span> sqrt(Sqr(x - b.x) + Sqr(y -<span style=\"color: #000000;\"> b.y));}\n</span><span style=\"color: #008080;\"> 26</span>     inline <span style=\"color: #0000ff;\">double</span> cross(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 27</span>     {<span style=\"color: #0000ff;\">return</span> (b.x - x) * (c.y - y) - (c.x - x) * (b.y -<span style=\"color: #000000;\"> y);}\n</span><span style=\"color: #008080;\"> 28</span>     inline <span style=\"color: #0000ff;\">double</span> dot(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 29</span>     {<span style=\"color: #0000ff;\">return</span> x * b.x + y *<span style=\"color: #000000;\"> b.y;}\n</span><span style=\"color: #008080;\"> 30</span>     inline <span style=\"color: #0000ff;\">bool</span> InLine(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 31</span>     {<span style=\"color: #0000ff;\">return</span> !<span style=\"color: #000000;\">dcmp(cross(b, c));}\n</span><span style=\"color: #008080;\"> 32</span>     inline <span style=\"color: #0000ff;\">bool</span> OnSeg(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 33</span>     {<span style=\"color: #0000ff;\">return</span> InLine(b, c) &amp;&amp; (*<span style=\"color: #0000ff;\">this</span> - c).dot(*<span style=\"color: #0000ff;\">this</span> - b) &lt;<span style=\"color: #000000;\"> eps;}\n</span><span style=\"color: #008080;\"> 34</span>     inline <span style=\"color: #0000ff;\">bool</span> InSeg(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 35</span>     {<span style=\"color: #0000ff;\">return</span> InLine(b, c) &amp;&amp; (*<span style=\"color: #0000ff;\">this</span> - c).dot(*<span style=\"color: #0000ff;\">this</span> - b) &lt; -<span style=\"color: #000000;\">eps;}\n</span><span style=\"color: #008080;\"> 36</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 37</span> <span style=\"color: #0000ff;\">bool</span> SegCross(<span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">d)\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 39</span>     <span style=\"color: #0000ff;\">return</span> dcmp(a.cross(b, c) * a.cross(b, d)) &lt; <span style=\"color: #800080;\">0</span> &amp;&amp; dcmp(c.cross(d, a) * c.cross(d, b)) &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #000000;\">Point p[maxn];\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> dp[maxn][maxn];\n</span><span style=\"color: #008080;\"> 44</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> vis[maxn][maxn];\n</span><span style=\"color: #008080;\"> 45</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> cancut[maxn][maxn];\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #0000ff;\">double</span> DPS(<span style=\"color: #0000ff;\">int</span> start, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> end)\n</span><span style=\"color: #008080;\"> 47</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 48</span>     <span style=\"color: #0000ff;\">double</span> &amp;ans =<span style=\"color: #000000;\"> dp[start][end];\n</span><span style=\"color: #008080;\"> 49</span>     <span style=\"color: #0000ff;\">if</span>(vis[start][end]) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 50</span>     vis[start][end] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 51</span>     <span style=\"color: #0000ff;\">if</span>(end - start &lt;= <span style=\"color: #800080;\">2</span>) <span style=\"color: #0000ff;\">return</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 52</span>     ans =<span style=\"color: #000000;\"> inf;\n</span><span style=\"color: #008080;\"> 53</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\"> 54</span>     <span style=\"color: #0000ff;\">if</span>(cancut[start][end - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 55</span>         ans = min(ans, DPS(start, end - <span style=\"color: #800080;\">1</span>) + p[start].Dis(p[end - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\"> 56</span>     <span style=\"color: #0000ff;\">if</span>(cancut[start + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][end])\n</span><span style=\"color: #008080;\"> 57</span>         ans = min(ans, DPS(start + <span style=\"color: #800080;\">1</span>, end) + p[start + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].Dis(p[end]));\n</span><span style=\"color: #008080;\"> 58</span>     <span style=\"color: #0000ff;\">for</span>(i = start + <span style=\"color: #800080;\">2</span>; i &lt; end - <span style=\"color: #800080;\">1</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 59</span>         <span style=\"color: #0000ff;\">if</span>(cancut[start][i] &amp;&amp;<span style=\"color: #000000;\"> cancut[i][end])\n</span><span style=\"color: #008080;\"> 60</span>             ans = min(ans, DPS(start, i) + DPS(i, end) + p[start].Dis(p[i]) +<span style=\"color: #000000;\"> p[i].Dis(p[end]));\n</span><span style=\"color: #008080;\"> 61</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 63</span> \n<span style=\"color: #008080;\"> 64</span> <span style=\"color: #0000ff;\">bool</span> InSimplePolygon(Point u, Point p[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 65</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 66</span>   <span style=\"color: #0000ff;\">int</span> flag = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 67</span>   <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #000000;\">  {\n</span><span style=\"color: #008080;\"> 69</span>     Point p1 =<span style=\"color: #000000;\"> p[i];\n</span><span style=\"color: #008080;\"> 70</span>     Point p2 = p[(i+<span style=\"color: #800080;\">1</span>)%<span style=\"color: #000000;\">n];\n</span><span style=\"color: #008080;\"> 71</span>     <span style=\"color: #0000ff;\">if</span>(u.OnSeg(p1, p2)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 72</span>     <span style=\"color: #0000ff;\">int</span> k =<span style=\"color: #000000;\"> dcmp(p1.cross(p2, u));\n</span><span style=\"color: #008080;\"> 73</span>     <span style=\"color: #0000ff;\">int</span> d1 = dcmp(p1.y -<span style=\"color: #000000;\"> u.y);\n</span><span style=\"color: #008080;\"> 74</span>     <span style=\"color: #0000ff;\">int</span> d2 = dcmp(p2.y -<span style=\"color: #000000;\"> u.y);\n</span><span style=\"color: #008080;\"> 75</span>     <span style=\"color: #0000ff;\">if</span>(k &gt; <span style=\"color: #800080;\">0</span> &amp;&amp; d1 &lt;= <span style=\"color: #800080;\">0</span> &amp;&amp; d2 &gt; <span style=\"color: #800080;\">0</span>) flag++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">if</span>(k &lt; <span style=\"color: #800080;\">0</span> &amp;&amp; d2 &lt;= <span style=\"color: #800080;\">0</span> &amp;&amp; d1 &gt; <span style=\"color: #800080;\">0</span>) flag--<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 77</span> <span style=\"color: #000000;\">  }\n</span><span style=\"color: #008080;\"> 78</span>   <span style=\"color: #0000ff;\">return</span> flag != <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 80</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> InitCanCut()\n</span><span style=\"color: #008080;\"> 81</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 82</span>     memset(cancut, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(cancut));\n</span><span style=\"color: #008080;\"> 83</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 84</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = i + <span style=\"color: #800080;\">2</span>; j &lt; n; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 85</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 86</span>             <span style=\"color: #0000ff;\">if</span>(i == <span style=\"color: #800080;\">0</span> &amp;&amp; j == n - <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 87</span>             <span style=\"color: #0000ff;\">int</span> k =<span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\"> 88</span>             <span style=\"color: #0000ff;\">for</span>(k = <span style=\"color: #800080;\">0</span>; k &lt; n; k ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 89</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 90</span>                 <span style=\"color: #0000ff;\">if</span>(SegCross(p[i], p[j], p[k], p[k + <span style=\"color: #800080;\">1</span>]) || (k != i &amp;&amp; k != j &amp;&amp;<span style=\"color: #000000;\"> p[k].InSeg(p[i], p[j])))\n</span><span style=\"color: #008080;\"> 91</span>                     <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 92</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 93</span>             <span style=\"color: #0000ff;\">if</span>(k == n &amp;&amp; InSimplePolygon((p[i] + p[j]) * <span style=\"color: #800080;\">0.5</span>, p, n)) cancut[i][j] = cancut[j][i] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 94</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 95</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 96</span> \n<span style=\"color: #008080;\"> 97</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 99</span>     <span style=\"color: #0000ff;\">int</span> ca = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">100</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;n) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">101</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">102</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">103</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;p[i].x, &amp;<span style=\"color: #000000;\">p[i].y);\n</span><span style=\"color: #008080;\">104</span>         p[n] = p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #000000;\">        InitCanCut();\n</span><span style=\"color: #008080;\">106</span>         memset(vis, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(vis));\n</span><span style=\"color: #008080;\">107</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Case %d: %.4f\\n</span><span style=\"color: #800000;\">\"</span>, ++ca, DPS(<span style=\"color: #800080;\">0</span>, n - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">109</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">110</span> }</pre>\n</div>\n<span class=\"cnblogs_code_collapse\">View Code </span></div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>"
			}, {
				"title": "AJAX\u521d\u5c1d\u8bd5\u2014\u2014ACM/ICPC\u7c7b\u6bd4\u8d5b\u6c14\u7403\u7ba1\u7406\u7cfb\u7edf",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/10/09/3359192.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 09 Oct 2013 06:33:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/10/09/3359192.html",
				"description": "<p>\u5f88\u65e9\u4e4b\u524d\u505a\u8fc7\u4e00\u4e2a\uff0c\u767d\u677f\u6ca1\u754c\u9762\uff0c20\u79d2\u66b4\u529b\u5237\u65b0\uff0c\u6570\u636e\u5e93\u6bcf\u4e2ateam\u4e00\u4e2an\u5217\u7684\u5bf9\u5e94n\u4e2a\u9898\u76ee\u7684\u6807\u8bb0\u9879\uff0c\u53ea\u80fd\u5bf9\u5355\u4e2a\u6bd4\u8d5b\u66b4\u529b\u628a\u5168\u90e8user_id\u5bfc\u5165\u5355\u72ec\u7684\u6c14\u7403\u8868\uff08\u4e5f\u5c31\u662fcid=1000\u7528\u8fd9\u4e2a\u8868\u7684\u8bdd\uff0ccid1001\u5c31\u4e0d\u80fd\u7528\uff09\u3002</p>\n<p>\u540e\u53f0\u6548\u7387\u4e14\u4e0d\u8bf4\u4e86\uff0c\u5bf9\u5355\u4e2a\u6bd4\u8d5b\u800c\u8a00\uff0c\u6700\u4e0d\u8212\u670d\u7684\u5c31\u662f\u9875\u9762\u6d4f\u89c8\u5230\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u6807\u8bb0\u67d0\u4e2ateam\u6c14\u7403\u5df2\u53d1\uff0c\u4e3a\u4e86\u628a\u6570\u636e\u5b58\u5165\u6570\u636e\u5e93\uff0c\u9875\u9762\u5237\u65b0\uff0c\u76f4\u63a5\u56de\u5230\u9876\u7aef\u53bb\u4e86\u3002\u8bf8\u5982\u6b64\u7c7b\u5f88\u591a\u4e0d\u8212\u670d\u7684\u5730\u65b9\u3002</p>\n<p>\u4eca\u5e74\u7701\u8d5b\u8bf4\u4ec0\u4e48\u4e5f\u4e0d\u80fd\u7528PC^2\u4e86\uff0c\u6ca1\u6709\u4e13\u95e8\u7684\u88c1\u5224\u56e2\u961f\uff0c\u4e00\u4e2a\u4eba\u7ba1PC^2\u8981\u7d2f\u6b7b\u53bb\u3002\u7528\u8d77OJ\uff0c\u6c14\u7403\u7cfb\u7edf\u4e5f\u8981\u52c9\u5f3a\u4e0a\u53f0\u9762\u5427\u3002\u3002</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>\n<p>\u91cd\u65b0\u628a\u6c14\u7403\u8868\u505a\u6210\u4e86:[\u7f16\u53f7] | [\u7528\u6237ID] | [\u6bd4\u8d5bID] | [\u6c14\u7403\u6807\u8bb0]\uff08\u7528int\u7684\u4e8c\u8fdb\u5236\u4f4d\uff09</p>\n<p>\u7cfb\u7edf\u540e\u53f0\u589e\u52a0Private\u6bd4\u8d5b\u7684\u65f6\u5019\uff0cPrivate\u53c2\u8d5b\u8005\u6743\u9650\u4fe1\u606f\uff08\u6709\u7528\u6237ID\u5bf9\u5e94\u6bd4\u8d5bID\uff09\u540c\u65f6\u5bfc\u5165\u6c14\u7403\u8868\u3002</p>\n<p><span style=\"color: #0000ff;\">&middot;1&middot; <span style=\"color: #000000;\">\u5f00\u59cb\u8fd8\u7ea0\u7ed3\u5f53\u4fee\u6539Private\u6743\u9650\u65f6\u5019\u6c14\u7403\u8868\u8981\u600e\u4e48\u5bf9\u5e94\u589e\u5220\u6761\u76ee\uff0c\u4e00\u5c42for\u5faa\u73af+NOT EXISTS (SELECT xxx)\u4f3c\u4e0d\u591f\u9ad8\u6548\u3002\u540e\u6765\u53d1\u73b0\u8fd8\u662f\u81ea\u5df1\u7684sql\u592a\u5c0f\u767d\u4e86\uff0cINSERT+SELECT\u662f\u53ef\u4ee5\u4ece\u4e00\u4e2a\u8868\u6279\u91cf\u5bfc\u5165\u53e6\u4e00\u4e2a\u8868\u7684\u3002\u76f8\u5bf9\u800c\u8a00DELETE\u5c31\u7b80\u5355\u8bb8\u591a\u4e86\u3002\u4fdd\u7559\u4e86[\u6c14\u7403\u6807\u8bb0]\u4e0d\u4e3a0\u7684\u4fe1\u606f\uff0c\u4ee5\u514dPrivate\u6743\u9650\u518d\u6b21\u4fee\u6539\u53c8\u628a\u8fd9\u4e2aID\u91cd\u65b0\u52a0\u8fdb\u6765\u53d1\u591a\u6c14\u7403\u3002</span></span></p>\n<p>\u65e9\u524d\u505a\u7684\u6c14\u7403\u7cfb\u7edf\u662f\u7528\u539fOJ\u7684Rank\u4fee\u6539\u7684\uff0c\u8fd9\u6b21\u7ec6\u770b\u4e86\u4e00\u4e0bRank\u4ee3\u7801\u548c\u6570\u636e\u5e93\u7684\u5173\u7cfb\uff0c\u91cd\u5199\u4e86\u4e00\u904d\u51fa\u9898\u4fe1\u606f\u7684\u8bfb\u53d6\uff0c\u6c14\u7403\u699c\u505a\u6210\u4e86\u9759\u6001\u7684\uff0c\u4e0d\u6309Rank\u6392\u5e8f\uff0c\u8fd9\u6837\u4e5f\u8bb8\u65b9\u4fbf\u5de5\u4f5c\u4eba\u5458\u770b\u6c14\u7403\u548c\u961f\u4f0d\u7684\u5bf9\u5e94\u5173\u7cfb\u5427\uff0c\u8df3\u6765\u8df3\u53bb\u7684\u53d1\u6c14\u7403\u5e94\u8be5\u4e0d\u592a\u8212\u670d\u3002</p>\n<p>&nbsp;</p>\n<p>\u5199AJAX\u7528\u7684GET\u65b9\u5f0f\uff0c\u540e\u53f0\u7b80\u5355\u5224\u65ad\u4e86\u4e00\u4e0b\u6c14\u7403\u7ba1\u7406\u5458\u7684SESSION\uff0c\u4fee\u6539\u6c14\u7403\u6807\u8bb0\u6216\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u3002datatype\u7528\u7684json\uff0c\u6bd5\u7adf\u8fd9\u4e2a\u7528\u7740\u597d\u8212\u670d\uff0cjson_encode\u4e00\u4e0b\u5c31echo\uff0c\u76f4\u63a5\u62ff\u6765\u505a\u5173\u8054\u6570\u7ec4\u3002</p>\n<p><span style=\"color: #0000ff;\">&middot;2&middot;</span>\u66f4\u65b0\u6c14\u7403\u699c\u7684\u65f6\u5019\u9047\u5230\u4e86\u7ea0\u7ed3\u3002\u4e4b\u524d\u9884\u60f3AJAX\u5c40\u90e8\u66f4\u65b0\u5f88\u723d\uff0c\u771f\u6b63\u5199\u8d77\u4ee3\u7801\u7684\u65f6\u5019\u624d\u53d1\u89c9\u5176\u5b9e\u540e\u53f0\u8fd8\u662f\u8981\u67e5\u8be2\u5b8c\u6574\u51fa\u9898\u4fe1\u606f\u7684\uff0c\u8981\u548c\u524d\u7aef\u4ea4\u4e92\uff0c\u5c31\u53c8\u8981\u628a\u5b8c\u6574\u4fe1\u606f\u53d1\u7ed9\u524d\u7aef\uff0c\u524d\u7aef\u548c\u8868\u683c\u6bcf\u4e2a&lt;td&gt;\u5224\u65ad\u53d8\u5316\uff0c\u8fd8\u662f\u76f4\u63a5\u4fee\u6539\uff0c\u597d\u50cf\u590d\u6742\u5ea6\u5dee\u4e0d\u591a\u54ce\u3002\u3002\u4e0d\u8fc7\u6700\u5927\u7684\u95ee\u9898\u662f\uff0c\u4e00\u5f00\u59cb\u662f\u7528\u548c\u540e\u53f0\u5dee\u4e0d\u591a\u7684\u4ee3\u7801\u751f\u6210\u4e86table\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a&lt;tr&gt;\u76f4\u63a5\u66b4\u529bjquery().html(\"xxx\")\uff0c\u7136\u540e\u4fee\u6539\u6c14\u7403\u6807\u8bb0\u7684click\u4e8b\u4ef6\u5c31 \u5931\uff01\u6548\uff01\u4e86\uff01\u8fd9\u4e48\u5947\u8469\u7684\u4e8b\u60c5\uff0c\u7528 on(click, function(){...\u90fd\u4e0d\u884c\u3002\u7ea0\u7ed3\u4e00\u4e0b\u5348\uff0c\u6700\u540e\u60f3\u96be\u9053\u771f\u7684\u662f\u8fd9\u6837\u80fd\u7834\u574f\u9875\u9762\u5417\u3002\u5c31\u628a\u4ee3\u7801\u6539\u6210\u4e86\u4e00\u4e2a\u4e00\u4e2a\u53bb\u66f4\u65b0&lt;td&gt;\uff0c\u6700\u540e\u7adf\u7136\u597d\u4e86\u3002</p>\n<p>\u5f53\u7136\u4e5f\u6dfb\u52a0\u4e86\u5f85\u53d1\u6c14\u7403\u7684\u6570\u91cf\u63d0\u9192\u3002</p>\n<p>\u8bf4\u5230\u8fd9\u4e2a\u6570\u91cf\u9898\u578b\uff0c\u6253\u7b97\u505a\u6210\u968f\u7a97\u53e3\u79fb\u52a8\uff0c\u8fd9\u6837\u968f\u65f6\u80fd\u770b\u5230\uff0c\u7136\u540e\u6839\u636e\u60c5\u51b5\u6765\u770b\u662f\u5426\u65b0\u589e\u52a0\u4e00\u4e2a\u5f85\u53d1\u6c14\u7403\uff0c\u5c31\u81ea\u52a8\u628a\u7a97\u53e3\u79fb\u8fc7\u53bb\u5427\u3002\u7701\u8d5b12\u53f7\u5c31\u5f00\u59cb\u4e86\uff0c\u8fd9\u4e24\u5929\u8fd8\u5f97\u628a\u4ee3\u7801\u6253\u5370\u7684\u65b9\u6848\u641e\u51fa\u6765\uff0c\u6c14\u7403\u8fd9\u4e2a\u7528\u8d77\u6765\u611f\u89c9\u8fd8\u4e0d\u9519\uff0c\u5148\u653e\u4e00\u653e\u3002</p>\n<p>\u5b66\u4e60AJAX\u5904\u5973\u4f5c\uff0c\u6b22\u8fce\u6307\u5bfc\u3002</p>\n<p><img src=\"http://images.cnitblog.com/blog/441540/201310/09143421-1c9e8799e6e14065a42d1b205e98048e.png\" alt=\"\" /></p>"
			}, {
				"title": "POJ 1321\t \u68cb\u76d8\u95ee\u9898",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/09/24/3337668.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Tue, 24 Sep 2013 13:24:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/09/24/3337668.html",
				"description": "<p>dp[n\u884c][\u4f4d\u538b\u7f29\u6570][\u5269\u4e0bk\u4e2a\u68cb\u5b50]</p>\n<p>\u4e0d\u7528n\u884c\u6eda\u52a8\u6570\u7ec4\u4e5f\u53ef\u3002</p>\n<p>\u66f4\u65b0\u4e0e\u4e4b\u524d\u6240\u6709\u884c\u4e0d\u51b2\u7a81\u7684\u60c5\u51b5\u4ee5\u53ca\u4e0d\u653e\u68cb\u5b50\u60c5\u51b5\uff0c\u6700\u540e\u5bf9dp[n][all][0]\u6c42\u548c\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, k;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">1</span> &lt;&lt; <span style=\"color: #800080;\">8</span> | <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">int</span> dp[<span style=\"color: #800080;\">10</span>][maxn][<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">char</span> g[<span style=\"color: #800080;\">10</span>][<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">10</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;k), n != -<span style=\"color: #800080;\">1</span> || k != -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">12</span>         memset(dp, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(dp));\n</span><span style=\"color: #008080;\">13</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt;= n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">14</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, g[i]);\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">int</span> M = <span style=\"color: #800080;\">1</span> &lt;&lt;<span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\">16</span>         dp[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span>][k] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt;= n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">19</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> p = <span style=\"color: #800080;\">0</span>; p &lt; M; p ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">21</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; n; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">23</span>                     <span style=\"color: #0000ff;\">if</span>((~p &amp; (<span style=\"color: #800080;\">1</span> &lt;&lt; j)) &amp;&amp; g[i][j] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">#</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\">25</span>                             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> q = <span style=\"color: #800080;\">1</span>; q &lt;= k; q ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">26</span>                                 dp[i][p | (<span style=\"color: #800080;\">1</span> &lt;&lt; j)][q - <span style=\"color: #800080;\">1</span>] += dp[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][p][q];\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">29</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> q = <span style=\"color: #800080;\">0</span>; q &lt;= k; q ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">30</span>                     dp[i][p][q] += dp[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][p][q];\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">34</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; M; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">35</span>             ans += dp[n][i][<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">36</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">38</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">39</span> }</pre>\n</div>\n<p>&nbsp;</p>"
			}, {
				"title": "SGU 223 Little Kings",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/09/24/3337605.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Tue, 24 Sep 2013 12:33:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/09/24/3337605.html",
				"description": "<p>\u6bcf\u884c\u6446\u68cb\u5b50\u72b6\u6001\u4f4d\u538b\u7f29\uff0c\u5bf9\u80fd\u591f\u76f8\u90bb\u7684\u884c\u94fe\u8868\u5efa\u56fe\uff0cdp[n\u884c][\u72b6\u60011024][\u8fd8\u5269\u4e0b\u6ca1\u653e\u7684\u68cb\u5b50\u6570k]\uff0c\u6700\u540e\u628adp[n][all(\u5408\u6cd5)][0]\u76f8\u52a0\u3002</p>\n<p>&nbsp;</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">1033</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #0000ff;\">int</span> fst[<span style=\"color: #800080;\">1033</span>], nex[maxn * maxn], v[maxn *<span style=\"color: #000000;\"> maxn];\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> wnum;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">void</span> Add(<span style=\"color: #0000ff;\">int</span> a, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 9</span>     nex[wnum] =<span style=\"color: #000000;\"> fst[a];\n</span><span style=\"color: #008080;\">10</span>     fst[a] =<span style=\"color: #000000;\"> wnum;\n</span><span style=\"color: #008080;\">11</span>     v[wnum] =<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\">12</span>     wnum ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">14</span> \n<span style=\"color: #008080;\">15</span> <span style=\"color: #0000ff;\">bool</span> OK(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">if</span>((a &amp; <span style=\"color: #800080;\">1</span>) &amp;&amp; (a &amp; <span style=\"color: #800080;\">2</span>)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">19</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt; <span style=\"color: #800080;\">10</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">if</span>((a &gt;&gt; i &amp; <span style=\"color: #800080;\">1</span>) &amp;&amp; ((a &gt;&gt; (i + <span style=\"color: #800080;\">1</span>) &amp; <span style=\"color: #800080;\">1</span>) || (a &gt;&gt; (i - <span style=\"color: #800080;\">1</span>) &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)))\n</span><span style=\"color: #008080;\">21</span>             <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">if</span>((a &gt;&gt; i &amp; <span style=\"color: #800080;\">1</span>) &amp;&amp; (a &gt;&gt; (i - <span style=\"color: #800080;\">1</span>) &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\">23</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #0000ff;\">bool</span> OK(<span style=\"color: #0000ff;\">int</span> a, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">28</span>     <span style=\"color: #0000ff;\">if</span>((a &amp; <span style=\"color: #800080;\">1</span>) &amp;&amp; ((b &amp; <span style=\"color: #800080;\">1</span>) || (b &amp; <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">)))\n</span><span style=\"color: #008080;\">29</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">30</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">31</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt; <span style=\"color: #800080;\">10</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">if</span>((a &gt;&gt; i &amp; <span style=\"color: #800080;\">1</span>) &amp;&amp; ((b &gt;&gt; (i - <span style=\"color: #800080;\">1</span>) &amp; <span style=\"color: #800080;\">1</span>) || (b &gt;&gt; i &amp; <span style=\"color: #800080;\">1</span>) || (b &gt;&gt; (i + <span style=\"color: #800080;\">1</span>) &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)))\n</span><span style=\"color: #008080;\">34</span>             <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">36</span>     <span style=\"color: #0000ff;\">if</span>((a &gt;&gt; i &amp; <span style=\"color: #800080;\">1</span>) &amp;&amp; ((b &gt;&gt; (i - <span style=\"color: #800080;\">1</span>) &amp; <span style=\"color: #800080;\">1</span>) || (b &gt;&gt; i &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)))\n</span><span style=\"color: #008080;\">37</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">38</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">40</span> \n<span style=\"color: #008080;\">41</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> ok[maxn];\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> ook[maxn][maxn];\n</span><span style=\"color: #008080;\">43</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Build()\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">45</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; maxn; i ++) ok[i] =<span style=\"color: #000000;\"> OK(i);\n</span><span style=\"color: #008080;\">46</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; maxn; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">47</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; maxn; j ++) ook[i][j] = ok[i] &amp;&amp; ok[j] &amp;&amp;<span style=\"color: #000000;\"> OK(i, j);\n</span><span style=\"color: #008080;\">48</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = maxn - <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span>; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">50</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = maxn - <span style=\"color: #800080;\">1</span>; j &gt;= <span style=\"color: #800080;\">0</span>; j --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">51</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">52</span>             <span style=\"color: #0000ff;\">if</span>(ok[i] &amp;&amp; ok[j] &amp;&amp;<span style=\"color: #000000;\"> ook[i][j])\n</span><span style=\"color: #008080;\">53</span> <span style=\"color: #000000;\">                Add(i, j);\n</span><span style=\"color: #008080;\">54</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">55</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">56</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">57</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, k;\n</span><span style=\"color: #008080;\">58</span> __int64 dp[<span style=\"color: #800080;\">11</span>][maxn][<span style=\"color: #800080;\">111</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">59</span> <span style=\"color: #0000ff;\">int</span> COUNT(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\">60</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">61</span>     <span style=\"color: #0000ff;\">int</span> cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">62</span>     <span style=\"color: #0000ff;\">while</span>(x) cnt ++, x &amp;= x - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">63</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> cnt;\n</span><span style=\"color: #008080;\">64</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">65</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">66</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">67</span>     memset(fst, -<span style=\"color: #800080;\">1</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(fst));\n</span><span style=\"color: #008080;\">68</span>     wnum = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">69</span> <span style=\"color: #000000;\">    Build();\n</span><span style=\"color: #008080;\">70</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;k) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">71</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">72</span>         memset(dp, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(dp));\n</span><span style=\"color: #008080;\">73</span>         <span style=\"color: #0000ff;\">int</span> M = <span style=\"color: #800080;\">1</span> &lt;&lt;<span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\">74</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; M; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">75</span>             <span style=\"color: #0000ff;\">if</span>(COUNT(i) &lt;=<span style=\"color: #000000;\"> k)\n</span><span style=\"color: #008080;\">76</span>                 dp[<span style=\"color: #800080;\">0</span>][i][k - COUNT(i)] =<span style=\"color: #000000;\"> ok[i];\n</span><span style=\"color: #008080;\">77</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">78</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">79</span>             <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; M; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">80</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">81</span>                 <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> u = fst[j]; u != -<span style=\"color: #800080;\">1</span> &amp;&amp; v[u] &lt; M; u =<span style=\"color: #000000;\"> nex[u])\n</span><span style=\"color: #008080;\">82</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">83</span>                     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> K = COUNT(v[u]); K &lt;= k; K ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">84</span>                         dp[i][v[u]][K - COUNT(v[u])] += dp[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][j][K];\n</span><span style=\"color: #008080;\">85</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">86</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">87</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">88</span>         __int64 ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">89</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; M; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">90</span>             ans += dp[n - <span style=\"color: #800080;\">1</span>][i][<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">91</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%I64d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">92</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">93</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">94</span> }</pre>\n</div>\n<p>&nbsp;</p>"
			}, {
				"title": "SGU 222\t Little Rooks",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/09/17/3327081.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Tue, 17 Sep 2013 12:00:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/09/17/3327081.html",
				"description": "<p>\u6392\u5217\u7ec4\u5408</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, k;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #0000ff;\">int</span> COM(<span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> m)\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 7</span>     <span style=\"color: #0000ff;\">if</span>(m &gt; n - m) m = n -<span style=\"color: #000000;\"> m;\n</span><span style=\"color: #008080;\"> 8</span>     <span style=\"color: #0000ff;\">int</span> i, j, res = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span>     <span style=\"color: #0000ff;\">for</span>(i = n, j = <span style=\"color: #800080;\">1</span>; i &gt; n - m; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">11</span>         res *=<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">12</span>         <span style=\"color: #0000ff;\">for</span>(; j &lt;= m &amp;&amp; res % j == <span style=\"color: #800080;\">0</span>; res /= j, j ++<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">14</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">18</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;k) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">if</span>(k &gt;<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">22</span>             printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">0\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">23</span>             <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">int</span> ans = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = n; i &gt; n - k; i --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">27</span>             ans *=<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">28</span>         ans *=<span style=\"color: #000000;\"> COM(n, k);\n</span><span style=\"color: #008080;\">29</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">31</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">32</span> }</pre>\n</div>\n<p>&nbsp;</p>"
			}, {
				"title": "PHP \u7528 ZipArchive \u6253\u5305\u6307\u5b9a\u6587\u4ef6\u5230zip\u4f9b\u7528\u6237\u4e0b\u8f7d",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/08/26/3282624.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 26 Aug 2013 07:00:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/08/26/3282624.html",
				"description": "<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">Ubuntu\u9700\u5b89\u88c5zlib</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">sudo</span> apt-get <span style=\"color: #0000ff;\">install</span><span style=\"color: #000000;\"> ruby\n</span><span style=\"color: #0000ff;\">sudo</span> apt-get <span style=\"color: #0000ff;\">install</span> zlib1g zlib1g.dev</pre>\n</div>\n</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">&nbsp;</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">Windows\u9700\u5f00\u542fphp_zip.dll</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">\u5982\u679c\u5728 \"...\\php\\ext\\\" \u6ca1\u6709\u8fd9\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u5230\u7f51\u4e0a\u4e0b\u8f7d\u4e00\u4e2a</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">\u7136\u540e\u4fee\u6539 \"...\\php\\php.ini\" \uff0c\u627e\u5230 \"extension=php_zip.dll\" &nbsp;\u53bb\u6389&nbsp; \";\"\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u884c\u5c31\u52a0\u4e0a\u3002</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">&nbsp;</div>\n<div style=\"font: 14px/normal \u5fae\u8f6f\u96c5\u9ed1; color: #000000; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; orphans: 2; widows: 2; font-size-adjust: none; font-stretch: normal; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;\">\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #800080;\">$filename</span> = \"xxxx.zip\"<span style=\"color: #000000;\">; \n</span><span style=\"color: #008080;\">ob_end_clean</span><span style=\"color: #000000;\">(); \n</span><span style=\"color: #800080;\">$zip</span> = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> ZipArchive();\n</span><span style=\"color: #800080;\">$zip</span>-&gt;open(<span style=\"color: #800080;\">$filename</span>, ZipArchive::<span style=\"color: #000000;\">OVERWRITE);  \n</span><span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\"> (xxxx)  \n{ \n    </span><span style=\"color: #0000ff;\">if</span>(<span style=\"color: #008080;\">strlen</span>(<span style=\"color: #800080;\">$row</span>-&gt;team_upload) != 0<span style=\"color: #000000;\">) \n    { \n        </span><span style=\"color: #800080;\">$sitelen</span> = <span style=\"color: #008080;\">strlen</span>(<span style=\"color: #800080;\">$row</span>-&gt;<span style=\"color: #000000;\">team_upload); \n        </span><span style=\"color: #800080;\">$attachfile</span> = xxxx<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5199\u7edd\u5bf9\u5f84\uff0c\u5efa\u8bae\u7528PHP\u73af\u5883\u53d8\u91cf </span>\n        <span style=\"color: #800080;\">$attachfile</span>=<span style=\"color: #008080;\">iconv</span>(\"UTF-8\",\"GBK\",<span style=\"color: #800080;\">$attachfile</span>); <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8f6c\u7801\uff0c\u6253\u5305\u4e2d\u6587\u6587\u6863</span>\n        <span style=\"color: #800080;\">$zip</span>-&gt;addFile( <span style=\"color: #800080;\">$attachfile</span> , <span style=\"color: #008080;\">basename</span>(<span style=\"color: #800080;\">$attachfile</span>)); <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u628a\u6587\u4ef6\u653e\u5165zip </span>\n<span style=\"color: #000000;\">    } \n} \n</span><span style=\"color: #800080;\">$zip</span>-&gt;close();<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5173\u95ed  </span>\n<span style=\"color: #008080;\">header</span>('Content-Description: File Transfer'<span style=\"color: #000000;\">);    \n</span><span style=\"color: #008080;\">Header</span>(\"content-type:application/x-zip-compressed\"<span style=\"color: #000000;\">);  \n</span><span style=\"color: #008080;\">header</span>('Content-Disposition: attachment; filename='.<span style=\"color: #008080;\">basename</span>(<span style=\"color: #800080;\">$filename</span><span style=\"color: #000000;\">));     \n</span><span style=\"color: #008080;\">header</span>('Content-Transfer-Encoding: binary'<span style=\"color: #000000;\">);     \n</span><span style=\"color: #008080;\">header</span>('Expires: 0'<span style=\"color: #000000;\">);     \n</span><span style=\"color: #008080;\">header</span>('Cache-Control: must-revalidate, post-check=0, pre-check=0'<span style=\"color: #000000;\">);     \n</span><span style=\"color: #008080;\">header</span>('Pragma: public'<span style=\"color: #000000;\">);     \n</span><span style=\"color: #008080;\">header</span>('Content-Length: ' . <span style=\"color: #008080;\">filesize</span>(<span style=\"color: #800080;\">$filename</span><span style=\"color: #000000;\">));     \n</span><span style=\"color: #008080;\">ob_clean</span>();   <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6e05\u7a7a\u4f46\u4e0d\u5173\u95ed\u8f93\u51fa\u7f13\u5b58 </span>\n<span style=\"color: #008080;\">flush</span><span style=\"color: #000000;\">();     \n@</span><span style=\"color: #008080;\">readfile</span>(<span style=\"color: #800080;\">$filename</span><span style=\"color: #000000;\">);   \n@</span><span style=\"color: #008080;\">unlink</span>(<span style=\"color: #800080;\">$filename</span>);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5220\u9664\u6253\u5305\u7684\u4e34\u65f6zip\u6587\u4ef6\u3002\u6587\u4ef6\u4f1a\u5728\u7528\u6237\u4e0b\u8f7d\u5b8c\u6210\u540e\u88ab\u5220\u9664 </span></pre>\n</div>\n<p>&nbsp;</p>\n&nbsp;</div>"
			}, {
				"title": "\u5173\u4e8eACM\uff0c\u5173\u4e8eCSU",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/07/07/3176531.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Sun, 07 Jul 2013 09:02:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/07/07/3176531.html",
				"description": "<p>\u539f\u6587\u5730\u5740\uff1a<a href=\"http://tieba.baidu.com/p/2432943599\">http://tieba.baidu.com/p/2432943599</a></p>\n<p>&nbsp;</p>\n<div>\u524d\u8a00\uff1a</div>\n<div>\u5373\u5c06\u8fdb\u5165\u7814\u4e8c\uff0cACM\u7684\u4e8b\u60c5\u4e5f\u6e10\u6e10\u8fdc\u53bb\uff0c\u8bb0\u5fc6\u7ec8\u5c06\u6a21\u7cca\uff0c\u4f46\u90a3\u6bb5\u594b\u6597\u6c38\u8fdc\u8ba9\u4eba\u70ed\u8840\u6cb8\u817e\u3002\u5f00\u4e2a\u8d34\u8bb2\u8bb2ACM\u4e0e\u4e2d\u5357\u7684\u6545\u4e8b\uff0c\u5f53\u662f\u5ba3\u6cc4\uff0c\u4e5f\u5f53\u662f\u4e00\u79cd\u5ba3\u4f20\u5427\u3002\u591a\u5e74\u4e0d\u5199\u4f5c\u6587\uff0c\u4e5f\u4e0d\u77e5\u5982\u4eca\u7684\u6587\u7b14\u80fd\u5426\u6253\u52a8\u66f4\u591a\u7684\u6709\u5fd7\u9752\u5e74\u4e3a\u4e2d\u5357ACM\u68a6\u60f3\u800c\u594b\u6597\u3002</div>\n<div>\u7528\u65f6\u95f4\u5e8f\u597d\u4e86\uff0c\u4e0d\u5b9a\u65f6\u66f4\u65b0\u3002\u4e00\u5c42\u697c\u5bf9\u5e94\u4e00\u4e2a\u65f6\u671f\u6216\u4e00\u5e74\uff0c\u6709\u8865\u5145\u5c31\u5728\u90a3\u5c42\u697c\u7684\u56de\u590d\u4e2d\u3002\u4e5f\u8bb8\u771f\u5199\u8d77\u6765\u6545\u4e8b\u4e0d\u957f\uff0c\u5c31\u8fd9\u6837\u5427\u3002</div>\n<div>&nbsp;</div>\n<div><strong>1947\u5e74</strong></div>\n<div>ACM(Association for Computing Machinery )\u672c\u4e0d\u662f\u4e00\u4e2a\u6bd4\u8d5b\uff0c\u7f8e\u56fd\u8ba1\u7b97\u673a\u534f\u4f1a\u662f\u4e00\u4e2a\u4e16\u754c\u6027\u7684\u8ba1\u7b97\u673a\u4ece\u4e1a\u5458\u4e13\u4e1a\u7ec4\u7ec7\uff0c\u521b\u7acb\u4e8e1947\u5e74\uff0c\u662f\u4e16\u754c\u4e0a\u7b2c\u4e00\u4e2a\u79d1\u5b66\u6027\u53ca\u6559\u80b2\u6027\u8ba1\u7b97\u673a\u5b66\u4f1a\u3002ACM\u6bcf\u5e74\u90fd\u51fa\u7248\u5927\u91cf\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4e13\u95e8\u671f\u520a\uff0c\u6709\u5404\u79cd\u5404\u6837\u7684\u56fd\u9645\u4f1a\u8bae\uff0c\u8bfb\u7814\u7684\u540c\u5b66\u4eec\u4e5f\u8bb8\u63a5\u89e6\u8fc7\u8fd9\u65b9\u9762\u7684\u4e1c\u897f\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div><strong>1970\u5e74</strong></div>\n<div>\n<div>ICPC (ACM/ICPC)</div>\n<div>International Collegiate Programming Contest</div>\n</div>\n<div>&nbsp;</div>\n<div>\u5148\u53d1\u4e00\u6bb5\u7b80\u4ecb\uff1a</div>\n<div>ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u662f\u7531\u7f8e\u56fd\u8ba1\u7b97\u673a\u534f\u4f1a (ACM) \u4e3b\u529e\u7684\uff0c\u4e00\u9879\u65e8\u5728\u5c55\u793a\u5927\u5b66\u751f\u521b\u65b0\u80fd\u529b\u3001\u56e2\u961f\u7cbe\u795e\u548c\u5728\u538b\u529b\u4e0b\u7f16\u5199\u7a0b\u5e8f\u3001\u5206\u6790\u548c\u89e3\u51b3\u95ee\u9898\u80fd\u529b\u7684\u5e74\u5ea6\u7ade\u8d5b\u3002\u7ecf\u8fc7\u8fd1 30 \u591a\u5e74\u7684\u53d1\u5c55\uff0cACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u5df2\u7ecf\u53d1\u5c55\u6210\u4e3a\u6700\u5177\u5f71\u54cd\u529b\u7684\u5927\u5b66\u751f\u8ba1\u7b97\u673a\u7ade\u8d5b\u3002\u8d5b\u4e8b\u76ee\u524d\u7531 IBM \u516c\u53f8\u8d5e\u52a9\u3002</div>\n<div>&nbsp;</div>\n<div>\u7f8e\u56fd\u5fb7\u514b\u8428\u65af A&amp;M \u5927\u5b661970\u5e74\u627f\u529e\u4e86\u9996\u5c4a\u6bd4\u8d5b\u3002</div>\n<div>&nbsp;</div>\n<div><strong>1977 \u5e74</strong></div>\n<div>&nbsp;</div>\n<div>\u5728 ACM \u8ba1\u7b97\u673a\u79d1\u5b66\u4f1a\u8bae\u671f\u95f4\u4e3e\u529e\u4e86\u9996\u6b21\u603b\u51b3\u8d5b\uff0c\u5e76\u6f14\u53d8\u6210\u4e3a\u76ee\u524d\u7684\u4e00\u5e74\u4e00\u5c4a\u7684\u591a\u56fd\u53c2\u4e0e\u7684\u56fd\u9645\u6027\u6bd4\u8d5b\u3002\u8fc4\u4eca\u5df2\u7ecf\u4e3e\u529e\u4e8634\u5c4a\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e2a\u6bd4\u8d5b\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u4e00\u5f00\u59cb\u5c31\u662f\u8fd9\u6837\u8bbe\u8ba1\u7684\uff0c</div>\n<div>\u90a3\u65f6\u5019\u5f88\u591a\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u90fd\u662f&ldquo;\u5a74\u513f\u65f6\u4ee3&rdquo;\uff0c\u597d\u6bd4C\u8bed\u8a00\u662f1972\u5e74\uff0cjava\u66f4\u662f90\u5e74\u4ee3\u3002</div>\n<div>\u5982\u4eca\u7684\u6bd4\u8d5b\u89c4\u5219\u662f\uff1a\u4e09\u4e2a\u53c2\u8d5b\u9009\u624b\u7ec4\u961f\uff0c\u53ea\u80fd\u4f7f\u7528\u4e00\u53f0\u666e\u901aPC\uff0c\u57285\u4e2a\u5c0f\u65f6\uff08\u4e00\u822c\u662f9:00~14:00\uff09\u5b8c\u62107~12\u4e2a\u7a0b\u5e8f\u8bbe\u8ba1\u9898\u76ee\u3002\uff08\u6253\u4e2a\u6bd4\u65b9\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u9898\u76ee\u662f\uff0c\u7cfb\u7edf\u5f80\u4f60\u7684\u7a0b\u5e8f\u9001\u82e5\u5e72\u7ec4\u6574\u6570\u5bf9 a,b\uff0c\u4f60\u8fd4\u56de\u7ed9\u7cfb\u7edf\u5bf9\u5e94\u7684\u7ed3\u679ca+b\uff09\u3002\u7a0b\u5e8f\u5f97\u51fa\u7684\u7ed3\u679c\u5982\u679c\u90fd\u6b63\u786e\uff0c\u7cfb\u7edf\u4f1a\u544a\u8bc9\u4f60\u4f60\u7684\u7a0b\u5e8f\"Accepted\"\u6216\u8005\"YES\"\uff0c\u5982\u679c\u6709\u4efb\u4f55\u5730\u65b9\u4e0d\u6b63\u786e\uff0c\u7cfb\u7edf\u4f1a\u544a\u8bc9\u4f60\"Wrong Answer\"\uff0c\u8fd8\u6709\u5176\u4ed6\u7684\u5185\u5b58\u6cc4\u6f0f\u3001\u65f6\u95f4\u8d85\u51fa\u9650\u5236\u65f6\u95f4\u7b49\u7b49\u7ed3\u679c\uff0c\u90fd\u662f\u4e00\u4e2a\u6bd4\u8d5b\u7cfb\u7edf\u81ea\u52a8\u5224\u5b9a\u7684\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u9ed1\u76d2\uff0c\u8fd0\u884c\u4f60\u7684\u7a0b\u5e8f\uff0c\u5f80\u91cc\u9001\u6570\u636e\uff0c\u53e6\u4e00\u8fb9\u51fa\u7ed3\u679c\uff0c\u548c\u9884\u5148\u8bbe\u5b9a\u7684\u7ed3\u679c\u8fdb\u884c\u4e00\u4e00\u6bd4\u5bf9\u3002\u6bcf\u505a\u6b63\u786e\u4e00\u4e2a\u9898\u76ee\uff0c\u5de5\u4f5c\u4eba\u5458\u4f1a\u6839\u636e\u7cfb\u7edf\u7684\u63d0\u793a\u62ff\u6765\u4e00\u4e2a\u548c\u9898\u76ee\u5bf9\u5e94\u989c\u8272\u7684\u6c14\u7403\u653e\u5230\u4f60\u961f\u4f0d\u7684\u4f4d\u7f6e\u4e0a\uff08\u9ad8\u6863\u6b21\u6bd4\u8d5b\u7684\u6c14\u7403\u662f\u80fd\u98d8\u8d77\u6765\u7684~~\u6240\u4ee5\u7528\u7ef3\u5b50\u7ed1\u6c14\u7403\uff0c\u56fd\u5185\u7684\u5927\u591a\u6bd4\u8d5b\u662f\u7528\u5851\u6599\u6746\u3002\u3002\uff09\uff0c\u8fd9\u4e2a\u6c14\u7403\u4e00\u65b9\u9762\u7ed9\u961f\u5458\u9f13\u52b1\u548c\u4fe1\u5fc3\uff0c\u53e6\u4e00\u65b9\u9762\u65b9\u4fbf&ldquo;\u89c2\u5bdf\u6218\u573a&rdquo;\uff0c\u770b\u522b\u7684\u961f\u4f0d\u505a\u51fa\u4e86\u54ea\u4e2a\u9898\uff0c\u53ef\u4ee5&ldquo;\u6361\u8f6f\u67ff\u5b50\u634f&rdquo;\uff0c\u8fd8\u6709\u5c31\u662f\u786e\u5b9e\u633a\u597d\u73a9\uff0c\u6bd4\u8d5b\u5b8c\u62ff\u4e00\u5927\u5806\u6c14\u7403\u7684\u8bdd\uff0c\u4f60\u4f1a\u770b\u5230\u56f4\u89c2\u6bd4\u8d5bmm\u4eec\u5d07\u62dc\u7684\u76ee\u5149~~\u54c8\u3002</div>\n<div>&nbsp;</div>\n<div>\u8865\u5145\uff1a\u6bd4\u8d5b\u6709\u4e2a&ldquo;\u7f5a\u65f6&rdquo;(Penalty)\u7684\u6982\u5ff5\uff0c\u9996\u5148\u505a\u7684\u9898\u591a\u7684\u961f\u4f0d\u6392\u540d\u66f4\u9ad8\uff0c\u505a\u51fa\u9898\u76ee\u6570\u91cf\u76f8\u540c\u7684\u961f\u4f0d\uff0c\u7531\u7f5a\u65f6\u6765\u5224\u65ad\u3002\u6bd4\u5982C(\u9898\u53f7)\u9898\u5728\u7b2c30\u5206\u949f\u505a\u5b8c\uff0c\u505a\u9519\u4e862\u6b21\uff0c\u7b2c\u4e09\u6b21\u5f97\u5230\u4e86&rdquo;YES\"\uff0c\u90a3\u4e48\u8fd9\u65f6\u7684\u7f5a\u65f6\u662f30+20*2=70\uff0c20\u662fACM\u6bd4\u8d5b\u7ea6\u5b9a\u4fd7\u6210\u7684\u7cfb\u6570\uff0c\u9519\u4e00\u6b21\u7f5a20\uff0c\u4e0d\u8fc7\u5982\u679c\u8fd9\u9898\u5230\u6700\u540e\u90fd\u6ca1\"YES\"\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u662f\u4e0d\u7f5a\u65f6\u7684\u3002\u76f8\u540c\u9898\u6570\u7684\u961f\u4f0d\uff0c\u7f5a\u65f6\u5c11\u7684\u6392\u540d\u66f4\u9760\u524d\u3002</div>\n<div>&nbsp;</div>\n<div>\n<div>\u6bd4\u8d5b\u662f9:00~14:00\uff0c\u6240\u4ee5\u5348\u996d\u662f\u5728\u8d5b\u573a\u5185\u89e3\u51b3\u7684\u3002\u5c0f\u6bd4\u8d5b\u81ea\u5907\u5e72\u7cae\uff0c\u5927\u6bd4\u8d5b\u4f1a\u53d1\u5348\u996d\uff0c\u6709\u65f6\u5019\u8fd8\u5f88\u7ed9\u529b\uff0c\u53bb\u5e74\u53c2\u52a0\u5929\u6d25\u6bd4\u8d5b\uff0c\u8fde\u5927\u8471\u6cb9\u997c\u90fd\u51fa\u6765\u4e86&hellip;&hellip;</div>\n<div>&nbsp;</div>\n<div>\u6bd4\u8d5b\u53ef\u4ee5\u5e26\u4efb\u4f55\u7eb8\u8d28\u8d44\u6599\uff0c\u6bd4\u5982\u4ee3\u7801\u6a21\u677f\uff08\u8fd9\u6837\u5b9e\u73b0\u4e00\u4e9b\u7279\u5b9a\u529f\u80fd\u5c31\u4e0d\u81f3\u4e8e\u975e\u8981\u9ed8\u5199\u4e86\uff09\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u5e26\u7535\u5b50\u8bbe\u5907\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bd4\u8d5b\u53ea\u80fd\u4f7f\u7528\u5b89\u6392\u7684\u90a3\u53f0PC\u8fd9\u4e00\u4e2a\u5e26\u7535\u7684\u4e1c\u897f</div>\n</div>\n<div>&nbsp;</div>\n<div><strong>1978~1995</strong></div>\n<div>&nbsp;</div>\n<div>\n<div>&nbsp;</div>\n<div>\u5355\u72ec\u628a\u8fd9\u6bb5\u65f6\u671f\u4f5c\u4e3a\u4e00\u7ae0\uff0c\u56e0\u4e3a\u57281995\u5e74\u4e4b\u524d\uff0cICPC\u6ca1\u6709\u4e2d\u56fd\u961f\u7684\u8eab\u5f71\u3002</div>\n<div>ACM/ICPC\u65e9\u671f\u53ea\u662f\u7f8e\u56fd\u5927\u5b66\u751f\u4e4b\u95f4\u7684\u6bd4\u8d5b\uff0c\u800c\u540e\u6765\u9646\u7eed\u6709\u6b27\u6d32\u56fd\u5bb6\u7684\u53c2\u4e0e\u3002\u5230\u4e8690\u5e74\u4ee3\uff0c\u7f8e\u56fdICPC\u7684\u7ade\u6280\u6c34\u5e73\u4e0d\u518d\u662f\u4e00\u5bb6\u72ec\u5927\uff0cICPC\u4e5f\u9010\u6e10\u5168\u7403\u5316\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u91cc\u8981\u8bf4\u4e00\u4e2a\u4e0eACM/ICPC\u5bc6\u5207\u76f8\u5173\u7684\u6bd4\u8d5b\uff0c\u5373IOI\uff08International Olympiad in Informatics\uff09\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff08\u56fd\u9645\uff09\uff0cNOI\u5168\u56fd\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u7ade\u8d5b\uff08\u56fd\u5bb6\uff09\uff0cNOIP\u5168\u56fd\u9752\u5c11\u5e74\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u8054\u8d5b\uff08\u7701\uff09\u3002</div>\n<div>\u6211\u4eec\u73b0\u5728\u57fa\u672c\u660e\u767dACM/ICPC\u662f\u5927\u5b66\u751f\u7684\u6bd4\u8d5b\uff0c\u5176\u5b9e\u9ad8\u4e2d\u751f\u4e5f\u6709\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u6bd4\u8d5b\uff0c\u5c31\u50cf\u6211\u4eec\u66fe\u7ecf\u77e5\u9053\u7684\u6570\u5b66\u7ade\u8d5b\u3001\u7269\u7406\u7ade\u8d5b\u3001\u5316\u5b66\u7ade\u8d5b\u3001\u751f\u7269\u7ade\u8d5b\u7b49\u7b49\uff0c\u5728\u5927\u7ea62009\u5e74\u4e4b\u524d\u4e5f\u4e00\u6837\u80fd\u4fdd\u9001\u5927\u5b66\u7684\u6bd4\u8d5b\uff08\u90a3\u5e74\u662f\u4e0d\u662f\u6709\u4e2a\u65b0\u653f\u7b56\uff0c\u5404\u79cd\u5b66\u79d1\u7ade\u8d5b\u4e0d\u80fd\u76f4\u63a5\u4fdd\u9001\u4e86\uff09\u3002</div>\n<div>\u8fd9\u4e2a\u6bd4\u8d5b\u4e0d\u662f\u4e09\u4eba\u7ec4\u961f\uff0c\u800c\u662f\"\u5355\u6311&ldquo;\uff0c\u8c8c\u4f3c\u6709\u7b14\u8bd5\uff0c\u4e5f\u6709\u4e0a\u673a\uff0c\u521d\u671f\u5927\u591a\u6570\u7528Pascal\uff0c\u73b0\u5728\u4e5f\u6709\u5f88\u591a\u7528C/C++\u3002</div>\n<div>\u6211\u56fd1995\u5e74\u5f00\u59cb\u4e86OI\u7684\u5f81\u7a0b\uff0c\u8fd9\u662f\u6709\u91cc\u7a0b\u7891\u610f\u4e49\u7684\u3002\u4f60\u60f3\u554a\uff0c\u9ad8\u4e2d\u641e\u5b8cOI\u7684\u5b66\u751f\uff08\u60f3\u60f3\u6570\u5b66\u7ade\u8d5b\u7684\u5b69\u5b50\u6709\u591a\u5389\u5bb3\uff0c\u4f60\u5c31\u80fd\u7406\u89e3OI\u7684\u5b66\u751f\u6bd4\u8003\u8ba1\u7b97\u673a\u4e8c\u7ea7\u90fd\u8d39\u52b2\u7684\u672c\u79d1\u751f\u8981\u725bX\u591a\u5c11\u4e86\u3002\u3002\uff09\uff0c\u4e0a\u4e86\u5927\u5b66\uff0c\u4e0d\u641e\u641eACM\uff1f\u3002</div>\n<div>\u5f53\u7136\u5927\u591aOI\u725b\u4eba\u5c31\u4fdd\u9001\u53bb\u6e05\u534e\u5317\u5927\u4e0a\u4ea4\u590d\u65e6\u7b49\u7b49\u7b49\u7b49\u4e86\uff0c\u8fd9\u4e5f\u662f\u54b1\u4e2d\u5357ACM\u8fd9\u4e48\u53ef\u601c\u7684\u4e00\u90e8\u5206\u539f\u56e0\uff08\u4e5f\u6ca1\u90a3\u4e48\u53ef\u601c\u5566\uff0c\u5f53\u7136\u8fd9\u4e2a\u540e\u9762\u4f1a\u8bf4\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>1996\u5e74\uff0c\u4e2d\u56fd\u5f00\u59cbACM/ICPC\u7684\u5f81\u7a0b\u3002\uff08\u672a\u5b8c\u5f85\u7eed\uff09</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n</div>\n<div>1996~2002</div>\n<div>\n<div>1996\u5e74\uff0c\u4e0a\u6d77\u5927\u5b66\u4e00\u4f4d\u6559\u6388\u6ce8\u610f\u5230\u4e86ACM/ICPC\u8fd9\u9879\u56fd\u9645\u8d5b\u4e8b\u5bf9\u5927\u5b66\u751f\u5c24\u5176\u662f\u5de5\u7a0b\u7c7b\u5927\u5b66\u751f\u7684\u91cd\u5927\u76ca\u5904\uff0c\u5728\u4e0e\u4e9a\u6d32\u533a\u8d1f\u8d23\u4eba\u7684\u6c9f\u901a\u540e\uff0c\u8fd9\u4e00\u5e74\u5728\u4e0a\u6d77\u5927\u5b66\u5927\u9646\u7b2c\u4e00\u6b21\u8fce\u6765\u4e86\u672c\u571f\u7684\u533a\u57df\u8d5b\u3002</div>\n<div>&nbsp;</div>\n<div>\u533a\u57df\u8d5b&mdash;&mdash;ACM\u7684\u9009\u62d4\u8fc7\u7a0b\u662f\uff0c\u6bcf\u4e2a\u5b66\u6821\u6d3e\u51fa\u82e5\u5e72\u4ee3\u8868\u961f\uff08\u548c\u5f80\u5e74\u6210\u7ee9\u7b49\u5f88\u591a\u975e\u786e\u5b9a\u56e0\u7d20\u6302\u94a9\u51b3\u5b9a\u8fd9\u4e2a\u4ee3\u8868\u961f\u540d\u989d\u4e2a\u6570\uff09\u53c2\u52a0\u533a\u57df\u8d5b\uff0c\u533a\u57df\u8d5b\u6210\u7ee9\u4f18\u79c0\u7684\u82e5\u5e72\u5b66\u6821\u83b7\u5f97\u53c2\u52a0\u4e16\u754c\u603b\u51b3\u8d5b\u7684\u8d44\u683c\uff0c\u603b\u51b3\u8d5b\u4e00\u4e2a\u5b66\u6821\u53ea\u80fd\u53c2\u52a0\u4e00\u652f\u961f\u4f0d\uff0c\u6240\u4ee5\u50cf\u6e05\u534e\u4e0a\u4ea4\u7b49\u5b66\u6821\u6bcf\u5e74\u90fd\u4f1a\u4e3a\u603b\u51b3\u8d5b\u8fdb\u884c\u6821\u5185PK\u3002</div>\n<div>&nbsp;</div>\n<div>2002\u5e74\u4e4b\u524d\u8fd9\u51e0\u5e74\u5927\u9646\u4e00\u76f4\u662f\u4ec5\u6709\u4e0a\u6d77\u8fd9\u4e00\u4e2a\u8d5b\u533a\u3002\u7ecf\u9a8c\u79ef\u7d2f\u4e2d\uff0c\u4e2d\u56fd\u5728ACM\u6bd4\u8d5b\u4e2d\u7684\u6210\u7ee9\u9010\u6e10\u63d0\u9ad8\uff0c\u53c2\u8d5b\u7684\u5b66\u6821\u548c\u961f\u4f0d\u89c4\u6a21\u4e5f\u9010\u6b65\u6269\u5927\uff0c2002\u5e74\u662f\u4e00\u4e2a\u91cc\u7a0b\u7891\u5f0f\u7684\u5e74\u4efd\uff0c\u4e0d\u4ec5\u4ec5\u662f\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u53d6\u5f97\u4e86\u4e2d\u56fd\u5927\u5b66\u5728ACM\u7684\u7b2c\u4e00\u4e2a\u4e16\u754c\u51a0\u519b\uff0c\u4e5f\u662f\u5f71\u54cd\u4e86\u540e\u6765\u6bcf\u4e00\u4ee3ACMer\u7684\u5927\u795e\u5218\u6c5d\u4f73\u503c\u5f97\u7eaa\u5ff5\u7684\u4e00\u5e74\u3002</div>\n<div>&nbsp;</div>\n<div>\u5218\u6c5d\u4f73&mdash;&mdash;\u9ad8\u4e2d\u5373\u53c2\u52a0NOI\uff08\u4fe1\u606f\u5b66\u7ade\u8d5b\uff09\uff0c2001\u5e74\u5728\u4e0a\u6d77\u7684\u533a\u57df\u8d5b\u83b7\u5f97\u51a0\u519b\uff0c2002\u5e74\u7684\u603b\u51b3\u8d5b\u4e2d\u4ee3\u8868\u6e05\u534e\u5927\u5b66\u53d6\u5f97\u4e16\u754c\u7b2c\u56db\u3002\u6c5d\u54e5\u66fe\u8bb2\uff0c\u5f53\u65f6\u53c2\u52a0\u603b\u51b3\u8d5b\u524d\uff0c\u6839\u672c\u6ca1\u6709\u591a\u5c11\u8d44\u6599\u53ef\u505a\uff0c\u5c31\u53ea\u5427\u4e4b\u524d\u7684\u603b\u51b3\u8d5b\u9898\u4e00\u904d\u4e00\u904d\u7684\u505a\u3002\u4e5f\u8bb8\u7ecf\u5386\u8fc7\u7b2c\u4e00\u4ee3ACMer\u7f3a\u5c11\u5404\u65b9\u9762\u8d44\u6599\u548c\u6307\u5bfc\u7684\u7ecf\u5386\uff0c\u4f7f\u5176\u81f4\u529b\u4e8e\u5e2e\u52a9\u6307\u5bfc\u56fd\u5185\u7684ACMer\u5b66\u4e60\u7b97\u6cd5\u548c\u51c6\u5907\u7ade\u8d5b\uff0c\u51fa\u7248\u7684\u300a\u7b97\u6cd5\u827a\u672f\u4e0e\u4fe1\u606f\u5b66\u7ade\u8d5b\u300b\u6210\u4e3a\u4e2d\u56fdACM\u754c\u7684\u7ecf\u5178\u3002\u6c5f\u6e56\u4f20\u8a00\uff0c\u4e5f\u8bb8\u662f\u8fd9\u672c\u4e66\u5c01\u9762\u4ee5\u9ed1\u8272\u4e3a\u4e3b\uff0c\u4e5f\u8bb8\u662f\u8fd9\u672c\u4e66\u521a\u51fa\u7684\u65f6\u5019\u6ca1\u6709ISBN\uff0c\u6240\u4ee5\u88ab\u5708\u5185\u79f0\u4e3a&rdquo;\u9ed1\u4e66&ldquo;\u3002\u5176\u7b97\u6cd5\u4ecb\u7ecd\u5df2\u7ecf\u76f8\u5f53\u5168\u9762\u4e14\u6666\u6da9\u96be\u61c2\uff0c\u6c42\u8650\u53ef\u4ee5\u4e70\u4e00\u672c\u3002\u3002\u63a5\u4e0b\u6765\u7684\u8fde\u7eed\u51e0\u5e74\u8fd8\u4e3a\u4fe1\u606f\u5b66\u7ade\u8d5b\u548cACM\u533a\u57df\u8d5b\u51fa\u4e86\u5f88\u591a\u4f18\u8d28\u9898\u76ee\u3002\u5f53\u7136\u4e4b\u540e\u5f88\u591a\u5e74\u4e5f\u5728\u4e3a\u5404\u5927\u8d5b\u4e8b\u63d0\u4f9b\u6307\u5bfc\u548c\u51fa\u9898\u3002\u5bf9\u672c\u5e16\u6709\u5174\u8da3\u7684\u670b\u53cb\u53ef\u4ee5\u6ce8\u610f\u4e00\u4e0b\u8fd9\u4e2a\u5927\u795e\uff0c\u4e0b\u6587\u8fd8\u4f1a\u63d0\u5230\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div><strong>2003~2005</strong></div>\n<div>\u6545\u4e8b\u7ec8\u4e8e\u8981\u548c\u4e2d\u5357\u6709\u5173\u4e86\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>2003\u5e74\u548c2005\u5e74\uff0c\u5206\u522b\u51fa\u73b0\u4e86\u56fd\u5185\u7684\u4e24\u5927OJ\uff08Online Judge)\uff0c\u5373POJ\uff08\u5317\u4eac\u5927\u5b66\uff09\u548cHOJ\uff08\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>OJ&mdash;&mdash;\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf\u3002\u524d\u9762\u8bf4\u8fc7\uff0cACM\u662f\u63d0\u4ea4\u81ea\u5df1\u7684\uff08\u4e00\u822c\u662fC/C++\uff09\u7a0b\u5e8f\u7ed9\u7cfb\u7edf\u5bf9\u5e94\u9898\u76ee\uff0c\u7cfb\u7edf\u8fd0\u884c\u7a0b\u5e8f\u5e76\u5904\u7406\u9884\u5b9a\u7684\u6570\u636e\uff0c\u5224\u65ad\u8f93\u51fa\u7ed3\u679c\u6b63\u786e\u6027\u5e76\u8fd4\u56de\u7ed9\u63d0\u4ea4\u8005\u3002\u4e3a\u4e86\u65b9\u4fbf\u8bad\u7ec3\uff0cOJ\u5e94\u8fd0\u800c\u751f\uff0cACM\u505a\u9898\u8bad\u7ec3\uff0c\u5c31\u662f\u7528OJ\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u91cc\u987a\u4fbf\u4ecb\u7ecd\u6bd4\u8d5b\u4f7f\u7528\u7684PC^2</div>\n<div>&nbsp;</div>\n<div>PC^2&mdash;&mdash;\u4e00\u822c\u662f\u7528\u4e8e\u5c40\u57df\u7f51\u4e2d\uff0c\u76f4\u5230\u73b0\u5728\u533a\u57df\u8d5b\u8fd8\u4f7f\u7528\u7684PC^2\u7cfb\u7edf\uff0cPC^2\u662f\u52a0\u5dde\u5dde\u7acb\u5927\u5b66\u5f00\u53d1\u7684ACM\u6bd4\u8d5b\u7cfb\u7edf\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u548cOJ\u5f88\u5927\u4e00\u70b9\u4e0d\u540c\u662f\u53ef\u4ee5\u8fdb\u884c\u4eba\u5de5\u5e72\u9884\u3002\u61c2\u7f16\u7a0b\u7684\u540c\u5b66\u5e94\u8be5\u77e5\u9053\u7c7b\u4f3c double\u7684\u7cbe\u5ea6 \u548c \u62d3\u6251\u6392\u5e8f\u591a\u89e3\u7b49\u95ee\u9898\uff0c\u540c\u6837\u6b63\u786e\u7684\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u8f93\u51fa\u6709\u504f\u5dee\u7684\u7ed3\u679c\uff0c\u4eba\u5de5\u5e72\u9884\u5927\u591a\u65f6\u5019\u5c31\u662f\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u3002</div>\n<div>&nbsp;</div>\n<div>\u4f46\u662fPC^2\u771f\u5fc3\u6ca1OJ\u597d\u7528\uff0c\u5c24\u5176\u5728Windows\u4e0b\u7684PC^2\uff0c\u4e00\u4e9b\u65e0\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u8ba9\u4eba\u5d29\u6e83\u3002\u6240\u4ee5\u9664\u4e86\u533a\u57df\u8d5b\uff0c\u5f88\u591a\u6bd4\u8d5b\u8fd8\u662f\u4f7f\u7528OJ\u5728\u5c40\u57df\u7f51\u91cc\u7528\u7684\u3002</div>\n<div>&nbsp;</div>\n<div>\u6709\u4e86\u56fd\u4eba\u81ea\u5df1\u7684OJ\uff0c\u4e5f\u662f\u6709\u91cc\u7a0b\u7891\u610f\u4e49\u7684\uff0c\u8fd9\u8ba9\u56fd\u5185ACMer\u6709\u4e86\u66f4\u9002\u5408\u81ea\u5df1\u7684\u8bad\u7ec3\u7cfb\u7edf\uff0c\u52a0\u4e0a\u9ad8\u4e2dOI\u7cfb\u5217\u7ade\u8d5b\u7684\u84ec\u52c3\u53d1\u5c55\uff0c\u5927\u5b66\u7684ACM\u7ade\u8d5b\u5f00\u59cb\u4e86\u7206\u53d1\u5f0f\u7684\u53d1\u5c55\u3002</div>\n<div>&nbsp;</div>\n<div>\u6562\u4e3a\u4eba\u5148\u7684\u6e56\u5357\u5728ACM\u7684\u53d1\u5c55\u4e2d\u771f\u7684\u843d\u540e\u4e86\uff0c\u7ec8\u4e8e\u7701\u5185\u5404\u4e2a\u5927\u5b66\u7684\u4e00\u4e9b\u5b66\u751f\u5f00\u59cb\u53d1\u73b0\u8fd9\u9879\u6bd4\u8d5b\u3002\u4e2d\u5357\u51fa\u73b0\u4e86\u7b2c\u4e00\u4ee3ACMer\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e2a\u65f6\u5019\u5728\u4e2d\u5357\u641eACM\u8fd8\u662f\u7eaf\u7cb9\u7684\u6c11\u95f4\u6d3b\u52a8\uff0c\u5c31\u597d\u50cf\u7535\u7ade\u7231\u597d\u8005\u5728\u6821\u95e8\u53e3\u7f51\u5427\u53c2\u52a0\u64b8\u554a\u64b8\u6bd4\u8d5b\u4e00\u6837\u3002\u6ca1\u6709\u7ecf\u8d39\uff0c\u6ca1\u6709\u6307\u5bfc\u8001\u5e08\uff0c\u6ca1\u6709\u5956\u52b1\u653f\u7b56\u3002</div>\n<div>&nbsp;</div>\n<div>\u53c2\u52a0\u4e00\u573a\u533a\u57df\u8d5b\uff0c\u7ecf\u6d4e\u4e0a\u4e5f\u662f\u4e0d\u5bb9\u6613\u7684\uff0c\u4e00\u4e2a\u961f\u4e09\u4e2a\u4eba\uff0c\u75282011\u5e74\u53bb\u5927\u8fde\u8d5b\u533a\u6253\u6bd4\u65b9\u5427\uff0c\u706b\u8f66\u7968\u5927\u7ea62000\uff0c\u53c2\u8d5b\u8d391000\uff0c\u4f4f\u5bbf\u8d391200\u3002\u57282003\u90a3\u4e2a\u65f6\u5019\uff0c\u4e2d\u5357\u7684ACMer\u771f\u7684\u662f\u4e00\u7fa4\u70ed\u8840\u9752\u5e74\uff0c\u4ed6\u4eec\u70ed\u7231\u8fd9\u9879\u6bd4\u8d5b\uff0c\u81ea\u8d39\u53c2\u52a0\u3002\u800c\u9ad8\u5bcc\u5e05\u5317\u5927\u6e05\u534e\uff0c\u4e00\u4e2a\u8d5b\u533a\u5c31\u80fd\u53bb\u4e09\u56db\u4e2a\u961f\u4f0d\uff0c\u6d59\u5927\u590d\u65e6\u751a\u81f3\u53c2\u52a0\u56fd\u5916\u7684\u4e1c\u4eac\u3001\u65b0\u7af9\u3001\u96c5\u52a0\u8fbe\u7b49\u8d5b\u533a\u3002\u80fd\u53c2\u52a0\u66f4\u591a\u7684\u961f\u4f0d\u5bf9\u4e8e\u79ef\u7d2f\u7ecf\u9a8c\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff08\u6709\u6728\u6709\u770b\u8fdb\u51fb\u7684\u5de8\u4eba\u3002\u3002845\u5e74\u548c850\u5e74\u6218\u6597\u6c34\u51c6\u5b8c\u5168\u4e0d\u540c\u5427\u3002\u3002\u70ae\u7070\u4e5f\u662f\u6709\u91cd\u5927\u610f\u4e49\u7684\u3002\u3002\u3002\uff09</div>\n<div>&nbsp;</div>\n<div>\u4e0d\u80fd\u8bf4\u4e00\u5b9a\u662f\u4eba\u5bb6\u5b66\u6821\u7ed9\u529b\uff0c\u6bd5\u7adf\u90fd\u662f\u6709\u4e2a\u53d1\u5c55\u7684\u8fc7\u7a0b\uff0c\u60f3\u5fc5\u4ed6\u4eec90\u5e74\u4ee3\u521a\u5f00\u59cb\u53c2\u4e0e\u7684\u65f6\u5019\uff0c\u548c\u6211\u4eec\u90a3\u51e0\u5e74\u7684\u5883\u9047\u5dee\u4e0d\u591a\u5427\u3002</div>\n<div>\u4e2d\u5357\u7684ACM\u8d77\u6b65\u665a\uff0c\u60f3\u8ffd\u4e0aACM\u725b\u6821\uff0c\u786e\u5b9e\u9700\u8981\u65f6\u95f4\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u51e0\u5e74\u56fd\u5185\u5d1b\u8d77\u7684\u4e00\u4f4d\u65b0\u661f\uff0c\u5c31\u662f\u4e0d\u5f97\u4e0d\u8bf4\u7684\u5927\u795e \u697c\u5929\u6210\uff08\u697c\u6559\u4e3b\uff09\u3002</div>\n<div>\u697c\u6559\u4e3b\u7684\u7ecf\u5386\u771f\u53ef\u4ee5\u7528\u4f20\u5947\u6765\u5f62\u5bb9\uff0c\u51e0\u4e4e\u5305\u63fd\u56fd\u5185\u5916\u5404\u5927\u7a0b\u5e8f\u8bbe\u8ba1\u8d5b\u4e8b\u7684\u3002\u3002\u3002\u51a0\u519b\uff01</div>\n<div>\u697c\u6559\u4e3b2004\u5e74\u901a\u8fc7OI\u7ade\u8d5b\u4fdd\u9001\u81f3\u6e05\u534e\u5927\u5b66\uff0cOI\u91d1\u724c\u3001\u4e24\u5c4a\u767e\u5ea6\u4e4b\u661f\u51a0\u519b\u3001\u4e00\u5c4aoogle code jam\u51a0\u519b\uff0ctop coder\u8ffd\u81f3\u6392\u540d\u7b2c\u4e00\u3002\u5728\u540e\u6765\u76842009\u5e74\uff0cACM/ICPC\u4e16\u754c\u603b\u51b3\u8d5b\u4e2d\u60dc\u8d25\u5bf9\u624b\u53d6\u5f97\u7b2c\u4e8c\u540d\u3002\u7b2c\u4e00\u4e2a\u4ee5\u6e05\u534e\u5e94\u5c4a\u6bd5\u4e1a\u751f\u8eab\u4efd\u5f97\u5230\u7f8e\u56fd\u4e92\u8054\u7f51\u5927\u725b&ldquo;\u4e0d\u5b58\u5728\u7684\u7f51\u7ad9&rdquo;\u7684Offer\u3002\u662f\u56fd\u5185\u5916\u4f17\u591aACMer\u7684\u5076\u50cf\u7ea7\u4eba\u7269\u3002</div>\n<div>\u5176\u66f4\u591a\u795e\u8ff9\u53ef\u767e\u5ea6\u4e4b\u3002</div>\n<div>&nbsp;</div>\n<div>2004\u5e74\u6e56\u5357\u7701\u5f00\u59cb\u4e86\u7701\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u3002\u90a3\u65f6\u5019\u7701\u8d5b\u8fd8\u662f\u7b97\u6cd5\u8001\u6559\u6388\u51fa\u9898\uff0c\u9898\u76ee\u4e5f\u8bb8\u5b66\u672f\u5473\u6bd4\u8f83\u6d53\u539a\u3002</div>\n<div>\u7701\u8d5b&mdash;&mdash;\u7701\u5185\u6bcf\u4e2a\u5b66\u6821\u6d3e\u51fa\u3010\u81f3\u591a\u3011\u56db\u652f\u961f\u4f0d\u53c2\u8d5b\uff0c\u5b66\u6821\u6392\u540d\u6309\u7167\u56db\u652f\u961f\u4f0d\u7684\u9898\u6570\u603b\u548c\u548c\u603b\u7f5a\u65f6\u8bc4\u6bd4\u3002</div>\n<div>\u7701\u8d5b\u548c\u533a\u57df\u8d5b\u4e00\u70b9\u5f88\u5927\u4e0d\u540c\uff0c\u5c31\u662f\u5bf9\u5b66\u6821\u7684\u8bc4\u4ef7\u6807\u51c6\u3002ACM\u533a\u57df\u8d5b\u5bf9\u4e00\u4e2a\u5b66\u6821\u7684\u6392\u540d\u53d6\u51b3\u4e8e\u8fd9\u4e2a\u5b66\u6821\u6bd4\u8d5b\u540d\u6b21\u6700\u9ad8\u7684\u961f\u4f0d\u3002</div>\n<div>\u8bb0\u5f97\u7b2c\u4e00\u5c4a\u7701\u8d5b\u7684\u56e2\u4f53\u7b2c\u4e00\u662f\u6e56\u5927\uff0c\u540e\u6765\u51e0\u5e74\u7684\u56e2\u4f53\u7b2c\u4e00\u5927\u591a\u5c31\u90fd\u662f\u56fd\u9632\u79d1\u5927\u4e86\u3002\u4e2d\u5357\u5982\u4f55\u5462\uff1f\u54c8\uff0c\u540e\u9762\u8bf4\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>2005\u5e74\u5bf9\u4e8e\u4e2d\u5357ACM\u6765\u8bf4\u4e5f\u662f\u4e2a\u91cc\u7a0b\u7891\u610f\u4e49\u7684\u5e74\u4efd\uff0c\u8fd9\u4e00\u5e74\u5b66\u5de5\u529e\u7684\u9ece\u4e3b\u4efb\u4e3b\u6301\u521b\u529e\u4e86\u4e09\u5927\u7ade\u8d5b\u534f\u4f1a&mdash;&mdash;ACM\u3001\u673a\u5668\u4eba\u3001\u667a\u80fd\u8f66\u3002\u5b66\u6821\u4e5f\u5f00\u59cb\u4e86\u5bf9ACM\u7ade\u8d5b\u7684\u8d8a\u6765\u8d8a\u591a\u7684\u652f\u6301\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e2d\u5357\u5927\u5b66ACM\u7231\u597d\u8005\u534f\u4f1a&mdash;&mdash;\u4ee5\u6211\u4e86\u89e3\uff0c\u4e2d\u5357\u7684\u793e\u56e2\u4e00\u822c\u662f\u4ece\u6821\u56e2\u59d4\u7533\u8bf7\uff0c\u7136\u540e\u5f52\u5b66\u793e\u8054\u7ba1\u7406\uff0c\u8bb0\u5f97\u5927\u4e00\u65f6\u5019\u5165\u56e2\u662f\u4ea420\u5143\u5165\u56e2\u8d39\uff0c\u4ee5\u5e2e\u52a9\u793e\u56e2\u65e5\u5e38\u8fd0\u8425\u3002\u800cACM\u534f\u4f1a\u662f\u5b66\u5de5\u529e\u529e\u8d77\u7684\uff0c\u4f5c\u4e3a\u7ade\u8d5b\u53d1\u5c55\u793e\u56e2\uff0c\u4e0d\u6536\u4f1a\u8d39\uff0c\u90a3\u4e48\u4e5f\u5c31\u6ca1\u6709\u94b1\u7ed9\u5b66\u793e\u8054\u54af\u3002\u3002\u5f53\u5e74\u9ece\u4e3b\u4efb\u4e5f\u548c\u56e2\u59d4\u4ea4\u6d89\u8fc7\uff0c\u6240\u4ee5ACM\u534f\u4f1a\u6302\u9760\u5728\u4e86\u79d1\u534f\uff0c\u4f46\u8fd8\u662f\u548c\u5b66\u793e\u8054\u6709\u6240\u5408\u4f5c\u3002 \u81f3\u4e8e\u540e\u6765\uff0c\u56e0\u4e3a\u4e0d\u6536\u4f1a\u8d39\uff0c\u5b9e\u5728\u662f\u6728\u6709\u94b1\uff0c\u6240\u4ee5\u8fd8\u662f\u72ec\u7acb\u884c\u52a8\u4e86\u3002\u3002\uff08\u4ee5\u4e0a\u5185\u5bb9\u4ec5\u4e3a\u5bf9\u53f2\u6599\u7406\u89e3\uff0c\u51c6\u786e\u6027\u6709\u5f85\u8003\u5bdf\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div><strong>2006~2008</strong></div>\n<div><strong>&nbsp;</strong></div>\n<div>\u4e2d\u5357\u7684\u7b2c\u4e00\u4ee3\u5927\u795e\u6210\u957f\u53f2\u3002</div>\n<div>&nbsp;</div>\n<div>\u5f88\u591a\u521b\u9020\u8f89\u714c\u6218\u7ee9\u7684ACM\u9009\u624b\u90fd\u51fa\u8eab\u9ad8\u4e2dOI\u7ade\u8d5b\uff0c\u4fdd\u9001\u81f3\u516d\u5927\uff08\u6e05\u534e\u5317\u5927\u7b49\u7b49\u516d\u4e2aACM\u4f20\u7edf\u5f3a\u6821\uff09\uff0c\u5728\u5927\u5b66\u7ee7\u7eed\u53c2\u52a0ACM\u6bd4\u8d5b\u3002</div>\n<div>&nbsp;</div>\n<div>\u800c\u4e2d\u5357\u7684\u8fd9\u4e00\u4ee3\u5927\u795e\u57fa\u672c\u4e0a\u4eba\u4eba\u90fd\u662f\u4ece\u5927\u4e00\u5b66C\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u5f00\u59cb\u63a5\u89e6\u7f16\u7a0b\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e2a\u65f6\u5019\u4e2d\u5357\u7684ACM\u7231\u597d\u8005\u534f\u4f1a\u5df2\u521d\u5177\u89c4\u6a21\uff0c\u6211\u6240\u80fd\u8ffd\u6eaf\u5230\u7684\u4e2d\u5357\u6700\u65e9\u7684ACM\u5927\u725b\u5c31\u662f\u59da\u603b\u3002</div>\n<div>&nbsp;</div>\n<div>\u90a3\u4e2a\u65f6\u5019\u4e2d\u5357ACM\u534f\u4f1a\u5206\u516d\u5927\u90e8\u95e8\uff0c\u59da\u603b\u662f\u5176\u4e2d\u4e00\u4e2a\u90e8\u95e8\u7684\u90e8\u957f\uff0c\u5728\u90a3\u65f6\u5df2\u6709\u6570\u767e\u9898\u7684\u9898\u91cf\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3002\u3002\u3011</div>\n<div>\u9898\u91cf&mdash;&mdash;\u867d\u7136\u4efb\u4f55\u8003\u8bd5\u548c\u6bd4\u8d5b\u90fd\u5e76\u4e0d\u63d0\u5021\u9898\u6d77\u6218\u672f\uff0c\u4f46\u662f\u9898\u91cf\u5f80\u5f80\u80fd\u591f\u4f53\u73b0\u4e00\u4e2a\u4eba\u4ed8\u51fa\u4e86\u591a\u5c11\u52aa\u529b\uff0cACM\u9009\u624b\u7ade\u8d5b\u6c34\u5e73\u548c\u8bad\u7ec3\u7684\u9898\u91cf\u4e5f\u5f88\u6709\u5173\u7cfb\u3002\u5728\u90a3\u4e2a\u65f6\u5019\uff0c\u5b8c\u6210400\u9898\u5728\u56fd\u5185\u5df2\u80fd\u8dfb\u8eab\u9ad8\u624b\u884c\u5217\uff08\u5f53\u7136\u73b0\u5728\u662f\u8fdc\u8fdc\u4e0d\u591f\u4e86\uff09\u3002\u697c\u6559\u4e3b\u63a5\u53d7\u91c7\u8bbf\u66fe\u8bf4\u5f53\u5e74\u8ba1\u5212\u5b8c\u62102000\u9898\uff0c\u540e\u6765\u4e5f\u505a\u5230\u4e86\uff0c\u4e00\u4ee3\u9ad8\u624b\u80cc\u540e\u4e5f\u662f\u76f8\u5f53\u6f2b\u957f\u800c\u8270\u82e6\u7684\u5386\u7a0b\u3002</div>\n<div>&nbsp;</div>\n<div>\u59da\u603b\u90a3\u4e2a\u65f6\u4ee3\u4e2d\u5357ACM\u6c34\u5e73\u786e\u5207\u5982\u4f55\u5df2\u4e0d\u53ef\u8003\uff0c\u800c\u90a3\u4e00\u5e74\uff0c\u8d75\u6559 \u4ee5\u65b0\u4eba\u7684\u59ff\u6001\u8fdb\u5165\u4e86ACM\u7684\u4e16\u754c\u3002</div>\n<div>&nbsp;</div>\n<div>\u8d75\u6559\u5f53\u5e74\u5f53\u7136\u8fd8\u79f0\u4e0d\u4e0a\u6559\u5934\uff0c\u5e26\u7740\u5bf9\u59da\u603b\u7684\u819c\u62dc\uff0c\u52aa\u529b\u594b\u6597\u7740\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e2d\u5357\u5728\u7b2c\u4e00\u5c4a\u7701\u8d5b\u4e4b\u540e\u90a3\u4e00\u5e74\uff0c\u5f00\u59cb\u4e86\u672c\u6821\u7684\u6821\u8d5b\uff0c\u4e5f\u662f\u7701\u5185\u6700\u65e9\u4e00\u6279\u5f00\u59cb\u4e3e\u529e\u6821\u8d5b\u7684\u5b66\u6821\u4e4b\u4e00\u3002\u6bcf\u5e74\u6821\u8d5b\u57283\u6708\u4e3e\u884c\uff0c07\u5e74\u6821\u8d5b\u59da\u603b\u8d1f\u8d23\u4e86\u51fa\u9898\u5de5\u4f5c\uff0c\u8d75\u6559\u7684\u8868\u73b0\u4e5f\u5f15\u8d77\u4e86&ldquo;\u8001\u4eba\u4eec&rdquo;\u7684\u6ce8\u610f\u3002</div>\n<div>&nbsp;</div>\n<div>\u8bad\u7ec3\u57fa\u672c\u4e0a\u5c31\u662f \u5237\u9898-\u603b\u7ed3\u7b97\u6cd5 + \u6bd4\u8d5b-\u603b\u7ed3\u7ecf\u9a8c\uff0c\u90a3\u65f6\u5019\u59da\u603b\u548c\u8d75\u6559\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u6708100\u9898\u7684\u8fdb\u5ea6\u3002</div>\n<div>&nbsp;</div>\n<div>\u5047\u671f\u8d75\u6559\u5728HOJ\uff08\u676d\u7535OJ\uff09\u5237\u9898\u7684\u65f6\u5019\uff0c\u770b\u5230\u4e86\u53e6\u4e00\u4e2a\u4e2d\u5357\u7684\u5e10\u53f7\u4e5f\u5728\u75af\u72c2\u7684\u5237\u9898\uff0c\u901a\u8fc7\u7ad9\u5185\u4fe1\uff0c\u53d1\u73b0\u8fd9\u4e2a\u5e10\u53f7\u7684\u4e3b\u4eba\u5bbf\u820d\u7adf\u7136\u5728\u540c\u4e00\u680b\u697c\uff0c\u4e8e\u662f \u6728\u5357 \u88ab\u53d1\u73b0\u4e86\uff01</div>\n<div>&nbsp;</div>\n<div>\u59da\u603b\u3001\u8d75\u6559\u3001\u6728\u5357 \u7684\u76f8\u8bc6\uff0c\u5f00\u542f\u4e86\u4e2d\u5357ACM\u8d70\u51fa\u6e56\u5357\uff0c\u4e0e\u5f3a\u6821PK\u7684\u65b0\u7bc7\u7ae0\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u767e\u5ea6\u7a7a\u95f4\u90a3\u4e2a\u5751\u7239\u7684\u6539\u9769\uff0c\u51e0\u4e2a\u524d\u8f88\u7684\u535a\u5ba2\u4ece\u4e16\u754c\u4e0a\u6d88\u5931\u4e86&hellip;&hellip;\u8d44\u6599\u4e0d\u53ef\u8003\uff0c\u6240\u4ee5\u6545\u4e8b\u7684\u5177\u4f53\u5e74\u4efd\u6216\u8bb8\u4f1a\u6709\u9519\u4e71\u3002\u3002\u3011</div>\n<div>\u90a3\u5e94\u8be5\u662f08\u5e74\uff0cACM\u534f\u4f1a\u4e00\u76f4\u5728\u52aa\u529b\u5ba3\u4f20\u7ade\u8d5b\uff0c\u5e26\u65b0\u4eba\u5165\u95e8\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u8d75\u6559\u6ce8\u610f\u5230\u4e00\u4e2a\u65b0\u4eba&mdash;&mdash;\u7f57\u795e\u3002\u7f57\u795e\u90a3\u4e2a\u65f6\u5019\u8fd8\u662f\u4e2a\u5c0f\u5c0f\u5c0f\u5c0f\u9e1f\uff0c\u4f46\u662f\u5bf9\u6570\u5b66\u7684\u654f\u611f\u548c\u5bf9\u95ee\u9898\u6761\u7406\u7684\u601d\u7ef4\uff0c\u662f\u5355\u9760\u8bad\u7ec3\u65e0\u6cd5\u8fbe\u5230\u7684\u3002</div>\n<div>&nbsp;</div>\n<div>\u6691\u5047\u4e4b\u540e\uff0c\u4e00\u5e74\u4e00\u5ea6\u7684\u7701\u8d5b\u4e34\u8fd1\uff0c\u4e3a\u4e86\u57f9\u517b\u65b0\u4eba\uff0c\u8d75\u6559\u548c\u7f57\u795e\u7ec4\u961f\u3002</div>\n<div>\u8fd9\u4e00\u5e74\u7701\u8d5b\u6210\u7ee9\u4f9d\u7136\u5e73\u6de1\u65e0\u5947\uff0c\u8d75\u6559\u548c\u7f57\u795e\u7684\u961f\u4f0d\u56e0\u4e3a\u8fd0\u6c14\u548c\u4e00\u4e9b\u5931\u8bef\u53ea\u5f97\u5230\u4e862\u7b49\u5956\uff0c\u4f46\u662f\u8d75\u6559\u5728\u535a\u5ba2\u4e2d\u80af\u5b9a\u7684\u8bf4\uff0c\u7f57\u795e\u5728ACM\u7ade\u8d5b\u4e00\u5b9a\u6709\u4e0d\u53ef\u4f30\u91cf\u7684\u53d1\u5c55\u3002</div>\n<div>\u800c\u8d75\u6559\u7684\u535a\u5ba2\u6709\u4e00\u6761\u6e58\u5927\u8c22\u6559\u7ec3\u7684\u56de\u590d\uff0c\u8bc4\u4ef7\u8d75\u6559\u5f88\u6709\u6559\u7ec3\u7684\u98ce\u8303\u3002\u4e8b\u5b9e\u4e5f\u786e\u5982\u6b64\uff0c\u8d75\u6559\u5bf9\u4e8e\u4e2d\u5357ACM\u7684\u53d1\u5c55\u53f2\u7edd\u4e0d\u4ec5\u4ec5\u662f\u62ff\u5230\u5956\u724c\u6323\u5f97\u8363\u8a89\uff0c\u540c\u65f6\u4e5f\u81f4\u529b\u4e8e\u53d1\u5c55\u4e2d\u5357ACM\uff0c\u5bf9\u65b0\u4eba\u7684\u53d1\u73b0\u3001\u5f15\u5bfc\uff0c\u5bf9\u8bad\u7ec3\u7684\u7ec4\u7ec7\u7b49\u7b49\u4ed8\u51fa\u8bb8\u591a\u52aa\u529b\u3002\u5176\u535a\u5ba2\u4e0a\u7684\u56fe\u8bba\uff08\u6570\u636e\u7ed3\u6784\u3001\u79bb\u6563\u6570\u5b66\u7b49\u5b66\u79d1\u7684\u91cd\u70b9\u77e5\u8bc6\uff09\u9898\u76ee\u5217\u8868\u6807\u6ce8\u4e86\u5206\u7c7b\u548c\u7b80\u4ecb\uff0c\u6210\u4e3a\u5f88\u591a\uff08\u4e0d\u4ec5\u662f\u4e2d\u5357\uff09ACMer\u5b66\u4e60\u8f6c\u8f7d\u7684\u7ecf\u5178\u535a\u6587\uff0c\u56fe\u8bba\u4ee3\u7801\u6a21\u677f\u6d41\u4f20\u81f3\u4eca\u3002</div>\n<div>&nbsp;</div>\n<div>\u4ece\u80fd\u591f\u8003\u5bdf\u7684\u53f2\u6599\u770b\uff0c08\u5e74\u6211\u4eec\u7701\u8d5b\u53c2\u52a0\u4e86\u4e09\u652f\u961f\u4f0d\uff0c\u4e00\u4e2a\u4e8c\u7b49\u5956\u4e24\u4e2a\u4e09\u7b49\u5956\uff0cICPC\u533a\u57df\u8d5b\u4e24\u4e2a\u94f6\u5956\u4e24\u4e2a\u94dc\u5956\u3002\u90a3\u4e48\uff0c\u4e0b\u4e00\u5e74\u76ee\u6807\uff1a\u533a\u57df\u8d5b\u91d1\u5956\u3002</div>\n<div>&nbsp;</div>\n<div>\u8865\u5145\uff1a\u7701\u8d5b\u7684\u56e2\u4f53\u6210\u7ee9\u662f\u7b2c\u4e09\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>\u90a3\u51e0\u5e74\u5e94\u8be5\u662fACM\u5728\u4e2d\u56fd\u5f71\u54cd\u529b\u6269\u5927\u6700\u5feb\u7684\u51e0\u5e74\uff0c\u7531\u4e8e\u53c2\u8d5b\u89c4\u6a21\u7684\u6269\u5927\uff0c\u533a\u57df\u8d5b\u589e\u52a0\u4e86\u7f51\u7edc\u8d5b&ldquo;\u6d77\u9009&rdquo;\u73af\u8282\uff0c\u5373\u5728\u533a\u57df\u73b0\u573a\u8d5b\u4e4b\u524d\uff0c\u901a\u8fc7\u4e00\u573a\u5728\u7f51\u4e0a\u8fdb\u884c\u7684\u6bd4\u8d5b\u5bf9\u5b66\u6821\u8fdb\u884c\u7b5b\u9009\uff0c\u6210\u7ee9\u9760\u524d\u7684\u5b66\u6821\u4f1a\u6839\u636e\u7279\u5b9a\u7684\u89c4\u5219\u83b7\u5f97\u53c2\u52a0\u73b0\u573a\u8d5b\u7684\u82e5\u5e72\u540d\u989d\u3002</div>\n<div>\u8fd9\u4e09\u5e74\u65f6\u95f4\u56fd\u5185\u7684\u8d5b\u533a\u6570\u4e5f\u9010\u6b65\u589e\u52a0\u5230\u4e865\u4e2a\uff0c\u4e1408\u5e74\u7684\u5176\u4e2d\u4e00\u573a\u662f\u524d\u65e0\u53e4\u4eba\u540e\u65e0\u6765\u8005\u7684&ldquo;\u60e8\u7edd\u4eba\u5bf0&rdquo;\uff0c\u662f\u5728\u4e2d\u79d1\u5927\u7684\u5408\u80a5\u8d5b\u533a\uff0c\u8fd9\u4e00\u5e74\u8bbe\u7f6e\u4e86\u8fd9\u4e2a&ldquo;\u7279\u522b\u8d5b\u533a&rdquo;\uff0c\u4e3a\u4e86\u8ba9\u66f4\u591a\u7684\u5b66\u6821\u6709\u673a\u4f1a\u8fdb\u519b\u603b\u51b3\u8d5b\uff0c5\u4e2a\u8d5b\u533a\u7279\u522b\u5f00\u8bbe\u4e86\u8fd9\u6837\u4e00\u4e2a&ldquo;\u4e0d\u5141\u8bb8\u5df2\u7ecf\u51fa\u7ebf\u8fc7\u7684\u9ad8\u6821\u53c2\u4e0e\u6392\u540d\u7684\u7279\u522b\u8d5b\u533a&rdquo;\uff0c\u800c\u56e0\u4e3a\u51fa\u7ebf\u540d\u989d\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u573a\u9762\u53ef\u4ee5\u60f3\u8c61\u3002\u90a3\u573a\u6bd4\u8d5b\u6839\u636e\u53f2\u6599\u8bb0\u8f7d\u5e94\u8be5\u662f \u534e\u4e2d\u79d1\u6280\u5927\u5b66\u53d6\u5f97\u4e86\u90a3\u4e2a\u53c2\u52a0\u4e16\u754c\u603b\u51b3\u8d5b\u7684\u540d\u989d\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u51e0\u5e74IT\u4f01\u4e1a\u7684\u6bd4\u8d5b\u4e5f\u9010\u6e10\u5174\u8d77\uff0c\u8c37\u6b4c\u516c\u53f8\u7684google code jam\uff0c\u767e\u5ea6\u516c\u53f8\u7684\u767e\u5ea6\u4e4b\u661f\u3002\u90fd\u662f\u7528\u7b97\u6cd5\u9898\u5728\u7f51\u4e0a\u5c42\u5c42\u9009\u62d4\uff0c\u6700\u7ec8\u9009\u51fa\u51e0\u5341\u540d\u9009\u624b\u524d\u5f80\u516c\u53f8\u603b\u90e8\u53c2\u52a0\u603b\u51b3\u8d5b\uff08\u8c37\u6b4c\u51b3\u8d5b\u5f53\u7136\u662f\u53bb\u7f8e\u56fd\u4e86\uff09\u3002\u767e\u5ea6\u7684\u603b\u51b3\u8d5b\u6bd4\u8f83\u6709\u610f\u601d\uff0c\u6bd4\u5982\u5199\u5f53\u5e74\u8fd8\u5f88\u706b\u7684 \u53cd\u6050\u7cbe\u82f1 \u7684AI\uff08AI\u5c31\u662f\u4eba\u5de5\u667a\u80fd\uff09\u3002\u4e0a\u6587\u4e2d\u4e5f\u8bf4\u4e86\uff0c\u697c\u6559\u4e3b\u62ff\u4e86\u4e24\u4e2a\u767e\u5ea6\u4e4b\u661f\u51a0\u519b\uff0c\u4e00\u4e2agoogle code jam\u51a0\u519b\u3002\u5f53\u7136\u51a0\u519b\u603b\u662f\u5f88\u8000\u773c\u7684\uff0c\u4e0d\u8fc7\u5bf9\u4e8e\u66f4\u591aACMer\u6765\u8bf4\uff0c\u5728\u5708\u5b50\u91cc\u503c\u5f97\u70ab\u8000\u7684\u4e00\u4e2a\u8363\u8a89\u5c31\u662f\u5728\u6bd4\u8d5b\u9009\u62d4\u4e2d\u8fdb\u5165\u524dxx\u540d\u7684\u9009\u624b\uff0c\u53ef\u4ee5\u5f97\u5230\u516c\u53f8\u5bc4\u6765\u7684\u7eaa\u5ff5T\u6064\u3002\u90a3\u4e2a\u65f6\u5019\uff0c\u80fd\u6709\u4e00\u4ef6\u8fd9\u6837\u7684T\u6064\u7a7f\u51fa\u6765\u53c2\u52a0\u6bd4\u8d5b\u795e\u9a6c\u7684\uff0c\u679c\u65ad\u662f\u88ab\u819c\u62dc\u7684\u5927\u725b\u3002</div>\n<div>&nbsp;</div>\n<div><strong>2009\u5e74</strong></div>\n<div><strong>&nbsp;</strong></div>\n<div>\u5927\u7ea6\u4ece\u529e\u6821\u8d5b\u5f00\u59cb\u5c31\u6709\u4e86\u6559\u7ec3\uff0c\u4e0d\u8fc7\u4e2d\u5357ACM\u7684\u6559\u7ec3\u6a21\u5f0f\u548c\u5927\u591a\u6570\u5b66\u6821\u76f8\u4f3c\uff0c\u6559\u7ec3\u5e76\u4e0d\u662f\u5168\u804c\u6559\u7ec3\uff0c\u800c\u662f\u8fd8\u8981\u5fd9\u4e8e\u65e5\u5e38\u6559\u5b66\u5de5\u4f5c\u7684\u8001\u5e08\u6216\u6559\u6388\u3002\u6559\u7ec3\u66f4\u591a\u7684\u662f\u63d0\u4f9b\u8bad\u7ec3\u6761\u4ef6\uff0c\u89e3\u51b3\u7ecf\u8d39\uff0c\u9884\u7ea6\u573a\u5730\uff0c\u8054\u7cfb\u6bd4\u8d5b\uff0c\u800c\u6ca1\u6709\u592a\u591a\u7684\u76f4\u63a5\u6307\u5bfc\uff0c\u5177\u4f53\u7684\u8bad\u7ec3\u5f80\u5f80\u662f\u8001\u4eba\u5e26\u65b0\u4eba\u3002</div>\n<div>&nbsp;</div>\n<div>\u90a3\u4e2a\u65f6\u5019\u6211\u4eec\u7684\u6559\u7ec3\u662f\u4f59\u8001\u5e08\uff0c\u4eba\u5f88\u548c\u5584\uff0c\u5728\u4e2d\u5357ACM\u53d1\u5c55\u521d\u671f\u6ca1\u6709\u8d44\u6599\u79ef\u7d2f\u7684\u60c5\u51b5\u4e0b\u4ece\u5404\u5904\u5bfb\u627e\u4e86\u8bb8\u591a\u8d44\u6599\uff0c\u8fd8\u529e\u8bb2\u5ea7\u5ba3\u4f20\u7ade\u8d5b\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e0d\u77e5\u905309\u5e74\u662f\u4e0d\u662f\u7b2c\u4e00\u6b21\u6691\u671f\u96c6\u8bad\uff0c\u4f46\u662f\u80fd\u627e\u5230\u7684\u6700\u65e9\u7684\u96c6\u8bad\u624b\u518c\u5c31\u662f09\u5e74\u7684\u4e86\u3002\u8fd9\u4e00\u5e74\u4ece\u653f\u7b56\u4e0a\u4e89\u53d6\u5230\u4e86\u4e00\u6b21\u5b66\u6821\u5b98\u65b9\u7684\u96c6\u8bad\uff0c\u4e0d\u8fc7\u7531\u4e8e\u7528\u5730\u7d27\u5f20\uff0c\u4e0d\u5f97\u4e0d\u5bc4\u4eba\u7bf1\u4e0b\uff0c\u6691\u671f\u96c6\u8bad\u7684\u8bad\u7ec3\u673a\u623f\u662f\u501f\u7684\u6e56\u5927\u7684\u3002\u3002\u6e56\u5927\u7684\u7ecf\u8d39\u5206\u914d\u548c\u6211\u4eec\u4e0d\u5927\u76f8\u540c\uff0cACM\u8fd9\u90e8\u5206\u662f\u76f8\u5f53\u53ef\u89c2\uff0c\u90a3\u65f6\u7684\u8bad\u7ec3\u6761\u4ef6\u4e5f\u81ea\u7136\u6bd4\u6211\u4eec\u597d\u5f88\u591a\u3002</div>\n<div>&nbsp;</div>\n<div>\u6691\u671f\u96c6\u8bad\u9664\u4e86\u57f9\u517b\u65b0\u4eba\u9009\u62d4\u6821\u961f\uff0c\u66f4\u662f\u4e3b\u529b\u961f\u5458\u5907\u6218\u4e0b\u534a\u5e74\u7684\u7701\u8d5b\u548c\u533a\u57df\u8d5b\u3002\u8bad\u7ec3\u662f\u9ad8\u5f3a\u5ea6\u5e76\u4e13\u6ce8\u7684\uff0c\u4e14\u7b97\u6cd5\u5b66\u4e60\u5bf9\u4e8e\u4e2a\u4eba\u53d1\u5c55\u4e5f\u662f\u6709\u76f8\u5f53\u5927\u7684\u610f\u4e49\uff0c\u4e8e\u662f\u6691\u671f\u96c6\u8bad\u6709\u4e86\u4fe1\u606f\u9662\u3001\u8f6f\u4ef6\u9662\u4e3b\u529b\u961f\u5458\u53ef\u7528\u96c6\u8bad\u4ee3\u66ff\u672c\u79d1\u5927\u5b9e\u4e60\u7684\u4f20\u7edf\u653f\u7b56\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e00\u5e74\u7684\u4e3b\u529b\u662f06\u7ea7\uff0c\u65b0\u4eba\u4e3b\u8981\u6765\u81ea07\u300108\u7ea7\u3002\u4e0d\u8fc707\u7ea7\u7684\u7f57\u795e\u5c31\u662f\u4e2a\u6bd4\u8f83&ldquo;\u8d85\u524d&rdquo;\u7684\u65b0\u4eba\u3002</div>\n<div>&nbsp;</div>\n<div>\u52a9\u7406\u6559\u7ec3\u4e3a\u59da\u603b\u548c\u8d75\u6559\uff0c\u961f\u957f\u4e3a\u6728\u5357\u3002\u52a9\u7406\u6559\u7ec3\u548c\u526f\u961f\u957f \u6709\u53e6\u5916\u51e0\u4e2a\u524d\u8f88\uff0c\u7531\u4e8e\u6ca1\u6709\u76f4\u63a5\u63a5\u89e6\u8fc7\uff0c\u5c31\u4e0d\u518d\u7ec6\u8bf4\u3002</div>\n<div>&nbsp;</div>\n<div>07\u7ea7\u7684\u4f1f\u54e5\u8fd9\u65f6\u5019\u8fd8\u662f\u88ab\u8650\u7684\u6c34\u51c6\u3002\u53e6\u5916\u540c\u5bdd\u5ba4\u7684\u53ccjie\uff08\u6377\u548c\u6770\uff09\u4e0a\u4f59\u8001\u5e08\u7684\u8bfe\u7684\u65f6\u5019\u4e86\u89e3\u5230\u4e86ACM\uff0c\u4e5f\u53c2\u4e0e\u5230\u6691\u671f\u96c6\u8bad\u4e2d\u6765\u3002</div>\n<div>&nbsp;</div>\n<div>08\u7ea7\u80fd\u542c\u8bf4\u6691\u671f\u96c6\u8bad\u5e76\u6765\u53c2\u52a0\u5b9e\u5c5e\u4e0d\u6613\uff0c\u6211\u90a3\u4e2a\u65f6\u5019\u662f\u5b8c\u5168\u6ca1\u6709\u542c\u8bf4ACM\u7684\u4efb\u4f55\u6d88\u606f\u7684\uff0c\u5ba3\u4f20\u4e0d\u529b\u554a\u3002\u6709NOIP\u80cc\u666f\u7684\u5927\u8c61\uff0c\u6709\u9633\u4ed4\uff0c\u6709\u5c0f\u90b1\u7b49\u516d\u4eba\u53c2\u52a0\u96c6\u8bad\u3002</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad\u603b\u4eba\u657044\u4eba\u3002</div>\n<div>&nbsp;</div>\n<div>\u76ee\u6807\u91d1\u5956\u4e0d\u662f\u968f\u4fbf\u8bf4\u8bf4\uff0c\u8fd9\u65f6\u5019\u7684\u7f57\u795e\u4fe8\u7136\u5df2\u7fbd\u7ffc\u4e30\u6ee1\u8dfb\u8eab\u4e3b\u529b\uff0c\u8d75\u6559\u5df2\u662f\u56fe\u8bba\u9ad8\u624b\uff0c\u6728\u5357\u4e5f\u7280\u5229\u65e0\u6bd4\u3002\u59da\u603b\u51c6\u5907\u9000\u5f79\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e00\u5e74\u7701\u8d5b\u62ff\u5230\u4e86\u5355\u961f\u51a0\u519b\uff0c\u4e0d\u8fc7\u56e2\u4f53\u6392\u540d\u4f9d\u7136\u662f\u7b2c\u4e09\u3002</div>\n<div>&nbsp;</div>\n<div>\u5728\u533a\u57df\u8d5b\u8fd8\u7a0d\u663e\u7a1a\u5ae9\u7684 \u8d75\u6559\u3001\u6728\u5357\u3001\u7f57\u795e\uff0c\u5728\u5408\u80a5\u8d5b\u533a\u7a33\u5b9a\u53d1\u6325\uff0c\u4f46\u5230\u6700\u540e\u534a\u5c0f\u65f6\uff0c\u6392\u540d\u8fd8\u5728\u94f6\u5956\u533a\u3002\u4e00\u9053\u53ef\u505a\u7684\u9898\u8fd8\u5728\u7d27\u5f20\u5730\u6572\u7740\u4ee3\u7801\u300220\u5206\u949f...10\u5206\u949f...5\u5206\u949f...\u63d0\u4ea4\uff01\u7cfb\u7edf\u8fd4\u56de\u4e86 \"WA\"\uff08Wrong Answer\uff09...4\u5206\u949f...3\u5206\u949f...2\u5206\u949f...\u8c03\u8bd5\u540e\u91cd\u65b0\u63d0\u4ea4...1\u5206\u949f...&ldquo;YES&rdquo;\uff01\u60f3\u5fc5\u5f53\u65f6\u4e09\u4e2a\u4eba\u9ad8\u5174\u5f97\u62e5\u62b1\u5728\u4e00\u8d77\u4e86\u3002</div>\n<div>\u4e2d\u5357ACM\u7684\u7b2c\u4e00\u679a\u533a\u57df\u8d5b\u91d1\u724c\uff0c\u5b66\u6821\u6392\u540d\u7b2c\u516b\uff0c\u8fd9\u4e00\u5e74\u4e2d\u5357\u5c55\u73b0\u4e86\u4e0d\u4e00\u6837\u7684\u5b9e\u529b\uff0c\u4e5f\u6536\u83b7\u4e86\u4e0d\u9519\u7684\u8fd0\u6c14\u3002</div>\n<div>&nbsp;</div>\n<div><strong>2010\u5e74</strong></div>\n<div>&nbsp;</div>\n<div>09\u5e74\u62ff\u5230\u4e86\u91d1\u724c\uff0c\u867d\u7136\u5b66\u6821\u6392\u540d\u7b2c\u516b\u6709\u4e00\u4e9b\u8fd0\u6c14\uff0c\u4f46\u8ddd\u79bb\u62ff\u5230\u603b\u51b3\u8d5b\u5165\u573a\u5238\u7684\u68a6\u60f3\u5e76\u4e0d\u518d\u9065\u8fdc\u3002</div>\n<div>&nbsp;</div>\n<div>ACM is a game\uff0c\u73a9\u7684\u65f6\u5019\u8ba4\u8ba4\u771f\u771f\u53bb\u73a9\uff0c\u7ed3\u675f\u4e4b\u540e\u8ba4\u8ba4\u771f\u771f\u7ee7\u7eed\u63a5\u4e0b\u6765\u7684\u751f\u6d3b\u3001\u594b\u6597\u3002\u8d75\u6559\u572809\u5e74\u7684\u6bd4\u8d5b\u4e4b\u540e\u9000\u5f79\uff0c\u51c6\u5907\u51fa\u56fd\u7559\u5b66\u3002</div>\n<div>&nbsp;</div>\n<div>\u6216\u8bb8\u7531\u4e8e\u8fde\u7eed\u4e24\u5e74\u6210\u7ee9\u8fdb\u6b65\u7684\u9f13\u821e\uff0c\u8fd9\u4e00\u5e74\u7684\u6821\u8d5b\u7279\u522b\u70ed\u95f9\u3002</div>\n<div>&nbsp;</div>\n<div>\u521a\u521a\u8003\u4e862\u6708\u8ba1\u7b97\u673a\u4e8c\u7ea7\u7684\u90ed\u5c0f\u4fa0\u5bbf\u820d\u91cc\u98d8\u8fdb\u4e86\u4e00\u5f20\u6821\u8d5b\u7684\u5ba3\u4f20\u5355\uff0c\u4e8e\u662f\u51b3\u5b9a\u53bb\u73a9\u4e00\u73a9\u3002\u56fe\u4e66\u9986\u501f\u4e86\u672c\u770b\u4e0d\u61c2\u7684\u7b97\u6cd5\u4e66\uff0c\u62c9\u4e0a\u540c\u73ed\u4e00\u4e2a\u540c\u5b66\u548c\u9694\u58c1\u73ed\u4e00\u5c0fmm\u5c31\u62a5\u4e86\u540d\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e0d\u77e5\u9053\u7528while(scanf()!=EOF)\u8bfb\u6570\u636e\uff0c\u4e0d\u77e5\u9053\u6570\u636e\u53ef\u4ee5\u8fb9\u8bfb\u8fb9\u5904\u7406\u76f4\u63a5\u8f93\u51fa\u800c\u5f00\u5927\u6570\u7ec4\uff0c\u4e0d\u77e5\u9053qsort\u53ef\u4ee5\u6392\u5e8f\u800c\u4e0d\u7528\u5199\u4fe9for\u5faa\u73af\u53bb\u5192\u6ce1\uff0c\u4e0d\u77e5\u9053\u3002\u3002\u3002</div>\n<div>\u4ec0\u4e48\u90fd\u4e0d\u77e5\u9053\uff0c\u76f4\u5230\u6821\u8d5b\u6700\u540e\u51e0\u5206\u949f\uff0c\u5c0fmm\u90fd\u6025\u54ed\u4e86\uff0c0\u9898\u6536\u573a\u3002\u7cd7\u5927\u4e86&hellip;&hellip;</div>\n<div>&nbsp;</div>\n<div>\u6821\u8d5b\u521a\u4e00\u7ed3\u675f\u5c31\u63a5\u5230\u4e86\u6691\u671f\u96c6\u8bad\u62a5\u540d\u901a\u77e5\u3002\u539f\u6765\u8fd8\u6709\u96c6\u8bad\u554a\u3002\u90ed\u5c0f\u4fa0\u4ece\u5c0f\u5b66\u5f00\u59cb\u5c31\u559c\u6b22\u53c2\u52a0\u5404\u79cd\u7ade\u8d5b\uff0c\u867d\u7136\u5bf9ACM\u4ec0\u4e48\u90fd\u4e0d\u4f1a\uff0c\u4e0d\u8fc7\u6216\u8bb8\u6691\u5047&ldquo;\u57f9\u8bad&rdquo;\u4e00\u4e0b\u5c31\u4f1a\u4e86~~\uff08\u5f88\u591a\u65b0\u4eba\u548c\u90ed\u5c0f\u4fa0\u4e00\u6837\u81ea\u52a8\u628a&ldquo;\u96c6\u8bad&rdquo;\u8111\u8865\u6210\u4e86&ldquo;\u57f9\u8bad&rdquo;\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u81ea\u5f53\u4e0d\u8ba4\u8bc6\u4f59\u6559\u7ec3\uff0c\u4f46\u662f\u4e00\u770b\u5c31\u77e5\u9053\u662f\u4e2a\u7ba1\u4e8b\u513f\u7684\u8001\u5e08\uff0c\u4e8e\u662f\u5c31\u95ee\u6821\u8d5b\u6ca1\u505a\u51fa\u9898\u3002\u3002\u8fd8\u80fd\u53c2\u52a0\u6691\u5047\u96c6\u8bad\u5417\uff0c\u54b1\u5199\u4ee3\u7801\u597d\u5feb\u7684\uff0c\u5c31\u662f\u4e0d\u4f1a\u7b97\u6cd5\u3002\u4f59\u8001\u5e08\u54ed\u7b11\u4e0d\u5f97\u7740\u8bf4\uff0c\u7b97\u6cd5\u662f\u6700\u6839\u672c\u7684\uff0c\u600e\u4e48\u80fd\u4e0d\u4f1a\u5462\u3002</div>\n<div>&nbsp;</div>\n<div>\u867d\u7136\u540e\u6765\u77e5\u9053\uff0c\u5176\u5b9e\u90a3\u65f6\u5019\u53c2\u52a0\u96c6\u8bad\u7684\u653f\u7b56\u8fd8\u662f\u5f88\u5bbd\u5bb9\u7684\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u627e\u4e86\u6821\u8d5b\u7fa4\u91cc\u8ba4\u8bc6\u7684\u4f1f\u54e5\u79c1\u804a\uff0c\u6c42\u8fdb\u96c6\u8bad\u554a\u3002</div>\n<div>&nbsp;</div>\n<div>\u4f1f\u54e509\u96c6\u8bad\u7684\u65f6\u5019\u53ef\u80fd\u548c\u8fd9\u65f6\u5019\u7684\u90ed\u5c0f\u4fa0\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u90ed\u5c0f\u4fa0\u4e0d\u77e5\u9053\u4f1f\u54e5\u8fd9\u4e00\u5e74\u6765\u4ed8\u51fa\u4e86\u600e\u6837\u7684\u52aa\u529b\uff0c\u8bfe\u90fd\u51e0\u4e4e\u8df7\u5149\u4e86\uff08\u5f53\u7136\u662f\u4e0d\u63d0\u5021\u7684\uff0c\u4f46\u8fd9\u4e2a\u7cbe\u795e\u771f\u8ba9\u4eba\u611f\u52a8\u554a\uff09\u3002\u8fd9\u65f6\u5019\u7684\u4f1f\u54e5\u4eca\u975e\u6614\u6bd4\uff0c\u4e00\u65b9\u9762\u8d1f\u8d23\u4e86\u6821\u8d5b\u3001\u96c6\u8bad\u62a5\u540d\u7b49\u5f88\u591a\u5de5\u4f5c\uff0c\u53e6\u4e00\u65b9\u9762\u4e5f\u5373\u5c06\u5355\u4eba10\u5e74\u96c6\u8bad\u7684\u52a9\u7406\u6559\u7ec3\uff0c\u5728\u6821\u961f\u4e2d\u4e5f\u662f\u72ec\u5f53\u4e00\u9762\uff0c\u6bd4\u8d5b\u7684&ldquo;\u5355\u5175\u4f5c\u6218\u80fd\u529b&rdquo;\u582a\u6bd4\u5175\u957f\uff08\u5443\uff0c\u5175\u957f\u4e71\u5165\u3002\u3002\u548c\u672c\u5e16\u65e0\u5173\u4eba\u7269\u3002\u53cd\u6b63\u5c31\u662f\u5f88\u5389\u5bb3\u4e86\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad\u7684\u62a5\u540d\u9700\u8981\u586b\u4e00\u4e2a\u8868\u683c\uff0c\u8868\u683c\u7684\u6700\u540e\u4e00\u680f\u662f&ldquo;\u53c2\u4e0eACM\u7ade\u8d5b\u7684\u76ee\u6807&rdquo;\u3002</div>\n<div>&nbsp;</div>\n<div>\u90a3\u65f6\u90ed\u5c0f\u4fa0\u8fd8\u4e0d\u77e5\u9053ACM\u540e\u9762\u6709\u4ec0\u4e48\u7701\u8d5b\u533a\u57df\u8d5b\u603b\u51b3\u8d5b\uff0c\u4e8e\u662f\u96c4\u5fc3\u58ee\u5fd7\u5730\u5199\u4e0b&ldquo;\u5237\u65b0\u4e2d\u5357ACM\u5386\u53f2\u6210\u7ee9&rdquo;\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>\u4e8e\u662f\u6691\u671f\u96c6\u8bad\u5728\u957f\u6c99\u9177\u70ed\u7684\u6691\u5047\u4e2d\u5c55\u5f00\u4e86\uff0c10\u5e74\u7684\u96c6\u8bad\u7ec8\u4e8e\u5728\u672c\u6821\u7684\u673a\u623f\u8fdb\u884c&mdash;&mdash;\u79d1\u6280\u697c\u56db\u697c\u673a\u623f\uff0c\u5f88\u591a\u540c\u5b66\u5e94\u8be5\u5728\u90a3\u91cc\u505a\u8fc7\u4e0a\u673a\u5b9e\u9a8c\u3002\u4f46\u6bd5\u7adf\u8fd8\u662f\u501f\u7684\u673a\u623f\uff0c\u8f6f\u4ef6\u4e0d\u80fd\u968f\u4fbf\u6539\uff0c\u4e66\u672c\u8d44\u6599\u6bcf\u5929\u62ff\u53bb\u8d70\u7684\u65f6\u5019\u8981\u5e26\u8d70\uff0c\u4e2d\u5348\u8fd8\u8981\u5173\u95e8\u3002\u5357\u6821\u7684\u5b69\u5b50\u4eec\u4e00\u5230\u4e2d\u5348\u5c31\u4f1a\u7ea0\u7ed3\u662f\u5927\u8001\u8fdc\u8dd1\u56de\u5357\u6821\u8fd8\u662f\u5728\u672c\u90e8\u6e38\u8361\u3002</div>\n<div>\u6691\u5047\u7684\u5929\u6c14\uff0c\u5927\u4e2d\u5348\u5357\u6821\u672c\u90e8\u4e00\u8d9f\u5dee\u4e0d\u591a\u8863\u670d\u5c31\u5168\u6e7f\u4e86\u3002\u90ed\u5c0f\u4fa0\u5728\u672c\u90e8\u56fe\u4e66\u9986\u5e26\u7a7a\u8c03\u7684\u7684\u7535\u5b50\u9605\u89c8\u5ba4\u5145\u4e86\u70b9\u94b1\uff0c\u6bcf\u5929\u4e2d\u5348\u5c31\u7b97\u662f\u6709\u4e86\u7740\u843d\u3002</div>\n<div>&nbsp;</div>\n<div>\u65e5\u5b50\u662f\u5145\u5b9e\u5feb\u4e50\u7684\uff0c\u4f46\u662f\u4e5f\u4e0d\u5f97\u4e0d\u8bf4\u65b0\u4eba\u6709\u5f88\u591a\u7684\u7ea0\u7ed3\u3002\u6709\u95ee\u9898\u53ef\u4ee5\u95ee\u5b66\u957f\uff0c\u4f46\u662f\u676f\u5177\u5c31\u5b58\u5728\u4e8e\uff0c\u5f31\u5f97\u8fde\u95ee\u9898\u90fd\u6ca1\u5f97\u95ee\u3002</div>\n<div>\u96c6\u8bad\u624b\u518c\u9664\u4e86\u7b80\u5355\u9898\u5217\u8868\u5916\uff0c\u57fa\u672c\u4e0a\u505a\u9898\u5c31\u662f\u6284\u4ee3\u7801\u7684\u8282\u594f\u3002\u5929\u5929\u505a\u9898\uff0c\u5374\u9664\u4e86\u5199\u4ee3\u7801\u66f4\u719f\u7ec3\uff0c\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u660e\u663e\u7684\u8fdb\u5c55\u3002\u96c6\u8bad\u5feb\u7ed3\u675f\u7684\u67d0\u4e00\u6b21\u8bad\u7ec3\u8d5b\uff0c\u90ed\u5c0f\u4fa0\u624d\u5728\u505a\u67d0\u9053\u5b8c\u5168\u4f1a\u505a\u5374\u4e0d\u77e5\u600e\u4e48\u5b58\u5f97\u4e0b\u6570\u636e\u7684\u9898\u76ee\u7684\u65f6\u5019\uff0c\u88ab\u6728\u5357\u524d\u8f88\u544a\u77e5C\u8bed\u8a00\u6709__int64\u8fd9\u4e48\u4e2a\u4e1c\u897f\uff08__int64\uff0c\u662f\u8868\u793a\u6bd4\u8f83\u5927\u7684\u6574\u6570\u7684\u4e00\u79cd\u53d8\u91cf\uff0c\u521d\u5b66\u8005\u5728\u505a\u8d85\u8fc710^9\u7684\u6574\u6570\u7684\u65f6\u5019\u5982\u679c\u4e0d\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u5c31\u4f1a\u4e0d\u77e5\u6240\u63aa\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>\u6ca1\u8d44\u6599\uff0c\u6ca1\u5f15\u5bfc\uff0c\u51e0\u4e4e\u5168\u9760\u81ea\u5df1\u3002\u6240\u8c13\u5e08\u5085\u9886\u8fdb\u95e8\uff0c\u4fee\u884c\u5728\u4e2a\u4eba\uff0c\u95e8\u90fd\u8fdb\u4e0d\u53bb\u8fd8\u600e\u4e48\u641e\u3002\u90ed\u5c0f\u4fa0\u6697\u81ea\u4e0b\u51b3\u5fc3\uff0c\u7b49\u81ea\u5df1\u6210\u4e3a\u4f1f\u54e5\u4ed6\u4eec\u90a3\u6837\u7684\u5927\u725b\u4e4b\u540e\uff0c\u4e00\u5b9a\u8981\u60f3\u529e\u6cd5\u627e\u5230\u8ba9\u65b0\u4eba\u5165\u95e8\u7684\u65b9\u6cd5\uff0c\u8ba9\u4e2d\u5357\u540e\u6765\u7684ACMer\u4e0d\u518d\u5728\u521d\u5b66\u65f6\u8fdb\u5c55\u5f97\u90a3\u4e48\u56f0\u96be\uff0c\u6d6a\u8d39\u90a3\u4e48\u591a\u6ca1\u6709\u5fc5\u8981\u7684\u65f6\u95f4\u3002</div>\n<div>&nbsp;</div>\n<div>\n<div>\u8fd9\u4e00\u5e74\u7684\u96c6\u8bad\u670976\u4eba\uff0c\u6bcf\u4e09\u4e94\u5929\u5c31\u4f1a\u6709\u4e00\u573a\u7ec3\u4e60\u8d5b\u6765\u770b\u5927\u5bb6\u7684\u5b66\u4e60\u8fdb\u5ea6\uff0c\u5e76\u4f5c\u4e3a\u6700\u7ec8\u9009\u62d4\u6821\u961f\u7684\u53c2\u8003\u3002\u96c6\u8bad\u4e00\u4e0a\u6765\u7b2c\u4e00\u573a\u6bd4\u8d5b\uff0c\u90ed\u5c0f\u4fa0\u5c31\u5907\u53d7\u6253\u51fb&mdash;&mdash;29\u540d\uff0c\u8981\u77e5\u9053\u8fd9\u5e74\u96c6\u8bad\u53ef\u662f\u670909\u7ea7\u7684\u5b66\u5f1f\u7684\u3002</div>\n<div>&nbsp;</div>\n</div>\n<div>09\u5e74\u5c31\u5df2\u53c2\u52a0\u8fc7\u96c6\u8bad\u7684\u5927\u8c61\u3001\u5c0f\u90b1\u3001\u9633\u4ed4\u7b49\u7b49\u51e0\u4e2a\u540c\u5e74\u7ea7\u7684\u540c\u5b66\u5728\u96c6\u8bad\u4e00\u5f00\u59cb\u5c31\u9065\u9065\u9886\u5148\uff0c\u4e5f\u5f97\u5230\u4e86\u6728\u5357\u3001\u4f1f\u54e5\u3001\u6377\u54e5\u548c\u6770\u54e5\u7b49\u4e00\u5e72\u52a9\u7406\u6559\u7ec3\u7684\u8ba4\u53ef\u3002\u90ed\u5c0f\u4fa0\u771f\u662f\u7fa1\u6155\u5ac9\u5992\u6068\u554a\uff0c\u867d\u7136\u8fdb\u5c55\u7f13\u6162\u800c\u8f9b\u82e6\uff0c\u4f46\u4e0d\u65ad\u52aa\u529b\uff0c\u603b\u4e0d\u65ad\u5728\u8fdb\u6b65\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e00\u6b21\u6b21\u6bd4\u8d5b\uff0c\u6162\u6162\u7684\uff0c\u7b2c\u5341\u51e0\uff0c\u7b2c\u51e0\uff0c\u751a\u81f3\u6709\u4e00\u6b21\u51b2\u5230\u4e86\u524d\u4e09\uff08\u4e0d\u8fc7\u90a3\u6b21\u662f\u5c0f\u90b1\u9633\u4ed4\u51e0\u4e2a\u6709\u4e00\u90e8\u5206\u6ca1\u53c2\u52a0\u3002\u3002\u3002\uff09\uff0c\u96c6\u8bad\u4e0d\u65ad\u6709\u4eba\u8bf7\u5047\uff0c\u6709\u4eba\u653e\u5f03\u9000\u51fa\uff0c\u4f46\u90ed\u5c0f\u4fa0\u5728\u5b8c\u6210\u4e86\u6691\u671f\u5b9e\u4e60\uff08\u5927\u4e8c\u8fd9\u4e2a\u662f\u5c0f\u5b9e\u4e60\uff0c\u4e14\u53c8\u4e0d\u662f\u4e3b\u529b\u961f\u5458\uff0c\u5c31\u4e0d\u7528\u8003\u8651\u4ee3\u66ff\u5b9e\u4e60\u7684\u95ee\u9898\u4e86\uff09\u4e4b\u540e\u7684\u90a3\u5929\u65e9\u6668\uff0c\u5750\u7740\u6821\u8f66\u4ece\u6e58\u6f6d\u76f4\u5954\u6821\u672c\u90e8\u8f66\u961f\uff0c\u4e0b\u8f66\u98de\u5954\u5230\u79d1\u6280\u697c\u56db\u697c\uff0c\u7ec8\u4e8e\u6ca1\u9519\u8fc7\u96c6\u8bad\u6700\u540e\u4e00\u573a\u6bd4\u8d5b\u3002</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad\u6700\u7ec8\u5e76\u6ca1\u6709\u5237\u6389\u591a\u5c11\u4eba\uff0c\u56e0\u4e3a\u592a\u591a\u4eba\u662f\u81ea\u5df1\u653e\u5f03\u4e86\u3002\u90ed\u5c0f\u4fa0\u7ec8\u4e8e\u5982\u613f\u8fdb\u5165\u4e8620\u4eba\u7684\u6821\u961f\uff0820\u4eba\u662f\u5305\u62ec\u52a9\u7406\u6559\u7ec3\u7b49\u8001\u961f\u5458\u5728\u5185\u7684\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>\u4f59\u8001\u5e08\u53bb\u7f8e\u56fd\u4ea4\u6d41\u5b66\u4e60\u4e86\uff0c\u4e8e\u662f\u6362\u4e86\u65b0\u7684\u6559\u7ec3\u9648\u8001\u5e08\u3002\u8fd9\u4e00\u5e74\u7684\u6821\u961f\u540d\u5355\u662f\u9648\u8001\u5e08\u5ba3\u5e03\u7684\uff0c\u800c\u90ed\u5c0f\u4fa0\u8ba4\u8bc6ACM\u7684\u6559\u7ec3\u4e5f\u4fbf\u4ece\u9648\u8001\u5e08\u8fd9\u4e2a\u65f6\u4ee3\u5f00\u59cb\u3002</div>\n<div>&nbsp;</div>\n<div>\u5373\u4f7f\u8fdb\u4e86\u6821\u961f\uff0c\u4e5f\u5e76\u4e0d\u662f\u591a\u4e48\u53ef\u559c\u53ef\u8d3a\uff0c\u6bd5\u7adf\u65b0\u961f\u5458\u4eec\u8fd8\u662f\u6e05\u695a\u81ea\u5df1\u6709\u51e0\u65a4\u51e0\u4e24\uff0c\u4e2d\u5357\u7684ACM\u8fd8\u5728\u6210\u957f\uff0c\u6821\u961f\u4e5f\u975e\u4e2a\u4e2a\u9ad8\u624b\u3002</div>\n<div>&nbsp;</div>\n<div>\u63a5\u4e0b\u6765\u5c31\u662f\u7701\u8d5b\u7684\u5907\u6218\uff0c\u4e00\u5982\u65e2\u5f80\u7684\u6ca1\u6709\u573a\u5730\u3002\u4e3a\u4e86\u96c6\u4e2d\u8bad\u7ec3\uff0c\u5927\u8c61\u51ed\u501f\u8f6f\u4ef6\u9662ACM\u56e2\u4f53\u7684\u9886\u5934\u8eab\u4efd\u5728\u94c1\u9053\u6821\u533a\u501f\u5f97\u4e86\u4e00\u4e2a\u52c9\u5f3a\u5bb9\u4e0b\u6821\u961f\u7684\u5c0f\u673a\u623f\u3002</div>\n<div>\u5bf9\u4e8e\u6821\u672c\u90e8\u8fd9\u8fb9\u7684\u90ed\u5c0f\u4fa0\u4e00\u5e72\u4eba\u7b49\uff0c\u5c31\u6bd4\u8f83\u8f9b\u82e6\u4e86\u3002\u5468\u672b\u54ea\u6709\u6821\u8f66\u53ef\u5750\uff0c17\u8def\u6324\u5f97\u8981\u7206\u70b8\uff0c\u800c\u6bcf\u5468\u672b\u8981\u5728\u94c1\u9053\u6821\u533a\u673a\u623f\u96c6\u5408\uff0c\u662f\u56e0\u4e3a\u533a\u57df\u8d5b\u7684\u7f51\u7edc\u9009\u62d4\u8d5b\uff08\u4e0a\u6587\u6709\u63cf\u8ff0\uff0c\u7528\u4e8e\u7b5b\u9009\u5b66\u6821\u786e\u5b9a\u53c2\u52a0\u533a\u57df\u73b0\u573a\u8d5b\u7684\u540d\u989d\uff09\u57fa\u672c\u5c31\u5b89\u6392\u57289\u6708\u300110\u6708\u7684\u5404\u4e2a\u5468\u672b\u3002</div>\n<div>&nbsp;</div>\n<div>ACM\u662f\u4e09\u4eba\u7ec4\u961f\u7684\u56e2\u4f53\u9879\u76ee\uff0c\u6240\u4ee5\u6821\u961f\u7684\u8bad\u7ec3\u4e5f\u4f1a\u7ec4\u961f\u8fdb\u884c\u3002\u548c\u961f\u5458\u4e92\u76f8\u4e0d\u719f\u6089\u7684\u65b0\u4eba\u4eec\uff0c\u7ec4\u961f\u5c31\u7531\u4f1f\u54e5\u6765\u6307\u6d3e\u4e86\u3002\u4e8e\u662f\u90ed\u5c0f\u4fa0\u8ba4\u8bc6\u4e86\u97e9\u5c0f\u5e05\u548c\u51cc\u5c0f\u827a\u3002\u51cc\u5c0f\u827a\u5728\u505a\u9879\u76ee\u65b9\u9762\u4e5f\u7b97\u5c0f\u725b\u4e00\u53ea\u4e86\uff08\u9879\u76ee\u662f\u505a\u6bd4\u5982\u6211\u4eec\u7528\u7684<span id=\"1KSFindDIV\" class=\"KSFIND_CLASS\">Q</span><span id=\"2KSFindDIV\" class=\"KSFIND_CLASS\">Q</span>\u4e4b\u7c7b\u8fd9\u6837\u7684\u8f6f\u4ef6\uff0c\u800cACM\u505a\u7684\u7b97\u6cd5\u662f\u89e3\u51b3\u5982\u4f55\u8ba9<span id=\"3KSFindDIV\" class=\"KSFIND_CLASS\">Q</span><span id=\"4KSFindDIV\" class=\"KSFIND_CLASS\">Q</span>\u8fd9\u8f6f\u4ef6\u8fd0\u884c\u5f97\u66f4\u5feb\u4e4b\u7c7b\u7684\u95ee\u9898\uff09\uff0c\u97e9\u5c0f\u5e05\u76ae\u80a4\u7565\u9ed1\uff0c\u53cc\u773c\u5f88\u6709\u795e\uff0c\u653e\u5230\u6821\u961f\u91cc\u771f\u53ef\u4ee5\u7b97&ldquo;\u961f\u8349&rdquo;\u4e00\u679a\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e0d\u8fc7\u533a\u57df\u8d5b\u7684\u7f51\u8d5b\uff0c\u5bf9\u4e8e\u4e09\u4e2a\u5c0f\u83dc\u9e1f\u6765\u8bf4\uff0c\u7b80\u76f4\u662f\u9006\u5929\u7684\u96be\u3002\u5199\u4fe9for\u5faa\u73af\u5c31\u4e0d\u9519\u4e86\uff0c\u4f60\u7ed9\u51fa\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8c01\u6653\u5f97\u53bb\u7ffb\u8d75\u6559\u7684\u6a21\u677f\uff0c\u66f4\u522b\u8bf4\u9ed8\u5199\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u6162\u6162\u7684\u90ed\u5c0f\u4fa0\u89c9\u5f97\u8fd9\u4e48\u4e0b\u53bb\u610f\u4e49\u4e0d\u5927\uff0c\u8dd1\u94c1\u9053\u6821\u533a\u592a\u8d39\u65f6\u95f4\uff0c\u505a\u7f51\u7edc\u8d5b\u4e5f\u7ed9\u6821\u961f\u5e26\u4e0d\u6765\u4ec0\u4e48\u8d21\u732e\uff0c\u53cd\u6b63\u5728\u7f51\u4e0a\u505a\uff0c\u4f55\u5fc5\u975e\u8981\u8dd1\u8fd9\u4e48\u8fdc\u5462\u3002\u4e8e\u662f\u5c31\u5411\u4f1f\u54e5\u8bf7\u6c42\u7f51\u8d5b\u5728\u5bbf\u820d\u505a\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u662f\u4e0d\u77e5\u9053\u5176\u5b9e\u524d\u8f88\u4eec\u66f4\u6ce8\u91cd\u7684\u662f\u8bad\u7ec3\u7684\u6001\u5ea6\uff0c\u9633\u4ed4\u5c31\u4e00\u76f4\u575a\u6301\u5f80\u94c1\u9053\u8dd1\u3002\u4e0d\u8fc7\u8bdd\u8bf4\u56de\u6765\uff0c\u9633\u4ed4\u8fd8\u505a\u7684\u52a8\u90a3\u4e9b\u9898\u7684\u8bf4\uff0c\u7ec8\u7a76\u8fd8\u662f\u6c34\u5e73\u4e0d\u53ca\u4eba\uff0c\u8fd9\u4e00\u5e74\u4e5f\u6ca1\u80fd\u53c2\u52a0\u7701\u8d5b\uff0c\u66f4\u4e0d\u7528\u8bf4\u533a\u57df\u8d5b\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u5e74\u7f57\u795e\u7684\u961f\u4f0d\u662f \u6728\u5357\u3001\u7f57\u795e\uff0c\u533a\u57df\u8d5b\u65f6\u53c8\u8bf7\u4e86\u59da\u603b\u51fa\u5c71\u52a9\u9635\u3002</div>\n<div>&nbsp;</div>\n<div>\u4f1f\u54e5\u7684\u961f\u4f0d\u5219\u662f \u4f1f\u54e5\u3001\u5f00\u4ed9\u3001\u5927\u8c61\u3002 \u4f1f\u54e5\u548c\u5927\u8c61\u7b97\u5168\u80fd\u578b\u7684\u5427\uff0c\u6570\u5b66\u9662\u7684\u5f00\u4ed9\u5c31\u4e13\u653b\u6570\u8bba\u4e86\uff08\u5f00\u4ed9\u5728\u65b0\u4eba\u65f6\u4ee3\u662f\u76f8\u5f53\u7280\u5229\uff0c\u5e08\u5927\u4e00\u5e74\u4e00\u5ea6\u7684\u4e2a\u4eba\u8d5b\u4e2d\u5f00\u4ed9\u538b\u8fc7\u4e86\u7f57\u795e\u548c\u4f1f\u54e5\u7684\u8bf4~~\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>2010\u5e74\u662f\u4e2d\u5357ACM\u7ade\u8d5b\u6210\u7ee9\u7684\u4e00\u6b21\u9ad8\u6f6e\uff0c\u4e0a\u534a\u5e74\u9664\u4e86\u6821\u8d5b\uff0c\u7701\u5185\u4e5f\u6709\u4e86\u53c2\u52a0\u6e58\u6f6d\u9080\u8bf7\u8d5b\u7684\u4f20\u7edf\uff08\u9080\u8bf7\u7701\u5185\u9ad8\u6821\u53c2\u8d5b\uff0c\u89c4\u6a21\u7b97\u4e2a\u5c0f\u7701\u8d5b\u4e86\uff09\uff0c\u7f57\u795e\u7684\u4e00\u961f\u8f7b\u677e\u593a\u51a0\uff0c\u4f1f\u54e5\u7684\u4e8c\u961f\u597d\u50cf\u662f\u7b2c\u4e8c\u6216\u7b2c\u4e09\uff0c\u529b\u538b\u7fa4\u96c4\u3002</div>\n<div>&nbsp;</div>\n<div>\u6bcf\u5e74\u7701\u8d5b\u533a\u57df\u8d5b\u8fd9\u6bb5\u65f6\u95f4\uff0c\u90fd\u4f34\u968f\u7740\u53e6\u4e00\u4e2a\u7275\u52a8\u4eba\u5fc3\u7684\u4e8b\u60c5&mdash;&mdash;\u4fdd\u7814\u3002</div>\n<div>\u90a3\u65f6\u5019\u7701\u8d5b\u7684\u4e00\u7b49\u5956\u8fd8\u53ef\u4ee5\u4fdd\u7814\uff0c\u7f57\u795e\u5927\u6982\u5df2\u7ecf\u6253\u7b97\u627e\u5de5\u4f5c\uff0c\u538b\u529b\u4fbf\u4e0d\u592a\u5927\u3002\u4f1f\u54e5\u5c31\u6bd4\u8f83\u7740\u6025\u4e86\u3002\u4fdd\u7814\u867d\u662f\u4e5d\u6708\u5e95\u5341\u6708\u521d\u516c\u793a\uff0c\u4f46\u901a\u8fc7\u4e00\u4e9b\u76f4\u63a5\u9014\u5f84\uff0c10\u670825\u4e4b\u524d\u7701\u91cc\u4fdd\u7814\u5de5\u4f5c\u7684\u95e8\u8fd8\u662f\u6ca1\u5173\u7684\u3002\u4f46\u662f\u6700\u63ea\u5fc3\u7684\u5c31\u662f\uff0c\u8fd9\u5e74\u7684\u7701\u8d5b\u65f6\u95f4\u4ece10\u6708\u521d\u63a8\u5230\u4e8610\u670831\u65e5\u3002</div>\n<div>&nbsp;</div>\n<div>\u8f83\u65e9\u6765\u4e34\u7684\u676d\u5dde\u8d5b\u533a\uff0c\u7ea0\u7ed3\u4e8e\u4fdd\u7814\u7684\u4f1f\u54e5\u81ea\u5f53\u53bb\u4e89\u53d6\u4e2a\u94f6\u5956\u4ee5\u4e0a\u3002\u53ef\u60dc\u5f88\u9057\u61be\uff0c\u53ea\u62ff\u5230\u4e86\u94dc\u5956\u3002</div>\n<div>&nbsp;</div>\n<div>\u5feb\u5230\u7701\u8d5b\uff0c\u4e5f\u9a6c\u5c71\u5c31\u8981\u786e\u8ba4\u7701\u8d5b\u540d\u5355\uff0c\u8fd9\u65f6\u5019\u771f\u662f&ldquo;\u534a\u8def\u6740\u51fa\u4e2a\u7a0b\u54ac\u91d1&rdquo;\uff0c\u5e08\u5927\u9644\u4e2d\u521a\u6bd5\u4e1a\u8fdb\u4e2d\u5357\u768410\u7ea7\u5c0f\u66f9\u7a81\u7136\u51fa\u73b0\u5728\u6821\u5185ACM\u7fa4\u91cc\uff0c\u9648\u8001\u5e08\u5b89\u6392\u7f57\u795e\u4e0e\u5176\u9762\u8c08\u4e00\u4e0b\u3002\u7ed3\u679c\u5c31\u662f\uff0c\u6709NOIP\u80cc\u666f\u768408\u7ea7\u7684\u4e50\u4e50\u53c2\u52a0\u7701\u8d5b\u7684\u4f4d\u7f6e\u88ab\u5c0f\u66f9\u66ff\u6389\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u539f\u6765\u5c0f\u66f9NOIP\u56e0\u4e3a\u5931\u8bef\u6ca1\u62ff\u5230\u7701\u4e00\u7b49\u5956\u800c\u53c2\u52a0\u9ad8\u8003\u6765\u7684\u4e2d\u5357\uff0c\u4f46\u6c34\u5e73\u5b8c\u5168\u662f\u6e56\u5357\u7701\u4e00\u7684\u6c34\u5e73\uff0c\u66fe\u53c2\u52a0\u4e00\u4e2a\u4e9a\u592a\u5730\u533a\u7684<span id=\"15KSFindDIV\" class=\"KSFIND_CLASS\">OI</span>\u6bd4\u8d5b\u62ff\u5230\u91d1\u724c\uff08\u8fd9\u6bd4\u8d5b\u4e0d\u751a\u4e86\u89e3\uff0c\u4e0d\u8fc7\u4e5f\u633a\u725b\u7684\uff0c\u53ea\u662f\u8fd9\u4e2a\u6bd4\u8d5b\u548c\u9ad8\u6821\u5f55\u53d6\u4e0d\u600e\u4e48\u6302\u94a9\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>\u7701\u8d5b\u6765\u4e34\uff0c\u7531\u4e8e\u7814\u7a76\u751f\u4e0d\u80fd\u53c2\u52a0\u7701\u8d5b\uff0c\u4e8e\u662f\u7f57\u795e\u4e0e\u6377\u54e5\u7ec4\u961f\uff0c\u4f1f\u54e5\u8fd8\u662f\u539f\u961f\u3002\u90a3\u5e74\u6e58\u5927\u8c22\u6559\u7ec3\u5728\u535a\u5ba2\u8bc4\u8bba\u8bf4 \u5982\u679c\u7f57\u795e\u548c\u4f1f\u54e5\u7ec4\u961f\uff0c\u8fd9\u5e74\u7684\u5355\u961f\u51a0\u519b\u5fc5\u662f\u4e2d\u5357\uff0c\u4e0d\u7136\u8fd8\u662f\u6709\u4e9b\u96be\u5ea6\u7684\u3002</div>\n<div>&nbsp;</div>\n<div>\u7136\u800c\u7f57\u795e\u5c31\u662f\u7f57\u795e\uff0c\u6ca1\u6709\u524d\u8f88\u6728\u5357\u3001\u8d75\u6559 \u7684\u961f\u4f0d\u4f9d\u7136\u62ff\u4e86\u5168\u7701\u5355\u961f\u51a0\u519b\u3002\u4f1f\u54e5\u7684\u961f\u4f0d\u4e5f\u76f8\u5f53\u7ed9\u529b\uff0c\u62ff\u4e86\u5355\u961f\u7b2c\u56db\u3002</div>\n<div>10\u5e74\u7701\u8d5b\u5237\u65b0\u4e86&ldquo;\u4e07\u5e74\u8001\u4e09&rdquo;\u7684\u5386\u53f2\u6210\u7ee9\uff0c\u4e2d\u5357\u62ff\u5230\u4e86\u56e2\u4f53\u7b2c\u4e8c\u3002</div>\n<div>&nbsp;</div>\n<div><span id=\"0KSFindDIV\" class=\"KSFIND_CLASS_SELECT\">\u9ad8\u5174\u4e4b\u4f59</span>\uff0c\u4e0d\u514d\u8fd8\u6709\u4f1f\u54e5\u7684\u4f24\u611f&mdash;&mdash;\u8fdf\u6765\u7684\u7701\u4e00\u7b49\u5956\u5df2\u6765\u4e0d\u53ca\u4fdd\u7814\u3002</div>\n<div>&nbsp;</div>\n<div>\u5de5\u4f5c\u662f\u8981\u627e\u4e86\uff0c\u4e0d\u8fc7\u8fd8\u662f\u8981\u5148\u4e13\u5fc3\u6253\u597d\u533a\u57df\u8d5b\uff0c\u5bf9\u5f97\u8d77\u4e00\u5e74\u591a\u6765\u7684\u52aa\u529b\u3002</div>\n<div>&nbsp;</div>\n<div>\u6210\u90fd\u8d5b\u533a\u548c\u798f\u5dde\u8d5b\u533a\u90fd\u8d62\u5f97\u4e86 \u4e24\u652f\u961f\u4f0d\u7684\u540d\u989d\u3002</div>\n<div>&nbsp;</div>\n<div>\u6210\u90fd\u8d5b\u533a\u4f1f\u54e5\u7684\u961f\u4f0d\u597d\u6b79\u662f\u8d62\u4e86\u7f57\u795e\u4e00\u628a\uff0c\u62ff\u4e86\u94f6\u5956\u3002\u7f57\u795e\u8fd9\u8fb9\u591a\u5c11\u6709\u4e9b\u5931\u8bef\uff0c\u867d\u7136\u662f\u94f6\u5956\u4f46\u662f\u540d\u6b21\u9760\u540e\u4e9b\u3002</div>\n<div>&nbsp;</div>\n<div>\u6210\u90fd\u4e4b\u540e\u5c31\u662f\u798f\u5dde\u8d5b\u4e86\uff0c\u6700\u540e\u4e00\u6218\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011ACM\u533a\u57df\u8d5b\u89c4\u5b9a\uff0c\u6bcf\u5e74\u540c\u4e00\u652f\u961f\u4f0d\u4e4b\u591a\u53c2\u52a0\u4e24\u4e2a\u56fd\u5185\u8d5b\u533a\u3002</div>\n<div>&nbsp;</div>\n<div>\u6210\u90fd\u8d5b\u533a\u5fc5\u7136\u4f1a\u6709\u65b0\u4eba\u961f\u51fa\u573a\u3002\u7f57\u795e\u5728\u7fa4\u91cc\u95ee\u4e86\u4e00\u53e5\u8c01\u60f3\u53c2\u52a0\u533a\u57df\u8d5b\u3002\u90ed\u5c0f\u4fa0\u4e00\u4e2a\u7cbe\u795e\uff08\u679c\u65ad\u662f\u50cf\u4e2d\u56fd\u597d\u58f0\u97f3\u91cc\u54c8\u6797\u90a3\u6837&ldquo;\u9009\u6211\u9009\u6211\u9009\u6211&rdquo;\uff01\uff09\uff0c\u5c31\u6bdb\u9042\u81ea\u8350\u4e86\u3002\u65b0\u4eba\u4e00\u822c\u90fd\u5f88\u96be\u62ff\u5230\u6210\u7ee9\uff0c\u6240\u4ee5\u91cd\u5728\u53c2\u4e0e\uff0c\u79ef\u7d2f\u7ecf\u9a8c\uff0c\u5bf9\u6765\u5e74\u5f88\u6709\u597d\u5904\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e0d\u8fc7\u4ee4\u4eba\u5931\u671b\u7684\u662f\uff0c\u7f57\u795e\u79c1\u804a\u4e2d\u8bf4\uff0c\u5b66\u6821\u62a5\u9500\u5f88\u591a\u7ecf\u8d39\u53c2\u8d5b\uff0c\u8fd8\u662f\u5e94\u8be5\u5c3d\u529b\u62ff\u5230\u6210\u7ee9\u7684\u3002\u4e5f\u6ca1\u6709\u591a\u8bf4\uff0c\u90ed\u5c0f\u4fa0\u81ea\u77e5\u62ff\u5956\u8fd8\u5b8c\u5168\u4e0d\u53ef\u80fd\u3002</div>\n<div>&nbsp;</div>\n<div>\u53bb\u53c2\u8d5b\u7684\u6700\u7ec8\u662f\u5c0f\u66f9\u3001\u9633\u4ed4\u3001\u5c0f\u90b1\u3002\u610f\u6599\u4e4b\u4e2d\uff0c\u6ca1\u5f97\u5956\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u7f57\u795e\u3001\u6728\u5357\u3001\u59da\u603b\u5728\u798f\u5dde\u8d5b\u533a\u5927\u663e\u8eab\u624b\u3002</div>\n<div>\u4e00\u5f00\u573a\u7f57\u795e\u961f\u4f0d\u505a\u9898\u98de\u5feb\uff0c\u51e0\u4e4e\u6bcf\u9053\u9898\u90fd\u662f1Y\uff081Y\u7684\u610f\u601d\u662f\u7b2c\u4e00\u6b21\u63d0\u4ea4\u4ee3\u7801\u5c31\u6b63\u786e\uff0c\u800c\u6ca1\u6709Wrong Answer\u4e4b\u7c7b\u7684\u7ed3\u679c\u9020\u6210\u7f5a\u65f6\uff09\u3002</div>\n<div>\u6700\u540e\u5927\u5bb6\u90fd\u77e5\u9053\uff0cD\u9898\uff08\u9898\u53f7\uff09\u505a\u51fa\u6765\u5c31\u80fd\u62ff\u5230\u603b\u51b3\u8d5b\u5165\u573a\u5238\u4e86\uff01\u53ef\u7f57\u795e\u7684\u601d\u8def\u603b\u6709\u90a3\u4e48\u4e00\u70b9\u70b9\u4e0d\u901a\u3002\u6c1b\u56f4\u8d8a\u6765\u8d8a\u7d27\u5f20\uff0c\u6700\u540e\u4e00\u5c0f\u65f6\uff0c\u6700\u540e\u534a\u5c0f\u65f6\uff0c\u6700\u540e\u51e0\u5206\u949f\uff0c\u6572\u7740\u4ee3\u7801\uff0c\u601d\u8003\u7740\u7b97\u6cd5\u3002\u7ec8\u4e8e\uff0c\u88c1\u5224\u5ba3\u5e03\u6bd4\u8d5b\u7ed3\u675f\uff0c\u800c\u90a3\u9053\u9898\uff0c\u8fd8\u662f\u5dee\u4e86\u4e00\u70b9\u70b9\u3002</div>\n<div>&nbsp;</div>\n<div>\u5982\u679c\u8bf4\u524d\u4e00\u5e74\u7684\u91d1\u724c\u591a\u5c11\u6709\u70b9\u8fd0\u6c14\uff0c\u90a3\u4e48\u8fd9\u4e00\u5e74\u4ec5\u4ec5\u62ff\u5230\u91d1\u724c\u5c31\u662f\u7f3a\u4e86\u70b9\u8fd0\u6c14\u3002\u4f9d\u7136\u5b66\u6821\u6392\u540d\u7b2c\u516b\uff0c\u800c\u548c\u603b\u51b3\u8d5b\u68a6\u60f3\u4ec5\u4e00\u6b65\u4e4b\u9065\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e00\u5e74\u662f\u4e2d\u5357ACM\u7684\u5927\u4e30\u6536\uff0c\u800c\u961f\u5458\u4e2d\u53c8\u662f\u51e0\u5bb6\u6b22\u559c\u51e0\u5bb6\u6101\u3002</div>\n<div>&nbsp;</div>\n<div>\u7f57\u795e\u548c\u4f1f\u54e5\u4e00\u8d77\u627e\u5de5\u4f5c\u53bb\u4e86\u3002\uff08\u987a\u4fbf\u4e00\u63d0\uff0c\u7f57\u795e\u9762\u8bd5\u65f6\u5019\u7ed9\u8003\u5b98\u89e3\u91ca\u4e00\u4e2a\u725bX\u7684\u6570\u5b66\u95ee\u9898\u628a\u8003\u5b98\u542c\u50bb\u4e86\uff09</div>\n<div>&nbsp;</div>\n<div>\u8865\u5145\uff1a\u4f1f\u54e5\u961f\u4f0d\u7684\u6210\u7ee9\u4e5f\u672c\u6709\u673a\u4f1a\u66f4\u597d\u4e9b\uff0c\u4e09\u4e2a\u4eba\u7684\u961f\u4f0d\u4e00\u4e2a\u4eba\u5b8c\u5168\u538b\u5728\u4e86\u6570\u8bba\u4e0a\uff0c\u800c\u8fd0\u6c14\u4e0d\u597d\u7684\u662f\u4e24\u573a\u533a\u57df\u8d5b\u6ca1\u6709\u9047\u5230\u5f00\u4ed9\u7684\u6570\u8bba\u9898\u3002\u3002</div>\n<div>\u8fd8\u662f\u8865\u5145\u4e00\u4e0b\u3002\u3002\u867d\u7136\u4e0d\u592a\u91cd\u8981\u7684\u4fe1\u606f\uff1a\u7f57\u795e\u5728\u798f\u5dde\u8d5b\u533a\u6700\u540e\u641e\u7684\u90a3\u4e2a\u9898\u7684\u9898\u53f7\u662f\u4e0d\u662f&ldquo;D&rdquo;\u8bb0\u4e0d\u6e05\u4e86\uff0c\u4e5f\u53ef\u80fd\u662f&ldquo;E&rdquo;\u5427\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>2010~2011</div>\n<div>&nbsp;</div>\n<div>\u7f57\u795e\u5927\u5c0f\u6bd4\u8d5b\u7684\u6210\u7ee9\u548c\u5728\u6e56\u5357ACM\u754c\u7684\u5404\u7c7b\u6d3b\u52a8\uff08\u51fa\u9898\uff0c\u535a\u5ba2\uff0c\u7fa4\u5185\u8ba8\u8bba\u795e\u9a6c\u7684\uff09\uff0c\u6e10\u6e10\u8d62\u5f97\u4e86\u7701\u5185\u8bb8\u591aACMer\u79f0\u5176\u4e3a&ldquo;\u6559\u4e3b&rdquo;\u7684\u7f8e\u8a89\u300210\u5e74\u4e2d\u5357ACM\u5728\u6e56\u5357\u4e5f\u786e\u5b9e\u53d6\u5f97\u4e86\u538b\u5012\u6027\u4f18\u52bf\uff0c\u7f57\u795e\u4e5f\u51e0\u4e4e\u4ee3\u8868\u7740\u8fd9\u4e2a\u65f6\u5019\u6e56\u5357ACM\u7684\u6700\u9ad8\u6c34\u5e73\u3002</div>\n<div>&nbsp;</div>\n<div>\u767e\u5ea6\u4e4b\u661f\u8fd9\u5e74\u7684\u664b\u7ea7\u8d5b\u6709\u4e2a\u7ed9\u75af\u72c2\u5766\u514b\u5199AI\u7684\u73af\u8282\uff0c\u4f1f\u54e5\u4e86\u4e2a\u534e\u4e2d\u8d5b\u533a\u7684\u7b2c\u4e00\u540d\u3002</div>\n<div>&nbsp;</div>\n<div>\u6ca1\u80fd\u53c2\u52a010\u5e74\u4efb\u4f55\u4e00\u573a\u5927\u6bd4\u8d5b\u7684\u90ed\u5c0f\u4fa0\uff0c\u5bf9ACM\u662f\u5426\u8fd8\u8981\u575a\u6301\u7684\u4fe1\u5fc3\u6709\u70b9\u52a8\u6447\u3002\u51cc\u5c0f\u827a\u548c\u97e9\u5c0f\u5e05\u5bf9\u7ee7\u7eed\u505aACM\u7684\u6001\u5ea6\u4e5f\u5e76\u4e0d\u4e50\u89c2\u3002\u672c\u8eab\u662f\u81ea\u52a8\u5316\u90ed\u5c0f\u4fa0\uff0c\u56e0\u4e3a\u4e13\u4e1a\u8bfe\u4e0d\u540c\uff0c\u641e\u4e2a\u4e8c\u53c9\u6811\u5c31\u7ea0\u7ed3\u4e86\u597d\u51e0\u5929\uff0c\u521a\u597d\u5e74\u5e95\u770b\u5230\u4e86\u667a\u80fd\u5c0f\u8f66\u7684\u901a\u77e5\uff0c\u4e8e\u662f\u6253\u7b97\u53bb\u6253\u4e2a\u9171\u6cb9\u770b\u770b\u3002</div>\n<div>\u667a\u80fd\u5c0f\u8f66\u641e\u5f97\u600e\u4e48\u6837\u5c31\u4e0d\u518d\u8be6\u8ff0\uff0c\u4f46\u662f\u90ed\u5c0f\u4fa0\u770b\u5230\u4e86\u667a\u80fd\u8f66\u6bd4\u8d5b\u7684\u6761\u4ef6\u7adf\u7136\u6bd4ACM\u597d\u592a\u591a\uff0c\u6709\u81ea\u5df1\u7684\u8bad\u7ec3\u57fa\u5730\uff0c\u4e3b\u529b\u961f\u5458\u751a\u81f3\u6709\u81ea\u5df1\u7684\u4f4d\u7f6e\u653e\u7535\u8111\u653e\u8d44\u6599\u3002\u4f3c\u4e4e\u90ed\u5c0f\u4fa0\u5185\u5fc3\u8fd8\u662f\u7ad9\u5728ACM\u8fd9\u4e00\u8fb9\u7684\uff0c\u5fc3\u4e2d\u66f4\u591a\u7684\u662f\u5ac9\u5992\u3002</div>\n<div>&nbsp;</div>\n<div>[\u4e00\u4e2a\u4e0d\u7528\u7c97\u62ec\u53f7\u7684\u5c0f\u63d2\u66f2\u3002\u3002\u3002\u5c0f\u7a0b\u5e8f\u733f\u7684\u9006\u88ad] \u90ed\u5c0f\u4fa0\u548c\u9694\u58c1\u73ed\u4e00\u5c0fmm\u8ba4\u8bc6\u5927\u534a\u5e74\u4e86\uff0c\u5173\u7cfb\u4e00\u76f4\u6ca1\u4ec0\u4e48\u8fdb\u5c55\u3002\u5e74\u5e95\u65f6\u5019\uff0c\u8981\u505a\u5355\u7247\u673a\u8bfe\u7a0b\u8bbe\u8ba1\u3002\u5df2\u7ecf\u641e\u8fc7ACM\u548c\u8d1f\u8d23\u667a\u80fd\u5c0f\u8f66\u7f16\u7a0b\u7684\u90ed\u5c0f\u4fa0\uff0c\u5f04\u8d77\u8fd9\u4e2a\u6765\u8f7b\u677e\u65e0\u6bd4\u3002\u800c\u90a3\u5c0fmm\u7b80\u76f4\u53ef\u4ee5\u7528\u5b8c\u5168\u4e0d\u4f1a\u6765\u5f62\u5bb9\u3002\u67d0\u5929\u4e2d\u5348\uff0c\u7535\u8bdd\uff1a&ldquo;\u641e\u4e0d\u5b9a\u4e86\u627e\u6211\u554a&rdquo;&ldquo;\u4e0d\u7528\uff0c\u5e94\u8be5\u80fd\u641e\u5b9a&rdquo;\u3002\u5403\u665a\u996d\u524d\uff0c\u90ed\u5c0f\u4fa0\u63a5\u5230\u4f3c\u4e4e\u610f\u6599\u4e4b\u4e2d\u7684\u7535\u8bdd\uff0c&ldquo;\u6211\u641e\u4e0d\u5b9a\u4e86\u3002\u3002\u3002&rdquo;\uff0c\u679c\u65ad\u4e8c\u8bdd\u4e0d\u8bf4\uff0c\u5357\u6821\u76f4\u5954\u6c11\u4e3b\u697c\u3002\u4e00\u6765\u4e8c\u53bb\uff0c\u90ed\u5c0f\u4fa0\u6709\u4e86\u5973\u670b\u53cb\u3002</div>\n<div>&nbsp;</div>\n<div>2010~2011\u7684\u4e24\u5e74\u4e4b\u4ea4\uff0c\u53d1\u751f\u4e86\u4e0d\u5c11\u53d8\u5316\u3002</div>\n<div>\u4e2d\u5357ACM\u53d1\u5c55\u8fd9\u51e0\u5e74\uff0c\u4e00\u76f4\u662f\u8001\u4eba\u6307\u5bfc\uff0c\u65b0\u4eba\u8f88\u51fa\u7684\u7a33\u5b9a\u8282\u594f\u3002\u800c10\u5e74\u5e95\u7684&ldquo;\u5de8\u53d8&rdquo;\u51e0\u4e4e\u4e00\u4e0b\u5b50\u628a\u4e2d\u5357\u7684ACM\u6c34\u5e73\u4e22\u56de\u4e86\u521a\u521a\u5f00\u59cb\u7684\u65f6\u5019&mdash;&mdash;\u56e0\u4e3a\u65ad\u5c42\u3002</div>\n<div>\u59da\u603b\u548c\u6728\u5357\u662f\u80af\u5b9a\u9000\u5f79\u4e86\uff0cICPC\u8981\u6c42\u6ee1\u8db3<span id=\"1KSFindDIV\" class=\"KSFIND_CLASS\">&lt;</span>=22\u5c81\u6216<span id=\"2KSFindDIV\" class=\"KSFIND_CLASS\">&lt;</span>=\u7814\u7a76\u751f\u4e00\u5e74\u7ea7\u3002\u7f57\u795e\u771f\u5fc3\u6253\u7b97\u53bb\u627e\u5de5\u4f5c\u4e86\u3002\u5f00\u4ed9\u8eab\u5904\u6570\u5b66\u9662\uff0c\u5fd9\u4e8e\u65b0\u7684\u5b66\u4e60\u751f\u6d3b\uff0c\u4e5f\u4ec5\u4ec5\u5728\u7f51\u4e0a\u7ed9\u65b0\u4eba\u6307\u70b9\u4e00\u4e0b\u6570\u5b66\u95ee\u9898\u3002\u6377\u6709\u70b9\u5e78\u8fd0\u5730\u62ff\u5230\u4e86\u4fdd\u5916\u540d\u989d\uff0c\u6770\u679c\u65ad\u8003\u5916\u6821\u4e86\u3002\u6700\u60f3\u7559\u4e0b\u7ee7\u7eedACM\u7684\u4f1f\u54e5\u60f3\u4fdd\u7814\u5374\u4fdd\u4e0d\u4e86\uff0c\u4e5f\u5de5\u4f5c\u53bb\u4e86\u300206\u7ea7\u8d70\u4e86\uff0c07\u7ea7\u4e5f\u8d70\u4e86\u3002\u800c\u5bf9\u4e2d\u5357ACM\u7ee7\u7eed\u7684\u6253\u51fb\u662f\uff0c\u9633\u4ed4\u7b49\u51e0\u4e2a\u5373\u5c06\u6210\u4e3a\u7edd\u5bf9\u4e3b\u529b\u768408\u7ea7\u4e00\u5e72\u4eba\u7b49\uff0c\u6709\u7684\u5de5\u4f5c\u6709\u7684\u8003\u7814\uff0c\u4e5f\u8fd9\u4e48\u83ab\u540d\u5176\u5999\u7684\u6563\u4e86\uff0c\u5f62\u5bb9\u8fd9\u4e2a\u65f6\u5019&mdash;&mdash;&ldquo;\u4e2d\u5357\u65e0\u4eba&rdquo;\u3002</div>\n<div>&nbsp;</div>\n<div><strong>2011\u5e74</strong></div>\n<div>&nbsp;</div>\n<div>11\u5e74\u521d\uff0c\u8ddd\u79bb\u7f57\u795e\u4ed6\u4eec\u6bd5\u4e1a\u8fd8\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u65e0\u8bba\u600e\u6837\uff0c\u4e2d\u5357ACM\u603b\u8981\u6709\u63a5\u73ed\u4eba\u3002\u7b80\u76f4\u53ef\u4ee5\u8111\u8865\u524d\u8f88\u4eec\u626b\u4e86\u4e00\u904d\u6821\u961f\u7fa4\u6210\u5458\uff0c\u7136\u540e\u76ee\u5149\u5b9a\u683c\u5728\u5934\u50cf\u4eae\u8d77\u7684\u90ed\u5c0f\u4fa0\uff0c\u53f9\u4e86\u53e3\u6c14\u7684\u573a\u666f\u3002\u3002\uff08\u5f53\u7136\u4e0d\u81f3\u4e8e\u4e86\uff0c\u597d\u6b79\u90ed\u5c0f\u4fa0\u572810\u5e74\u5e95\u6e56\u5927\u4e00\u5e74\u4e00\u5ea6\u7684\u65b0\u4eba\u8d5b\u8fd8\u8d62\u4e86100\u5757\u5927\u6d0b\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>\u5373\u5c06\u59d4\u4ee5\u91cd\u4efb\uff0c\u7f57\u795e\u7ec8\u4e8e\u4eb2\u81ea\u548c\u90ed\u5c0f\u4fa0\u9762\u8c08\u4e86\u4e00\u6b21\uff0c\u5e76\u628a\u4e2d\u5357ACM\u7231\u597d\u8005\u534f\u4f1a\u7684\u5370\u7ae0\u4ea4\u7ed9\u4e86\u90ed\u5c0f\u4fa0\u3002\u5f97\u6b64\u5370\u5373\u4e3a\u534f\u4f1a\u4e4b\u4e3b\u5e2d\uff0c\u6b64\u65f6\u4e2d\u5357\u5927\u5b66ACM\u7231\u597d\u8005\u534f\u4f1a \u5305\u62ec\u4e3b\u5e2d\u5728\u5185\u603b\u4eba\u6570\u4e3a&mdash;&mdash;1\u4eba\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e5f\u8bb8\u662f\u524d\u8f88\u628a\u5370\u7ae0\u7ed9\u7f57\u795e\u4e4b\u540e\uff0c\u4e00\u65b9\u9762\u56e0\u4e3a\u5b66\u6821\u6709\u7ade\u8d5b\u8f85\u5bfc\u5458\u7ec4\u7ec7\u6821\u8d5b\u548c\u53d1\u96c6\u8bad\u901a\u77e5\u7b49\u7b49\uff0c\u53e6\u4e00\u65b9\u9762\u7f57\u795e\u5fd9\u4e8e\u5907\u6218\u6bd4\u8d5b\uff0c\u5fd8\u4e86\u534f\u4f1a\u7684\u4e8b\u60c5\uff0c\u4e00\u4e24\u5e74\u8fc7\u6765\uff0c\u534f\u4f1a\u65e0\u4eba\u6253\u7406\uff0c\u5df2\u7ecf\u540d\u5b58\u5b9e\u4ea1\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e8e\u90ed\u5c0f\u4fa0\u800c\u8a00\uff0c\u867d\u7136\u5e76\u6ca1\u6709\u51b3\u5fc3\u628aACM\u7ee7\u7eed\u4e0b\u53bb\uff0c\u4f46\u662f\u65e2\u7136\u62c5\u6b64\u91cd\u4efb\uff0c\u65e0\u8bba\u534f\u4f1a\u662f\u4ec0\u4e48\u72b6\u6001\uff0c\u90fd\u8981\u628a\u534f\u4f1a\u91cd\u65b0\u505a\u8d77\u6765\u3002\u534f\u4f1a\u80fd\u505a\u7684\u8fdc\u4e0d\u6b62\u66fe\u7ecf\u505a\u7684\u90a3\u4e9b\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9014\u5f84\u548c\u7a97\u53e3\uff0c\u4e00\u5b9a\u80fd\u6781\u5927\u5e26\u52a8\u4e2d\u5357ACM\u7684\u53d1\u5c55\u3002</div>\n<div>&nbsp;</div>\n<div>\u9996\u5148\u4e09\u4ef6\u4e8b</div>\n<div>\u7b2c\u4e00\u4ef6\u4e8b\uff0c\u628a\u534f\u4f1a6\u4e2a\u90e8\u95e8\u7cbe\u7b80\u4e3a4\u4e2a\u90e8\u95e8\u3002</div>\n<div>\u7b2c\u4e8c\u4ef6\u4e8b\uff0c\u628a\u6821\u961f&ldquo;\u6b8b\u5b58&rdquo;\u7684\u670b\u53cb\u4eec\u62c9\u4e0a\uff0c&ldquo;\u5f53\u54ea\u4e2a\u90e8\u957f\uff0c\u81ea\u5df1\u9009\u628a&rdquo;\u3002</div>\n<div>\u7b2c\u4e09\u4ef6\u4e8b\uff0c4\u6708\u6821\u8d5b\u4e34\u8fd1\uff0c\u5f00\u5ba3\u8bb2\u4f1a\uff0c\u987a\u4fbf\u62db\u5175\u4e70\u9a6c\u3002</div>\n<div>&nbsp;</div>\n<div>\u6821\u8d5b\u7684\u5ba3\u8bb2\u4f1a\u662f\u5f88\u6709\u610f\u4e49\u7684\uff0c\u8fd9\u4e5f\u7b97\u662f\u53c2\u52a0\u667a\u80fd\u5c0f\u8f66\u6bd4\u8d5b\u5b66\u7684\u4e00\u62db\u5427\u3002\u3002\u81f3\u5c11\u544a\u8bc9\u53c2\u8d5b\u7684\u65b0\u4eba\u4e00\u4e9bACM\u7684\u57fa\u7840\u4e1c\u897f\uff0c\u4f7f\u4e4b\u4e0d\u81f3\u4e8e\u50cf\u90ed\u5c0f\u4fa0\u7b2c\u4e00\u6b21\u53c2\u52a0\u6821\u8d5b\u90a3\u6837\u5373\u4f7f\u9898\u76ee\u4f1a\u505a\uff0c\u600e\u4e48\u4e5f\u505a\u4e0d\u5bf9\u3002\u81f3\u5c11\u8bf4\u660eEOF\u662f\u4ec0\u4e48\uff0c\u8bf4\u660e\u4e0d\u8981\u628a\u7b54\u6848\u5b58\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\u6700\u540e\u518d\u8f93\u51fa\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>ACMer\u5e76\u975e\u90fd\u5584\u4e8e\u7ba1\u7406\uff0c\u90ed\u5c0f\u4fa0\u627e\u6765\u4e86\u5f53\u8fc7\u5b66\u5de5\u529e\u52a9\u7406\u7684\u597d\u54e5\u4eec\u513f\u5f6d\u5c0f\u5c71\u5e2e\u5fd9\uff0c\u901a\u8fc7\u62db\u65b0\u5f97\u5230\u4e86\u5c0f\u5b87\u3001\u5c0f\u6613\u7b49\u5f88\u591a\u5f88\u6709\u884c\u52a8\u529b\u7684\u5c0f\u670b\u53cb\u3002</div>\n<div>&nbsp;</div>\n<div>\u5175\u9a6c\u9f50\u5907\uff0c\u534f\u4f1a\u53ef\u4ee5\u5f00\u59cb\u57fa\u672c\u7684\u8fd0\u8f6c\u4e86\u3002\u4e0d\u8fc7\u90a3\u65f6\u5019\u90ed\u5c0f\u4fa0\u8fd8\u6709\u5f88\u591a\u6ca1\u5f04\u660e\u767d\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u53ea\u6709\u4e00\u4e2a\u5370\u7ae0\uff0c\u600e\u4e48\u5c31\u8bf4\u660e\u662f\u4e3b\u5e2d\u4e86\u5462\uff0c\u53c8\u4e0d\u662f\u53e4\u4ee3\u62ff\u4e2a\u5b98\u5370\u4ec0\u4e48\u7684\uff0c\u597d\u6b79\u5b66\u6821\u6709\u4e2a\u767b\u8bb0\u5427\u3002\u534f\u4f1a\u7684\u7ecf\u8d39\u54ea\u91cc\u6765\uff0c\u53c8\u4e0d\u6536\u8d39\u3002\u534f\u4f1a\u548c\u5b66\u793e\u8054\u795e\u9a6c\u5173\u7cfb\uff0c\u548c\u56e2\u59d4\u6709\u6ca1\u6709\u5173\u7cfb\uff0c\u4e0a\u7ea7\u662f\u8c01\u3002\u3002\u3002\u4e00\u5806\u95ee\u9898\u5b58\u5728\u90ed\u5c0f\u4fa0\u8111\u6d77\u91cc\uff0c\u4e0d\u8fc7\u628aACM\u5de5\u4f5c\u505a\u597d\u8981\u7d27\uff0c\u8fd9\u4e9b\u95ee\u9898\u6162\u6162\u89e3\u51b3\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e0a\u6587\u8bf4\u8fc7OnlineJudge\uff08\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf\uff09\uff0c\u4e2d\u5357\u4e3a\u4ec0\u4e48\u6ca1\u6709\u5462\u3002\u8fd9\u4e2a\u65f6\u5019\u56fd\u5185\u51fa\u73b0\u4e86\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u662f\u534e\u79d1\uff08HUST\uff09\u51e0\u4e2a\u5b66\u751f\u6bd5\u4e1a\u8bbe\u8ba1\u505a\u7684OnlineJudge\u7cfb\u7edf\uff0c\u53e6\u4e00\u4e2a\u5b66\u6821\u7684\u4e00\u4e2a\u8001\u5e08\u53d1\u73b0\u4e86\u8fd9\u4e2a\u7cfb\u7edf\uff0c\u5e76\u7ee7\u7eed\u6539\u8fdb\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u53d1\u5e03\u4e86\u3002\u8fd9\u51e0\u5e74\u5f88\u591a\u5b66\u6821\u5f00\u59cb\u5bf9\u8fd9\u4e2a\u5f00\u6e90\u9879\u76ee\u8fdb\u884c\u4e8c\u6b21\u5f00\u53d1\uff0c\u4f5c\u4e3a\u81ea\u5df1\u5b66\u6821\u7684OJ\u7cfb\u7edf\u3002</div>\n<div>&nbsp;</div>\n<div>\u6377 \u7231\u597d\u6444\u5f71\uff0c\u64c5\u957f\u7f8e\u5de5\uff0c\u6770\u6709\u70b9\u6781\u5ba2\u98ce\u683c\uff0c\u64c5\u957f\u591a\u79cd\u6280\u672f\uff0c\u4e24\u4eba\u4e00\u8d77\u5bf9HUSTOJ\u91cd\u505a\u7f8e\u5de5\uff0c\u529f\u80fd\u4e8c\u6b21\u5f00\u53d1\uff0c\u5e76\u901a\u8fc7\u9648\u8001\u5e08\u5411\u5b66\u6821\u7533\u8bf7\u670d\u52a1\u5668\uff0c\u4e2d\u5357\u6709\u4e86\u81ea\u5df1\u7684OnlineJudge\u7cfb\u7edf\uff08acm.csu.edu.cn/OnlineJudge\uff09\uff0c\u5e76\u4ea4\u7ed9\u4e86\u4e0d\u61c2ssh\u4e0d\u61c2shell\u4e0d\u61c2php\u4e0d\u61c2\u3002\u3002\u7684\u90ed\u5c0f\u4fa0\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011\u73b0\u5728\u7684\u8fd9\u4e2aOJ\u7f51\u5740\u7684OJ\u4e0d\u662f\u5f53\u65f6\u6377\u548c\u6770\u505a\u7684\u4e86\uff0c\u76f4\u63a5\u4f7f\u7528\u4e86\u6700\u65b0\u7684HUSTOJ\u539f\u7248\uff0c\u56e0\u4e3a\u6709\u529f\u80fd\u66f4\u65b0\uff0c\u800c\u8001\u7684\u7f8e\u5de5\u6a21\u677f\u5728\u65b0\u7248\u672cHUSTOJ\u4e0b\u65e0\u6cd5\u4f7f\u7528\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u6df1\u77e5\u4e2d\u5357ACM\u6700\u7f3a\u7684\u4e0d\u662f\u5927\u725b\u6307\u5bfc\u5e26\u9886\uff0c\u800c\u662f\u6c1b\u56f4\u3001\u51dd\u805a\u529b\u3002\u5982\u679c08\u7ea7\u7cbe\u9510\u4ecd\u5728\uff0c\u6ca1\u670907\u7ea7\u7684\u5e87\u62a4\u4e5f\u4e0d\u7528\u6015\u3002\u5982\u679c\u66f4\u591a\u7684\u4eba\u53c2\u4e0eACM\uff0c\u5c31\u4f1a\u6709\u66f4\u597d\u7684\u7ade\u4e89\u6c1b\u56f4\uff0c\u6709\u7ade\u4e89\uff0c\u5c31\u6709\u66f4\u5927\u7684\u8fdb\u6b65\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e0a\u5927\u5b66\u4e4b\u540e\u751f\u6d3b\u5c31\u9893\u5e9f\u5f88\u591a\u7684\u90ed\u5c0f\u4fa0\u6df1\u6df1\u5730\u89c9\u5f97\uff0c\u8981\u4e0d\u662f\u53c2\u52a0ACM\uff0c\u81ea\u5df1\u73b0\u5728\u4f3c\u4e4e\u4ec0\u4e48\u90fd\u4e0d\u4f1a\uff0cACM\u80fd\u5e2e\u4eba\u627e\u5230\u65b9\u5411\uff0c\u6700\u4e0d\u6d4e\uff0c\u80fd\u8ba9\u4eba\u66f4\u5feb\u66f4\u597d\u7684\u5b66\u4f1a\u7f16\u7a0b\u3002\u5927\u5230\u641e\u597d\u6210\u7ee9\u628a\u4e2d\u5357\u540d\u6c14\u6253\u51fa\u53bb\uff0c\u5c0f\u5230\u8ba9\u6bcf\u4e2a\u4eba\u62e5\u6709\u591a\u4e00\u4efd\u5f88\u597d\u7684\u6280\u80fd\uff0c\u53d1\u5c55ACM\u7ade\u8d5b\uff0c\u4e00\u5b9a\u662f\u6781\u597d\u7684\u3002</div>\n<div>&nbsp;</div>\n<div>\u6821\u8d5b\u7684\u7b2c\u4e00\u8c01\u90fd\u6ca1\u6709\u60f3\u5230\uff0c\u662f\u4e00\u4e2a\u6765\u81ea\u6e58\u96c5\u751f\u7269\u79d1\u5b66\u7684\u59d3\u7f57\u7684\u5bb6\u4f19\u5e26\u9886\u7684\u961f\u4f0d\u3002\u6b64\u7f57 \u5e76\u975e \u7f57\u795e\uff0c\u662f09\u7ea7\u7684\u5b66\u751f\uff0c\u8fd9\u8ba9\u90ed\u5c0f\u4fa0\u5f88\u597d\u5947\u3002</div>\n<div>&nbsp;</div>\n<div>\u6821\u8d5b\u4e4b\u540e\uff0c\u5c31\u662f\u4f20\u7edf\u7684\u6691\u671f\u96c6\u8bad\u62a5\u540d\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u7fa4\u91cc\u7a81\u7136\u5192\u51fa\u4e00\u4e2a10\u7ea7\u5c0f\u5b69\u5b50\uff0c\u6ca1\u53c2\u52a0\u6821\u8d5b\uff0c\u60f3\u8981\u53c2\u52a0\u96c6\u8bad\u3002\u83ab\u4e0d\u662f\u53c8\u662f\u73ed\u957f\u5751\u7239\uff0c\u6ca1\u7ed9\u53d1\u6821\u8d5b\u901a\u77e5\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011\u771f\u4e0d\u662f\u4ec7\u89c6\u73ed\u957f\uff0c\u76f8\u4fe1\u5f88\u591a\u73ed\u957f\u8fd8\u662f\u8ba4\u771f\u8d1f\u8d23\u7684\u3002\u4f46\u6709\u591a\u5c11\u6b21\uff0cACM\u534f\u4f1a\u82b1\u4e0d\u5c11\u94b1\u6253\u5370\u4e86\u8db3\u591f\u591a\u7684\u901a\u77e5\u4ea4\u7ed9\u8f85\u5bfc\u5458\uff0c\u7531\u73ed\u957f\u53d1\u7ed9\u6bcf\u4e2a\u5bbf\u820d\u4e00\u4efd\uff0c\u7edd\u5bf9\u662f\u8986\u76d6\u5168\u90e8\u4fe1\u606f\u9662\u548c\u8f6f\u4ef6\u9662\u7684\uff0c\u5c31\u662f\u5e0c\u671b\u6bd4\u98de\u4fe1\u7684\u901a\u77e5\u66f4\u90d1\u91cd\uff0c\u8bf4\u660e\u66f4\u5177\u4f53\uff0c\u4f46\u603b\u6709\u73ed\u957f\u62ff\u4e86\u901a\u77e5\u4e4b\u540e\u771f\u5c31\u5f53\u5e7f\u544a\u4f20\u5355\u4e86\uff0c\u6839\u672c\u6ca1\u6709\u53d1\u7ed9\u540c\u5b66\u4eec\uff0c\u8fd9\u4e9b\u73ed\u957f\u4e0d\u77e5\u9053\uff0c\u4e00\u4e2a\u751f\u6d3b\u6ca1\u6709\u76ee\u6807\u7684\u540c\u5b66\uff0c\u78b0\u5de7\u770b\u5230\u8fd9\u4e2a\u901a\u77e5\uff0c\u53ef\u80fd\u4f1a\u6539\u53d8\u4ed6\u7684\u4e00\u751f\u3002 \u8fd8\u8bb0\u5f97\u5f53\u5e74\u98d8\u8fdb\u90ed\u5c0f\u4fa0\u5bbf\u820d\u7684\u6821\u8d5b\u901a\u77e5\u4e48\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e2a10\u7ea7\u7684\u5b69\u5b50\u5c31\u662f\u5c0f\u658c\u658c\u3002</div>\n<div>&nbsp;</div>\n<div>\u8bb8\u591a\u9ad8\u6821\u90fd\u6709\u81ea\u5df1\u7684ACM\u6708\u8d5b\uff0c\u5bf9\u6821\u5185\u5916ACM\u4ea4\u6d41\u548c\u6d3b\u8dc3\u6821\u5185ACM\u6c1b\u56f4\u90fd\u5f88\u6709\u597d\u5904\uff0c\u521a\u597d\u4e2d\u5357\u4e5f\u6709\u4e86OJ\uff0c\u90ed\u5c0f\u4fa0\u4e5f\u8ba1\u5212\u7740\u628a\u6708\u8d5b\u529e\u8d77\u6765\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u658c\u658c\u80fd\u4e0d\u80fd\u53c2\u52a0\u96c6\u8bad\uff0c\u521a\u597d\u53ef\u4ee5\u7528\u4e94\u6708\u6708\u8d5b\u770b\u770b\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u658c\u658c\u95ee\u90ed\u5c0f\u4fa0\uff0c\u6709\u6ca1\u6709\u4ec0\u4e48\u5165\u95e8\u8d44\u6599\u3002\u8fd9\u4e00\u523b\u90ed\u5c0f\u4fa0\u4eff\u4f5b\u770b\u5230\u4e86\u4e00\u5e74\u524d\u7684\u81ea\u5df1\uff0c\u4e5f\u662f\u8fd9\u4e48\u95ee\u8fc7\u4f1f\u54e5\uff0c\u4f46\u662f\u5f53\u65f6\u4ec0\u4e48\u90fd\u6ca1\u6709\u3002\u8fd9\u6bb5\u65f6\u95f4\u90ed\u5c0f\u4fa0\u521a\u597d\u610f\u5916\u53d1\u73b0\u4e86 \u5218\u6c5d\u4f73 \u5927\u795e 2009\u5e74\u65b0\u51fa\u7248\u7684\u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\uff0c\u56e0\u4e3a\u5c01\u9762\u662f\u767d\u8272\u7684\uff0c\u5c31\u88ab\u79f0\u4e3a&ldquo;\u767d\u4e66&rdquo;\u4e86\u3002\u679c\u7136\u591a\u5e74\u4e4b\u540e\u66f4\u4e86\u89e3ACM\u7684\u8bb2\u8ff0\u65b9\u6cd5\uff0c\u4e0d\u518d\u5982\u9ed1\u4e66\u6666\u6da9\u96be\u61c2\uff0c\u5faa\u5e8f\u6e10\u8fdb\uff0c\u5b8c\u5168\u662f\u65b0\u4eba\u7684\u798f\u97f3\u3002\u90ed\u5c0f\u4fa0\u679c\u65ad\u628a\u8fd9\u4e2a\u8d44\u6599\u4ecb\u7ecd\u7ed9\u4e86\u5c0f\u658c\u658c\uff0c\u5e76\u5f3a\u8c03\u4e86\u4e00\u4e9b\u66fe\u7ecf\u5751\u4e86\u90ed\u5c0f\u4fa0\u51e0\u4e2a\u6708\u7684\u70c2\u8d44\u6599\uff0c\u4e00\u5b9a\u4e0d\u80fd\u770b\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u658c\u658c\u5f88\u597d\u5b66\uff0c\u65f6\u5e38\u5728\u7fa4\u91cc\u95ee\u95ee\u9898\uff0c\u4ece\u95ee\u9898\u4e5f\u53ef\u4ee5\u770b\u51fa\u4ed6\u505a\u767d\u4e66\u7684\u8fdb\u5c55\u3002\u4e00\u5f00\u59cb\u4e5f\u662f\u65b0\u4eba\u4eec\u5e38\u95ee\u7684&ldquo;\u600e\u4e48\u5904\u7406\u9898\u76ee\u4e2d\u6240\u8c13\u7684\u6587\u4ef6\u7ed3\u5c3e\u554a&rdquo;\uff08\u53c8\u662fEOF\uff0c\u5176\u5b9e\u5c31\u662fEnd Of File\uff09\uff0c&ldquo;scanf(\"%c\"...)\u600e\u4e48\u624d\u80fd\u4e0d\u8bfb\u56de\u8f66\u554a&ldquo;\u7b49\u7b49\u3002\u4f46\u662f\u968f\u7740\u505a\u9898\u8d8a\u6765\u8d8a\u6df1\u5165\uff0c\u95ee\u7684\u95ee\u9898\u6162\u6162\u7684\u8ba9\u90ed\u5c0f\u4fa0\u4e5f\u89c9\u5f97\u53ef\u4ee5\u9002\u5f53\u8ba8\u8bba\u4e00\u4e0b\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u90a3\u65f6\u5019\u4ece\u5b66\u6821\u501f\u7684\u670d\u52a1\u5668\uff08\u53ea\u80fd\u8fdc\u7a0b\u767b\u5f55\uff0c\u4e0d\u80fd\u8fdb\u5165\u673a\u623f\uff09\uff0c\u65f6\u4e0d\u65f6\u7684\u5c31\u6302\u6389\uff0c\u6302\u6389\u4e86\u8fd8\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u8981\u591a\u65b9\u9762\u8054\u7cfb\u5230\u7ba1\u7406\u5458\uff0c\u8d39\u597d\u51e0\u5929\u624d\u80fd\u6062\u590d\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e8e\u662f\uff0c5\u6708\u6708\u8d5b\u8fdb\u884c\u5230\u4e00\u534a\uff0c\u670d\u52a1\u5668\u5c31\u8fd9\u4e48\u5de7\u7684\u6302\u6389\u4e86\u3002\u4e0d\u8fc7\u90ed\u5c0f\u4fa0\u53d1\u73b0\u90a3\u65f6\u5019\u5bbf\u820d\u7684\u7535\u4fe1\u7f51\u7adf\u7136\u6709\u72ec\u7acbIP\uff0c\u679c\u65ad\u5728\u81ea\u5df1\u7b14\u8bb0\u672c\u4e0a\u67b6\u4e0aOJ\uff0c\u52c9\u5f3a\u628a\u4e94\u6708\u6708\u8d5b\u8fdb\u884c\u5230\u5e95\u3002\u867d\u7136\u4e94\u6708\u6708\u8d5b\u662f\u7eaf\u7cb9\u7684\u65b0\u4eba\u53c2\u52a0\uff0c\u4e0d\u8fc7\u5c0f\u658c\u658c\u5df2\u7136\u5728\u65b0\u4eba\u4e2d\u540d\u5217\u524d\u8305\uff08\u7b2c\u4e00\u6216\u7b2c\u4e8c\uff1f\uff09\u3002\u78b0\u5de7\u9648\u8001\u5e08\u8ba9\u90ed\u5c0f\u4fa0\u7b80\u5355\u8bf4\u4e00\u4e0b\u4e86\u89e3\u7684\u6bd4\u8f83\u6709\u524d\u666f\u7684\u65b0\u4eba\uff08\u90a3\u65f6\u5019\u96c6\u8bad\u7684\u4eba\u6570\u4e00\u822c\u662f &nbsp;\u51c6\u4e3b\u529b\u5e74\u7ea7\uff0809\uff09&gt;\u4e3b\u529b\u5e74\u7ea7\uff0808\uff09&gt;\u5b8c\u5168\u592a\u5e74\u8f7b\u5e74\u7ea7(10) ),\u6240\u4ee510\u7ea7\u7684\u96c6\u8bad\u961f\u5458\u9009\u62e9\u9700\u8981\u6709\u6240\u8003\u8651\u3002\u6ca1\u53c2\u52a0\u6821\u8d5b\u7684\u5c0f\u658c\u658c\u81ea\u7136\u7834\u683c\u8fdb\u5165\u4e86\u96c6\u8bad\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u5e74\u96c6\u8bad\u90ed\u5c0f\u4fa0\u7279\u522b\u5efa\u8bae\u641e\u4e86\u4e00\u573a&ldquo;\u6478\u5e95&rdquo;\u8d5b\uff0c\u5148\u770b\u770b\u961f\u5458\u6c34\u5e73\u3002\u6478\u5e95\u8d5b\u51fa\u4e86\u5927\u91cf\u9898\u76ee\uff0c\u6709\u70b9\u9a6c\u62c9\u677e\u7684\u5473\u9053\uff0c\u4e0d\u8fc7\u9664\u4e86\u6700\u540e\u4e24\u4e09\u9898\uff0c\u57fa\u672c\u4e0a\u6ca1\u6709\u4ec0\u4e48\u7b97\u6cd5\uff0c\u662f\u7edd\u5bf9\u7684\u65b0\u4eba\u9898\u3002</div>\n<div>&nbsp;</div>\n<div>\u53c8\u4e00\u4e2a\u6ca1\u6709\u89c1\u8fc7\u7684\u65b0\u4eba\u9065\u9065\u9886\u5148\u62ff\u5230\u4e86\u7b2c\u4e00\uff0c09\u7ea7\u7684\u5c0f\u5c0f\u82cf\uff0c\u6821\u8d5b\u90a3\u4e2a\u59d3\u7f57\u7684\u51a0\u519b\u5927\u7ea6\u662f\u7b2c\u4e8c\u5427\uff0c\u5c0f\u658c\u658c\u662f\u4e0d\u662f\u7b2c\u4e09\u5c31\u4e0d\u8bb0\u5f97\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad\u4e2d\u90ed\u5c0f\u4fa0\u8ba4\u8bc6\u4e8609\u7ea7\u59d3\u7f57\u7684\u90a3\u4e2a\u6821\u8d5b\u51a0\u519b\uff0c\u4e2a\u5b50\u4e0d\u9ad8\uff0c\u8bf4\u662f\u5c0f\u6b63\u592a\u5427\u6709\u6709\u4e0d\u5c11\u80e1\u5b50\uff0c\u4e00\u95ee\u5e74\u9f84\u5413\u4e00\u8df3&mdash;&mdash;26\u5c81\u3002\u5f00\u59cb\u90ed\u5c0f\u4fa0\u4e0d\u76f8\u4fe1\uff0c\u4e0d\u8fc7\u540e\u6765\u8bc1\u5b9e\u786e\u5b9e\u5982\u6b64\u3002\u59d3\u7f57\u7684\u4e3a\u4eba\u633a\u597d\uff0c\u8bf4\u8bdd\u662f\u6c89\u7a33\u4e2d\u5e26\u7740\u6ed1\u7a3d\uff0c\u8fd8\u6709\u90a3\u4e48\u4e9b\u9738\u6c14\uff0c\u8ba9\u4eba\u4fe1\u4efb\u53c8\u5fcd\u4fca\u4e0d\u7981\uff0c\u56e0\u4e3a\u79cd\u79cd\u539f\u56e0\u5c81\u6570\u4e0d\u5c0f\u4e86\u53c8\u53c2\u52a0\u4e86\u9ad8\u8003\uff0c\u4e0d\u8fc7\u7edd\u5bf9\u662f\u6b63\u5f0f\u5f55\u53d6\u7684\u6b63\u89c4\u672c\u79d1\u751f\uff0c\u5927\u5b66\u4e4b\u524d\u5c31\u5df2\u505a\u591a\u5e74\u5199\u7a0b\u5e8f\u7684\u5de5\u4f5c\uff0c\u5de5\u7a0b\u7ecf\u9a8c\u4e30\u5bcc\uff0c\u6821\u8d5b\u5f88\u591a\u9898\u90fd\u6ca1\u7528\u5957\u8def\u51fa\u724c\uff0c\u800c\u662f\u5f88\u5947\u8469\u7684\u66b4\u529b\u89e3\u6cd5\u7adf\u7136\u901a\u8fc7\u4e86\u9898\u76ee\u3002\u56e0\u4e3a\u5e74\u9f84\uff0c\u6162\u6162\u7684\u5927\u5bb6\u90fd\u4eb2\u5207\u5730\u79f0\u4e4b\u4e3a&ldquo;\u7f57\u5927\u53d4&rdquo;\u3002</div>\n<div>&nbsp;</div>\n<div>09\u7ea7\u7684\u5c0f\u5c0f\u82cf\u6821\u8d5b\u65f6\u5019\u7528\u7684java\uff0c\u8c8c\u4f3cc\u8bed\u8a00\u505aACM\u662f\u4e34\u65f6\u5b66\u7684\uff0c\u6ca1\u4ec0\u4e48\u7b97\u6cd5\u7ecf\u9a8c\uff0c\u6478\u5e95\u8d5b\u7adf\u7136\u90a3\u4e48\u5389\u5bb3\uff0c\u8fd8\u662f\u5f88\u6709\u5929\u5206\u7684\u3002</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad\u65f6\u5019\u7684\u7ec4\u961f\u8d5b\u5c0f\u5c0f\u82cf\u7ec4\u4e86\u540c\u662f09\u7ea7\u7684\u5efa\u519b\uff0c\u5efa\u519b\u8eab\u6750\u7b14\u633a\u6837\u8c8c\u7aef\u6b63\uff0c\u8fd8\u771f\u6709\u70b9\u519b\u4eba\u98ce\u8303\u3002\u601d\u7ef4\u4e0d\u9519\uff0c\u505aACM\u7684\u98ce\u683c\u548c\u5c0f\u5c0f\u82cf\u4e5f\u6709\u51e0\u5206\u76f8\u4f3c\u3002</div>\n<div>&nbsp;</div>\n<div>10\u7ea7\u7684\u5c0f\u658c\u658c\u4e00\u76f4\u975e\u5e38\u6d3b\u8dc3\uff0c\u5728\u96c6\u8bad<span id=\"5KSFindDIV\" class=\"KSFIND_CLASS\">Q</span><span id=\"6KSFindDIV\" class=\"KSFIND_CLASS\">Q</span>\u7fa4\u91cc\u8bdd\u5f88\u591a\uff0c\u6709\u65f6\u5019\u90ed\u5c0f\u4fa0\u90fd\u53d7\u4e0d\u4e86\u4e86\u76f4\u63a5\u8ba9\u4ed6\u95ed\u5634\u3002</div>\n<div>&nbsp;</div>\n<div>\u51cc\u5c0f\u827a\u786e\u5b9a\u662f\u627e\u5de5\u4f5c\u5b9e\u4e60\u53bb\u4e86\uff0c\u97e9\u5c0f\u5e05\u4e5f\u6253\u7b97\u627e\u5de5\u4f5c\uff0c\u4e0d\u8fc7\u5b9e\u4e60\u65f6\u95f4\u548c\u96c6\u8bad\u5e76\u4e0d\u51b2\u7a81\uff0c\u4e5f\u53c2\u52a0\u4e86\u96c6\u8bad\u3002</div>\n<div>\u6309\u5f80\u5e74\u60c5\u51b5\uff0c\u4e3b\u529b\u961f\u5458\u5728\u96c6\u8bad\u5c31\u662f\u7ec4\u961f\u8bad\u7ec3\u4e86\uff0c\u53ef\u662f\u90ed\u5c0f\u4fa0\u770b\u6765\u770b\u53bb\uff0c\u60c5\u51b5\u5e76\u4e0d\u4e50\u89c2\u3002</div>\n<div>&nbsp;</div>\n<div>\u4eba\u65e0\u8fdc\u8651\uff0c\u5fc5\u6709\u8fd1\u5fe7\uff0c\u5927\u5b66\u4e00\u76f4\u5b89\u9038\u7684\u90ed\u5c0f\u4fa0\u6ca1\u6709\u4e86\u89e3\u8fc7\u4fdd\u7814\u662f\u600e\u4e48\u4e00\u56de\u4e8b\uff0c\u8fd9\u4e2a\u6691\u5047\u8fc7\u5b8c\u5c31\u662f\u5927\u56db\u4e86\uff0c\u800c86+\u7684\u52a0\u6743\u5e73\u5747\u6210\u7ee9\u5728\u81ea\u52a8\u5316\u7684\u5b66\u9738\u5929\u5730\u91cc\u5b8c\u5168\u662f\u88ab\u8650\u6210\u6e23\u7684\u8282\u594f\u3002\u8003\u7814\u662f\u4e0d\u6015\uff0c\u5c31\u662f\u592a\u7d2f\u3002\u5e26\u7740\u534f\u4f1a\u5fd9\u4e86\u8fd9\u4e48\u4e45\uff0c\u90ed\u5c0f\u4fa0\u53c8\u60f3\u8d77\u4e86\u770b\u5230\u7f57\u795e\u798f\u5dde\u5931\u5229\u90a3\u65f6\uff0c\u51b3\u5fc3\u7ee7\u7eed\u524d\u8f88\u4eec\u8981\u628a\u4e2d\u5357\u5e26\u8fdb\u4e16\u754c\u603b\u51b3\u8d5b\u7684\u68a6\u60f3\u3002\u5982\u679c\u8fd9\u5e74ACM\u80fd\u4fdd\u7814\uff0c\u518d\u771f\u6b63\u8ba4\u8ba4\u771f\u771f\u594b\u6597\u4e00\u5e74\uff0c\u8fd9\u4e2a\u68a6\u60f3\u5e94\u8be5\u662f\u5f88\u6709\u5e0c\u671b\u5b9e\u73b0\u7684\u3002</div>\n<div>&nbsp;</div>\n<div>\u53ef\u662f\u770b\u8fd9\u5e74\u7684\u56e2\u961f\uff0c\u4fdd\u7814\u8c08\u4f55\u5bb9\u6613\u3002\u56e0\u4e3a\u4e00\u5e74\u524d\u7684\u8f89\u714c\u6218\u7ee9\uff0c11\u5e74\u7684\u96c6\u8bad\u5438\u5f15\u4e86\u66f4\u591a\u7684\u4eba\uff0c\u52a0\u4e0a\u534f\u4f1a\u7684\u591a\u65b9\u52aa\u529b\u548c\u8bb8\u591a\u6539\u9769\uff0c\u8fd9\u4e00\u5e74\u7684\u65b0\u4eba\u6bd4\u8fc7\u53bb\u7280\u5229\u7684\u591a\uff0c\u4f46\u65b0\u4eba\u6bd5\u7adf\u662f\u65b0\u4eba\uff0c\u8fd9\u4e00\u5e74\u7684\u8001\u961f\u5458\u7b80\u76f4\u662f\u51e0\u5e74\u6765\u6700\u5f31\u3002</div>\n<div>&nbsp;</div>\n<div>\u52c9\u5f3a\u8fd8\u80fd\u6491\u4e00\u4e0b\u95e8\u9762\u7684\uff0c\u662f\u8fd8\u6ca1\u6709\u79bb\u5f00\u7684\u5927\u8c61\u3001\u5c0f\u66f9\u548c\u5c0f\u90b1\u8fd9\u4e2a\u94c1\u4e09\u89d2\uff0c\u5927\u8c61\u53ea\u62ff\u8fc7\u533a\u57df\u8d5b\u94f6\u5956\uff0c\u5fc3\u6709\u4e0d\u7518\uff0c\u5c0f\u66f9N<span id=\"16KSFindDIV\" class=\"KSFIND_CLASS\">OI</span>P\u5931\u5229\u53ea\u6709\u4e8c\u7b49\u5956\uff0c\u53c8\u6253\u7b97\u672c\u79d1\u7ed3\u675f\u7559\u5b66\uff0c\u641eACM\u5f97\u5956\u591a\u70b9\u7b79\u7801\uff0c\u5c0f\u90b1\u5219\u5e0c\u671b\u62ff\u5956\u4fdd\u7814\u3002</div>\n<div>&nbsp;</div>\n<div>\u9664\u4e86\u94c1\u4e09\u89d2\uff0c\u770b\u770b\u5176\u4ed6\u961f\u5458\uff0c\u7f57\u5927\u53d4\u505a\u9879\u76ee\u591a\u505a\u7b97\u6cd5\u5c11\uff0c\u6bd4\u8d5b\u53d1\u6325\u5f88\u4e0d\u7a33\u5b9a\uff0c\u97e9\u5c0f\u5e05\u8981\u627e\u5de5\u4f5c\u8981\u5b9e\u4e60\uff0c\u4e0b\u534a\u5e74\u5f88\u96be\u9759\u5fc3\u8bad\u7ec3\u53c2\u8d5b\uff0c\u65b0\u4eba\u4eec\u518d\u725b\u4e5f\u662f\u5c0f\u83dc\u9e1f\uff0c\u90ed\u5c0f\u4fa0\u7684\u4fdd\u7814\u4e4b\u8def\u582a\u5fe7\u554a\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e00\u5e74\u6821\u961f\u5728\u672c\u90e8\u7684\u5c45\u591a\uff0c\u5927\u5bb6\u53ef\u4e0d\u60f3\u518d\u5f80\u94c1\u9053\u8dd1\uff0c\u800c\u94c1\u9053\u7684\u673a\u623f\u4e5f\u4e0d\u4e00\u5b9a\u8fd8\u80fd\u501f\u3002\u773c\u770b\u533a\u57df\u8d5b\u7684\u7f51\u7edc\u8d5b\u5373\u5c06\u62c9\u5f00\u5e37\u5e55\uff0c\u6821\u961f\u627e\u4e0d\u5230\u5730\u65b9\u96c6\u4e2d\u8bad\u7ec3\uff0c\u66f4\u91cd\u8981\u7684\u662f\u627e\u4e0d\u5230\u5730\u65b9\u505a\u7f51\u7edc\u8d5b\u3002\u96be\u9053\u8981\u90fd\u5446\u5728\u5bdd\u5ba4\u91cc\u505a\uff0c\u7528<span id=\"7KSFindDIV\" class=\"KSFIND_CLASS\">Q</span><span id=\"8KSFindDIV\" class=\"KSFIND_CLASS\">Q</span>\u8ba8\u8bba\uff1f</div>\n<div>&nbsp;</div>\n<div>\u8fd8\u597d\u7f51\u8d5b\u662f\u5468\u672b\uff0c\u9648\u8001\u5e08\u51b3\u5b9a\u5927\u5bb6\u5e26\u4e0a\u81ea\u5df1\u7684\u7b14\u8bb0\u672c\uff0c\u5230\u9648\u8001\u5e08\u7684\u5b9e\u9a8c\u5ba4\u6765\u505a\u7f51\u8d5b\u3002\u5b9e\u9a8c\u5ba4\u4e0d\u5927\uff0c\u6821\u961f\u4e00\u6765\u663e\u5f97\u683c\u5916\u62e5\u6324\u3002\u4e0d\u8fc7\u8fd9\u90fd\u4e0d\u91cd\u8981\uff0c\u6709\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u6709\u7f51\u7ebf\u6709\u7535\u6e90\uff0c\u6709\u6821\u961f\uff0c\u68a6\u60f3\u4fbf\u53ef\u4ee5\u7ee7\u7eed\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011\u7b97\u6cd5&mdash;&mdash;\u4e0d\u662f\u76f8\u5173\u4e13\u4e1a\u7684\u540c\u5b66\u53ef\u80fd\u770b\u8fd9\u4e2a\u8bcd\u4f1a\u6bd4\u8f83\u90c1\u95f7\u3002\u5728\u7f16\u7a0b\u65b9\u9762\u6765\u8bf4\uff0c\u4e0d\u80fd\u76f4\u63a5\u7406\u89e3\u4e3a&ldquo;\u8ba1\u7b97\u7684\u65b9\u6cd5&rdquo;\uff0c\u4e0d\u8fc7\u5012\u662f\u53ef\u4ee5\u7406\u89e3\u4e3a&ldquo;\u8ba9\u8ba1\u7b97\u673a\u5904\u7406\u95ee\u9898\u7684\u65b9\u6cd5&rdquo;\u3002</div>\n<div>\u6bd4\u59821000\u5185\u731c\u4e00\u4e2a\u6570\uff0c\u6211\u53ea\u63d0\u793a&ldquo;\u9ad8\u4e86&rdquo;\u8fd8\u662f&ldquo;\u4f4e\u4e86&rdquo;\uff0c\u5982\u679c\u4ece1\u731c\u52301000\uff0c\u90a3\u4e48\u5982\u679c\u8fd0\u6c14\u4e0d\u597d\u7684\u8bdd\uff0c\u6570\u5b57\u521a\u597d\u662f1000\uff0c\u5c31\u8981\u731c1000\u6b21\uff0c\u800c\u5982\u679c\u5148\u731c500\uff0c\u5982\u679c\u63d0\u793a\u4f4e\u4e86\u5c31\u731c750\uff0c\u53c8\u63d0\u793a\u9ad8\u4e86\u5c31\u731c625\uff0c\u8fd9\u6837\u81f3\u591a\u731clog2(1000)\u5927\u7ea6\u4e0d\u523010\u6b21\uff0c\u5c31\u731c\u4e2d\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b56\u7565\uff0c\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u79cd\u7b97\u6cd5\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u6df1\u77e5\u65b0\u4eba\u624d\u662f\u5e0c\u671b\uff0c\u6bd4\u8d5b\u7ecf\u9a8c\u5f88\u91cd\u8981\uff0c\u4e00\u5b9a\u8981\u8ba9\u6709\u6bc5\u529b\u6709\u51b3\u5fc3\u7684\u65b0\u4eba\u591a\u53c2\u8d5b\uff0c\u4e0d\u8981\u6709\u6709\u5fc3\u594b\u6597\u7684\u961f\u5458\u50cf\u81ea\u5df1\u53bb\u5e74\u90a3\u6837\u53ea\u80fd\u505a\u89c2\u4f17\u3002</div>\n<div>&nbsp;</div>\n<div>\u7701\u8d5b\u4e34\u8fd1\uff0c\u90ed\u5c0f\u4fa0\u4e5f\u5f00\u59cb\u548c\u65b0\u961f\u5458\u8fdb\u884c\u4ea4\u6d41\uff0c\u4e00\u65b9\u9762\u4e86\u89e3\u8fdb\u5c55\uff0c\u4e00\u65b9\u9762\u4e5f\u8ba9\u65b0\u4eba\u4e86\u89e3\u4e2d\u5357ACM\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u5173\u4e8e\u603b\u51b3\u8d5b\uff0c\u5173\u4e8e\u68a6\u60f3\u3002</div>\n<div>&nbsp;</div>\n<div>\u90a3\u5929\u665a\u4e0a\uff0c\u90ed\u5c0f\u4fa0\u770b\u5230\u4e86\u5c0f\u658c\u658c\u7684\u535a\u5ba2&mdash;&mdash;Staginner\uff0c\u89e3\u91ca\u4e3a&ldquo;Stay as a Beginner&rdquo;&mdash;&mdash;\u526f\u6807\u9898\u8d6b\u7136\u5199\u7740&ldquo;\u6211\u8981\u628a\u4e2d\u5357\u5e26\u8fdb\u4e16\u754c\u603b\u51b3\u8d5b\uff01&rdquo;</div>\n<div>&nbsp;</div>\n<div>11\u5e74\u7684\u7701\u8d5b\u6bd4\u4ee5\u5f80\u65f6\u5019\u6765\u5f97\u66f4\u65e9\u4e00\u4e9b\uff0c9\u6708\u4e2d\u65ec\uff0c\u90ed\u5c0f\u4fa0\u6700\u7ec8\u8fd8\u662f\u5e26\u4e0a\u4e86\u5145\u6ee1\u7075\u6c14\u7684\u83dc\u9e1f\u5c0f\u658c\u658c\u3002</div>\n<div>&nbsp;</div>\n<div>&ldquo;\u5224\u8d1f\u5708&rdquo;&ldquo;SPFA\u554a&rdquo;&ldquo;\u4e0d\u9519\uff0c\u57fa\u7840\u77e5\u8bc6\u53ef\u4ee5&rdquo;</div>\n<div>&nbsp;</div>\n<div>&ldquo;\u5355\u6e90\u975e\u8d1f\u8fb9\u6700\u77ed\u8def&rdquo;&ldquo;SPFA\u554a&rdquo;&ldquo;\u8fd8\u884c\uff0c\u77e5\u9053\u4e0d\u6b62Dijkstra\u53ef\u4ee5\u505a&rdquo;</div>\n<div>&nbsp;</div>\n<div>&ldquo;\u68cb\u76d8\u6700\u77ed\u8def\u4e2a\u6570&rdquo;&ldquo;SPFA\u554a&rdquo;&ldquo;\u4f60\u600e\u4e48\u4ec0\u4e48\u90fdSPFA&rdquo;&ldquo;\u6211\u53ea\u5b66\u8fc7SPFA\u554a&rdquo;</div>\n<div>&nbsp;</div>\n<div>\u6211\u52d2\u4e2a\u53bb&hellip;&hellip;</div>\n<div>\u5f53\u5e74\u8d75\u6559\u773c\u4e2d\u7684\u7f57\u795e\u662f\u4e0d\u662f\u4e5f\u8fd9\u4e48\u53ef\u7231\u3002</div>\n<div>&nbsp;</div>\n<div>\u7701\u8d5b\u4e00\u4e2a\u56fe\u8bba\u9898\u9898\u76ee\u63cf\u8ff0\u6570\u636e\u8303\u56f4\u7ed9\u9519\uff0c\u5bfc\u81f4\u6570\u7ec4\u5f00\u5c0f\uff0c\u7ed3\u679c\u4e0d\u7ed9RuntimeError\u800c\u7ed9Time Limit Exceed\uff0c\u4e00\u9053\u52a8\u6001\u89c4\u5212\u660e\u660e\u4f1a\u505a\u5374\u8c03\u4ee3\u7801\u8c03\u5230\u6700\u540e\u6ca1\u51fa\u7ed3\u679c\uff0c\u65e0\u5948\u90ed\u5c0f\u4fa0\u4e8c\u7b49\u5956\u3002</div>\n<div>&nbsp;</div>\n<div>\u6309\u5b66\u6821\u4fdd\u7814\u653f\u7b56\u6539\u9769\uff0c11\u5e74\u662f\u6700\u540e\u4e00\u6b21\u7701\u4e00\u76f4\u63a5\u4fdd\u7814\u3002</div>\n<div>&nbsp;</div>\n<div>\u94c1\u4e09\u89d2\u4f5c\u4e3a\u6491\u95e8\u9762\u7684\u4e00\u961f\uff0c\u597d\u6b79\u62ff\u4e86\u4e2a\u7701\u4e00\uff0c\u5c0f\u90b1\u987a\u5229\u62ff\u5230\u4fdd\u7814\u8d44\u683c\u3002</div>\n<div>&nbsp;</div>\n<div>\u56e2\u4f53\u6210\u7ee9\u56de\u5230\u4e86\u5343\u5e74\u8001\u4e09\u7684\u4f4d\u7f6e\u3002</div>\n<div>&nbsp;</div>\n<div>\u65f6\u95f4\u4e0d\u7b49\u4eba\uff0c\u9a6c\u4e0a\u5f00\u59cb\u51c6\u5907\u8003\u7814\u8fd8\u662f\u53bb9\u6708\u5e95\u7684\u5927\u8fde\u8d5b\u533a\u518d\u640f\u4e00\u628a\uff1f\u90ed\u5c0f\u4fa0\u672c\u662f\u7ea0\u7ed3\u7684\uff0c\u4f46\u662f\u89c9\u5f97\uff0c\u5982\u679c\u4e0d\u640f\u4e00\u640f\uff0c\u672a\u6765\u56de\u5fc6\u8fd9\u65f6\uff0c\u4e00\u5b9a\u4f1a\u611f\u5230\u9057\u61be\u5427\u3002\u7f57\u5927\u53d4\u4e5f\u5e0c\u671b\u901a\u8fc7\u7ade\u8d5b\u4fdd\u7814\uff0c\u4e8e\u662f\u548c\u90ed\u5c0f\u4fa0\u4e00\u8d77\u8e0f\u4e0a\u4e86\u5927\u8fde\u7684\u5f81\u9014\u3002</div>\n<div>&nbsp;</div>\n<div>\u9014\u4e2d\u90ed\u5c0f\u4fa0\u4e86\u89e3\u4e86\u66f4\u591a\u5173\u4e8e\u7f57\u5927\u53d4\u7684\u4e8b\u60c5\uff0c\u7f57\u5927\u53d413\u5c81\u5f00\u59cb\u7f16\u7a0b\uff0c\u90a3\u5e74\u5bb6\u91cc\u4e70\u4e86\u5c0f\u9738\u738b\u5b66\u4e60\u673a\uff0c\u7f57\u5927\u53d4\u53d1\u73b0\u5b66\u4e60\u5361\u91cc\u6709\u4e2aBASIC\u8bed\u8a00\uff0c\u4e8e\u662f\u5c31\u73a9\u4e86\u8d77\u6765&hellip;&hellip;\u60c5\u4f55\u4ee5\u582a\uff0c\u6211\u4eec\u5c0f\u65f6\u5019\u7528\u5b66\u4e60\u673a\u5e72\u4ec0\u4e48\u6765\u7740\uff0c\u4f55\u51b5\u81f3\u4eca\u4e0d\u77e5\u9053\u767d\u6b66\u58eb\u7684\u65cb\u98ce\u817f\u662f\u600e\u4e48\u53d1\u51fa\u6765\u7684\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u7f57\u5927\u53d4\u53c8\u8bb2\u4e86\u6765\u957f\u6c99\u4e0a\u5b66\u540e\u7ee7\u7eed\u627e\u4e86\u4e2a\u5de5\u4f5c\u7684\u4e8b\uff0c\u90a3\u65f6\u5728\u6e58\u96c5\u9644\u8fd1\u770b\u5230\u4e2a\u62db\u8058\u5e7f\u544a\uff0c\u8981\u6c42\u6709Linux\u5f00\u53d1\u80cc\u666f\uff0c\u7f57\u5927\u53d4\u505a\u4e86\u5f88\u4e45MFC\uff0c\u8fd9Linux\u5f00\u53d1\u53ef\u4e0d\u719f\uff0c\u8d76\u7d27\u4e70\u4e86\u672c\u4e66\uff0c\u56fd\u5e86\u8282\u72c2\u770b\u4e03\u5929\uff0c\u7136\u540e\u53bb\u5e94\u8058\u81ea\u79f0\u6709\u4e30\u5bcc\u5f00\u53d1\u7ecf\u9a8c\uff0c\u548c\u8003\u5b98\u5bf9\u7b54\u5982\u6d41\uff0c\u987a\u5229\u8d62\u5f97\u5de5\u4f5c\uff0c6000\u4e00\u4e2a\u6708\uff0c\u73b0\u5728\u5df2\u7ecf\u5728\u957f\u6c99\u4e70\u4e86\u623f\uff0c\u6309\u63ed\u8fd8\u6b3e\u4e2d\u3002\u90ed\u5c0f\u4fa0\u5df2\u7ecf\u542c\u5446\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u6bd4\u8d5b\u524d\u5bbe\u9986\u91cc\uff0c\u90ed\u5c0f\u4fa0\u53c8\u5411\u7f57\u5927\u53d4\u5b66\u4e60\u4e86\u4e00\u4e9b\u9762\u5411\u5bf9\u8c61\u7684\u77e5\u8bc6\uff0c\u4ec0\u4e48\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u4e4b\u7c7b\uff0c\u53d7\u76ca\u532a\u6d45\uff0c\u5bf9\u540e\u6765\u90ed\u5c0f\u4fa0\u7ade\u8d5b\u7684\u4ee3\u7801\u98ce\u683c\u4ea7\u751f\u4e86\u6df1\u8fdc\u7684\u5f71\u54cd\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e4b\u524d\u8bf4\u8fc7\u7f57\u5927\u53d4\u6bd4\u8d5b\u72b6\u6001\u662f\u4e0d\u7a33\u5b9a\u7684\uff0c\u9898\u76ee\u5bf9\u53e3\u4e86\u7206\u53d1\u8d77\u6765\u4e0d\u5f97\u4e86\uff0c\u9898\u76ee\u4e0d\u5bf9\u53e3\u4e86\u4e5f\u4f1a\u88ab\u8650\u6210\u72d7\u3002\u5927\u8fde\u8d5b\u533a\u662f\u90ed\u5c0f\u4fa0\u7b2c\u4e00\u6b21\u53c2\u52a0\u533a\u57df\u8d5b\uff0c\u4e86\u89e3\u8fc7\u524d\u8f88\u7684\u6c34\u5e73\u548c\u6210\u7ee9\uff0c\u660e\u767d\u5373\u4f7f\u662f\u4e09\u4e2a\u81ea\u5df1\u7ec4\u961f\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u6c34\u5e73\u60f3\u62ff\u94f6\u5956\u4e5f\u5f88\u96be\u3002</div>\n<div>&nbsp;</div>\n<div>\u7f57\u5927\u53d4\u592a\u5947\u8469\u4e86\uff0c\u5f00\u573a\u5c31\u6572\u9898\uff0c\u4e0d\u7f16\u8bd1\u5c31\u63d0\u4ea4\uff0c\u9519\u4e86\u4e24\u6b21\u597d\u6b79\u662f\u901a\u8fc7\u4e86\u3002\u3002\u7136\u540e\u5c31\u548c\u6700\u540e\u4e00\u9898\u90a3\u4e2a\u5168\u573a\u6ca1\u961f\u4f0d\u505a\u7684\u9898\u6390\u4e0a\u4e86\u3002\u3002</div>\n<div>\u6390\u5230\u6bd4\u8d5b\u5feb\u7ed3\u675f\uff0c\u90ed\u5c0f\u4fa0\u5bf9C\u9898\u90a3\u4e2a\u52a8\u6001\u89c4\u5212\u7ec8\u4e8e\u6709\u4e86\u6bd4\u8f83\u660e\u6670\u7684\u601d\u8def\uff0c\u8fd9\u662f\u597d\u6b79\u6df7\u4e2a\u94dc\u5956\u7684\u5e0c\u671b\uff0c\u62ff\u7740\u952e\u76d8\u6572\u554a\u6572\u3002\u6700\u540e5\u5206\u949f\uff0c\u8c03\u8bd5\uff0c\u63d0\u4ea4\uff0cWrongAnswer\u3002\u3002\u3002\u8c03\u8bd5\u3002\u3002\u63d0\u4ea4\u3002\u3002\u8c03\u8bd5\u3002\u3002\u63d0\u4ea4\u3002\u3002\u6bd4\u8d5b\u7ed3\u675f\u3002\u3002\u3002\u7701\u8d5b\u5c31\u662f\u8c03\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u6ca1\u51fa\u6765\uff0c\u5927\u8fde\u4f9d\u7136\u5982\u6b64\u3002\u3002\u3002\u8fd9\u5c31\u662f\u4f20\u8bf4\u4e2d\u7684&ldquo;\u6253\u94c1&rdquo;\u4e48\uff0cHonorable Mention\u3002</div>\n<div>&nbsp;</div>\n<div>\u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u7f57\u5927\u53d4\u604d\u7136\u5927\u609f\u5730&ldquo;\u5662\uff01~~\u6700\u540e\u4e00\u9898tmd\u770b\u9519\u4e86\uff0c\u4e0d\u662f\u4e2a\u6c34\u9898&rdquo;\uff0c\u4e00\u65c1\u7684\u90ed\u5c0f\u4fa0\u548c\u53e6\u4e00\u4e2a\u961f\u53cb\u90a3\u4e2a\u6c57\u554a&hellip;&hellip;</div>\n<div>&nbsp;</div>\n<div>\u5927\u8fde\u5230\u5317\u4eac\u8f6c\u8f66\uff0c\u90ed\u5c0f\u4fa0\u9000\u6389\u4e86\u56de\u957f\u6c99\u7684\u7968\uff0c\u4e70\u4e86\u56de\u5bb6\u7684\u3002\u601d\u8003\u4e00\u4e0b\u5427\uff0c\u63a5\u4e0b\u6765\u600e\u4e48\u529e\u3002</div>\n<div>&nbsp;</div>\n<div>\u5982\u679c\u627e\u5de5\u4f5c\uff0c9\u6708\u8fd9\u65f6\u5019\u65f6\u95f4\u5f88\u5145\u8db3\uff0c\u6bd4\u7f57\u795e\u4f1f\u54e5\u5f53\u5e74\u60c5\u51b5\u597d\u5f88\u591a\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e0d\u8fc7\u90ed\u5c0f\u4fa0\u7684\u7236\u6bcd\u548c\u90ed\u5c0f\u4fa0\u672c\u4eba\u90fd\u6bd4\u8f83\u503e\u5411\u4e8e\u8bfb\u7814\u3002</div>\n<div>&nbsp;</div>\n<div>\u8bfb\u63a7\u5236\u7c7b\u5417\uff1f\u90ed\u5c0f\u4fa0\u4e00\u76f4\u4e0d\u559c\u6b22\u8fd9\u4e2a\u5b66\u79d1\uff0c\u5f53\u521d\u4e5f\u662f\u7236\u4eb2\u8ba9\u9009\u7684\u81ea\u52a8\u5316\uff0c\u4ec0\u4e48\u7535\u673a\u62d6\u52a8\u3001\u81ea\u52a8\u63a7\u5236\u539f\u7406\uff0c\u8bf4\u96be\u4e5f\u4e0d\u96be\uff0c\u4f46\u5b8c\u5168\u4e0d\u611f\u5174\u8da3\u3002</div>\n<div>&nbsp;</div>\n<div>\u8003\u8ba1\u7b97\u673a\uff1f\u8003\u5916\u6821\u8fd8\u662f\u672c\u6821\uff1f\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u665a\u4e0a\uff0c\u90ed\u5c0f\u4fa0\u534a\u53d1\u5446\u72b6\u5f00\u7740\u4e00\u4e2a\u4e2a\u7f51\u9875\uff0c\u770b\u4e00\u4e2a\u4e2a\u4ed6\u4eba\u7684\u9009\u62e9\uff0c\u8003\u7814\u7684\u5907\u6218\u5386\u7a0b\uff0c\u5076\u7136\u53f3\u4e0b\u89d2\u5c0f\u658c\u658c\u7684\u5934\u50cf\u4eae\u8d77\uff0c\u968f\u4fbf\u804a\u4e86\u8d77\u6765\u3002\u7a81\u7136\u53c8\u60f3\u8d77\u5c0f\u658c\u658c\u535a\u5ba2\u4e0a\u90a3\u53e5\u8bdd&mdash;&mdash;&ldquo;\u6211\u8981\u628a\u4e2d\u5357\u5e26\u8fdb\u4e16\u754c\u603b\u51b3\u8d5b\uff01&rdquo;&mdash;&mdash;\u4e5f\u662f\u81ea\u5df1\u7684\u68a6\u60f3\u3002</div>\n<div>&nbsp;</div>\n<div>07\u7ea7\u7684\u8d70\u5149\u4e86\uff0c08\u7ea7\u7684\u5f88\u591a\u961f\u5458\u4f3c\u4e4e\u5931\u53bb\u4e86\u594b\u6597\u7684\u4fe1\u5fc3\uff0c\u5404\u81ea\u6563\u53bb\u3002\u5982\u679c\u8fd9\u4e00\u5e7408\u7ea7\u4e00\u4e2a\u4e0d\u7559\uff0c09\u7ea7\u300110\u7ea7\u662f\u5426\u4f1a\u4e00\u6837\uff0c\u65ad\u5c42\uff0c\u7ee7\u7eed\u65ad\u5c42\uff0c\u4e24\u679a\u91d1\u724c\u4e4b\u540e\uff0c\u68a6\u60f3\u5c31\u6c38\u8fdc\u53ea\u662f\u68a6\u60f3\u4e86\u5417\uff1f</div>\n<div>&nbsp;</div>\n<div>\u7559\u4e0b\u3002</div>\n<div>&nbsp;</div>\n<div>\u4f55\u5fc5\u90a3\u4e48\u591a\u4e3a\u4ec0\u4e48\uff0c\u4e2d\u5357\u4fe1\u606f\u9662\u8fd8\u4e0d\u81f3\u4e8e\u5bf9\u4e0d\u8d77\u6c42\u5b66\u7684\u6211\u4eec\u3002\u7559\u4e0b\uff0c\u4e3a\u4e86\u4e2d\u5357ACM\u5171\u540c\u7684\u68a6\u60f3\uff0c\u4e3a\u4e86\u65b0\u4eba\u4eec\u7684\u6e34\u671b\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e70\u4e86\u7b2c\u4e8c\u5929\u7684\u706b\u8f66\u7968\uff0c\u90ed\u5c0f\u4fa0\u56de\u5230\u957f\u6c99\u3002</div>\n<div>&nbsp;</div>\n<div>\u81ea\u52a8\u5316\u7684\u5b66\u751f\u8003\u8ba1\u7b97\u673a\uff0c\u8fd9\u5e74\u8ba1\u7b97\u673a\u8fd8\u662f\u5168\u56fd\u7edf\u8003\uff0c\u6ca1\u6709\u4e2d\u5357\u81ea\u4e3b\u51fa\u9898\uff0c\u964c\u751f\u7684\u7ec4\u6210\u539f\u7406\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u8ba1\u7b97\u673a\u7f51\u7edc\uff0c\u90ed\u5c0f\u4fa0\u5374\u89c9\u5f97\u662f\u90a3\u4e48\u4eb2\u5207\uff0c\u597d\u50cf\u8fd9\u4e9b\u4e1c\u897f\u4e0a\u8f88\u5b50\u5c31\u523b\u5728\u8111\u6d77\u91cc\u4e00\u6837\uff0c\u662f\u88ab\u81ea\u52a8\u5316\u8650\u5f97\u592a\u4e45\u5417\uff0c\u8003\u7814\u4e13\u4e1a\u8bfe\u7684\u590d\u4e60\uff0c\u867d\u7136\u8f9b\u82e6\uff0c\u53ef\u66f4\u591a\u7684\u662f\u76f8\u89c1\u6068\u665a\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u8fb9\u8003\u7814\uff0c\u8fb9\u653e\u5fc3\u4e0d\u4e0bACM\u534f\u4f1a\uff0c\u56e0\u4e3a\u65e9\u5c31\u6709\u5f88\u591a\u7684\u8ba1\u5212\u7b49\u5f85\u5b9e\u73b0\uff0c\u5373\u4f7f\u8003\u7814\u4e5f\u62e6\u4e0d\u4f4f\u3002</div>\n<div>&nbsp;</div>\n<div>\u6e05\u534e\u7684\u533a\u57df\u8d5b\u91d1\u724c\u9009\u624b\u662f\u5927\u4e00\u5b66\u751f\uff0c\u800c\u6211\u4eec\u5f80\u5f80\u662f\u5927\u4e09\u5927\u56db\u751a\u81f3\u7814\u4e00\uff0c\u751f\u6e90\u6211\u4eec\u662f\u6ca1\u6cd5\u6539\u53d8\u7684\uff0c\u6211\u4eec\u6ca1\u6709\u9ad8\u4e2d<span id=\"17KSFindDIV\" class=\"KSFIND_CLASS\">OI</span>\u9009\u624b\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5728\u5927\u4e00\u65b0\u751f\u5165\u5b66\u7684\u65f6\u5019\u544a\u8bc9\u4ed6\u4eec\uff0c\u4f60\u4eec\u7684\u5927\u5b66\u751f\u6d3b\u6709\u591a\u4e00\u79cd\u9009\u62e9&mdash;&mdash;ACM\uff01</div>\n<div>&nbsp;</div>\n<div>9\u6708\u4e2d\u65ec\uff0c\u4e2d\u5357\u7684\u7b2c\u4e00\u6b21ACM\u65b0\u751f\u5ba3\u8bb2\u4f1a\uff1b</div>\n<div>&nbsp;</div>\n<div>10\u6708\uff0c\u4e2d\u5357\u7684\u7b2c\u4e00\u6b21ACM\u65b0\u4eba\u8d5b\uff1b</div>\n<div>&nbsp;</div>\n<div>11\u6708\uff0c\u4e2d\u5357\u7684\u7b2c\u4e00\u6b21\u6709\u5916\u6821\u53c2\u52a0\u7684\u6b63\u5f0f\u6708\u8d5b\uff1b</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u8fc7\u7a0b\u4e2d\uff0c\u90ed\u5c0f\u4fa0\u4e5f\u641e\u6e05\u695a\u4e86ACM\u534f\u4f1a\u7684\u5386\u53f2\u7531\u6765\uff0c\u5e76\u5728\u5b66\u5de5\u529e\u91cd\u65b0\u5efa\u7acb\u4e86ACM\u534f\u4f1a\u6b63\u5f0f\u6863\u6848\uff1b</div>\n<div>&nbsp;</div>\n<div>\u76d6\u516c\u7ae0\u63d0\u4f9b\u5b66\u6821\u5b98\u65b9\u8bc1\u660e\uff0c\u5728\u4eba\u4eba\u7f51\u5f00\u901a\u4e86\u8ba4\u8bc1\u4e2d\u5357\u5927\u5b66ACM\u7231\u597d\u8005\u534f\u4f1a\u516c\u5171\u4e3b\u9875\uff1b<br /><br /></div>\n<div>\u5efa\u7acbACM\u6821\u5185\u5916\u4ea4\u6d41<span id=\"9KSFindDIV\" class=\"KSFIND_CLASS\">Q</span><span id=\"10KSFindDIV\" class=\"KSFIND_CLASS\">Q</span>\u7fa4\uff0c\u52a0\u5f3a\u4e0e\u5168\u7701ACMer\u4ea4\u6d41\uff08\u52302013\u7684\u73b0\u5728\u5df2\u4e0d\u6b62\u5168\u7701\uff0c\u7fa4\u91cc\u8fd8\u9690\u85cf\u7740\u4e00\u4e9b\u4e16\u754c\u7ea7\u795e\u725b\uff09\uff1b</div>\n<div>&nbsp;</div>\n<div>\u62db\u65b0\uff0c\u58ee\u5927ACM\u534f\u4f1a\uff1b</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e00\u5e74\u6e58\u5927\u4e00\u961f\u7684\u6c34\u5e73\u529b\u538b\u5168\u7701\uff0c\u5927\u5bb6\u90fd\u5f88\u597d\u5947\u6211\u5927\u4e2d\u5357\u548c\u6e56\u5927\u4f55\u4ee5\u4e0d\u53ca\u6e58\u5927ACM\uff0c\u751a\u81f3\u8fde\u6e56\u5357\u552f\u4e00\u8fdb\u8fc7WordFinal\u7684\u56fd\u9632\u79d1\u5927\u4e5f\u8d25\u7ed9\u6e58\u5927\u3002\u8fd9\u652f\u961f\u4f0d\u5f53\u7136\u4ed8\u51fa\u4e86\u5de8\u5927\u7684\u8270\u8f9b\u4e0e\u52aa\u529b\uff0c\u4f46\u662f\u5f53\u770b\u5230\u4ed6\u4eec\u961f\u5458\u535a\u5ba2\u63d0\u5230\uff0c&ldquo;\u8d5b\u524d\u8bad\u7ec3\u90a3\u51e0\u5929\u76f4\u63a5\u3010\u7761\u3011\u5728\u673a\u623f&rdquo;\u7684\u65f6\u5019\uff0c\u90ed\u5c0f\u4fa0\u773c\u4e2d\u7684\u8fd9\u53e5\u8bdd\u662f&ldquo;\u8d5b\u524d\u8bad\u7ec3\u90a3\u51e0\u5929\u76f4\u63a5\u7761\u5728\u3010\u673a\u623f\u3011&rdquo;</div>\n<div>&nbsp;</div>\n<div>\u67d0\u5929\uff0c\u4e00\u4e2a\u8eab\u5f71\u76f4\u5954\u6c11\u4e3b\u697c\u9662\u957f\u529e\u516c\u5ba4\u3002</div>\n<div>\u90ed\u5c0f\u4fa0\u627e\u5434\u9662\u957f&ldquo;\u559d\u4e86\u4e2a\u8336&rdquo;\u3002\u5434\u9662\u957f\u6001\u5ea6\u548c\u853c\uff0c\u5e76\u8868\u793a\u4e86\u5bf9ACM\u5de5\u4f5c\u7684\u652f\u6301\uff0c\u4e5f\u89e3\u91ca\u4e86ACM\u673a\u623f\u7684\u4e8b\u60c5\u5b66\u9662\u4e5f\u5728\u52aa\u529b\uff0c\u786e\u5b9e\u53d7\u9650\u4e8e\u5b66\u6821\u7684\u4e00\u4e9b\u6761\u4ef6\uff0c\u4f46ACM\u7ade\u8d5b\u6709\u673a\u623f\u8fd9\u4e00\u5929\u4e0d\u8fdc\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u9664\u4e86\u5927\u52a8\u6001\uff0c\u671f\u95f4\u5c0f\u6d3b\u52a8\u4e5f\u4e0d\u65ad\uff0c\u534f\u4f1a\u7ec4\u7ec7\u77e5\u8bc6\u4e32\u8bb2\uff0c\u8ba9\u521a\u4e86\u89e3ACM\u7684\u65b0\u4eba\u4eec\u4e0d\u5fc5\u7b49\u5230\u6691\u5047\u7684\u96c6\u8bad\uff0c\u800c\u662f\u5e38\u5e38\u80fd\u5f97\u5230ACM\u524d\u8f88\u7684\u6307\u5bfc\uff0c\u8fd8\u6709\u771f\u6b63\u7684\u7c7b\u4f3c\u65b0\u4eba\u5e0c\u671b\u7684&ldquo;\u57f9\u8bad&rdquo;\u7684\u611f\u89c9\uff0c\u61c2\u7684\u4eba\u4e00\u53e5\u8bdd\uff0c\u9876\u81ea\u5df1\u770b\u4e00\u4e2a\u6708\u4e66\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u5e0c\u671b\uff0c\u4e2d\u5357\u628a\u6708\u8d5b\u529e\u8d77\u6765\uff0c\u529e\u6210\u4f20\u7edf\u3002\u628a\u5ba3\u8bb2\u4f1a\u641e\u8d77\u6765\uff0c\u641e\u6210\u5e38\u89c4\u3002\u628a\u77e5\u8bc6\u4e32\u8bb2\u7cfb\u7edf\u8d77\u6765\uff0c\u5e2e\u65b0\u4eba\u5165\u95e8\u3002</div>\n<div>&nbsp;</div>\n<div>\u671f\u95f4\u5c0f\u5b87\u548c\u5c0f\u6613\u5728\u5de5\u4f5c\u4e2d\u505a\u4e86\u5f88\u5927\u7684\u8d21\u732e\uff0c\u800c\u5c0f\u5b87\u4e5f\u662f\u8fd9\u4e00\u5e74ACM\u6821\u961f\u961f\u5458\uff0c\u90ed\u5c0f\u4fa0\u6253\u7b97\u6709\u4e00\u5929\u628a\u534f\u4f1a\u4e3b\u5e2d\u5de5\u4f5c\u4f20\u9012\u7ed9\u5c0f\u5b87\u3002</div>\n<div>&nbsp;</div>\n<div>\u53e6\u4e00\u8fb9\uff0c\u533a\u57df\u8d5b\u4e5f\u5728\u706b\u70ed\u8fdb\u884c\u4e2d\uff0c\u4e0d\u8fc7\u706b\u70ed\u662f\u522b\u4eba\u7684\u706b\u70ed\uff0c11\u5e74\u4e2d\u5357\u7684ACM\uff0c\u9664\u4e86\u5c0f\u90b1\u7531\u4e8e\u53c2\u52a0\u4fdd\u7814\u590d\u8bd5\u800c\u7531\u5927\u8c61\u8bf7\u5f00\u4ed9\u51fa\u5c71\u52a9\u9635\uff0c\u5728\u4e0a\u6d77\u8d5b\u533a\u505a\u51fa\u5168\u573a\u6ca1\u5176\u4ed6\u961f\u4f0d\u901a\u8fc7\u7684\u6570\u5b66\u795e\u9898\u8f70\u52a8\u4e00\u65f6 \u4e4b\u5916\uff0c\u518d\u65e0\u4eae\u70b9\u3002</div>\n<div>&nbsp;</div>\n<div>\u7701\u8d5b\u56e2\u4f53\u7b2c\u4e09\uff0c\u533a\u57df\u8d5b\u4e8c\u94dc\uff0c\u7ed3\u675f\u4e86\u8fd9\u4e00\u5e74ACM\u7684\u8d5b\u5b63\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>\u3010\u5927\u5927\u5927\u8865\u4e01\u3002\u3002\u3002\u3011</div>\n<div>&nbsp;</div>\n<div>\u524d\u6587\u8bf4\u5230\u540e\u9762\u8fd8\u4f1a\u63d0\u5218\u6c5d\u4f73\u5927\u795e\uff0c\u628a\u8fd9\u4e48\u91cd\u8981\u7684\u5267\u60c5\u7ed9\u5fd8\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>10\u5e74\u300111\u5e74\u300112\u5e74\uff0c\u53ef\u80fd\u8fd8\u670913\u5e74\u4eca\u5e74\uff0c\u6e56\u5357\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u7684\u9898\u76ee\u662f\u8bf7\u5218\u6c5d\u4f73\u6765\u51fa\u9898\u7684\uff0c10\u5e74\u7684\u65f6\u5019\u4f1f\u54e5\u542c\u8bf4\u8fd9\u4e2a\u6d88\u606f\uff0c\u679c\u65ad\u641e\u6765\u4e86\u9ed1\u4e66\u7684\u5404\u79cd\u76f8\u5173\u8d44\u6599\u3002\u8fd9\u7ed9\u4e8c\u53c9\u6811\u8fd8\u6ca1\u641e\u61c2\u7684\u90ed\u5c0f\u4fa0\u76f4\u63a5\u770b\u6655\u4e86\u3002\u8fd9\u65f6\u5019\u8fd8\u6ca1\u4eba\u77e5\u9053\u767d\u4e66\u5df2\u6084\u6084\u51fa\u7248\uff0c\u800c\u4e00\u5e74\u540e\u62ff\u5230\u767d\u4e66\u7684\u90ed\u5c0f\u4fa0\u53d1\u73b0\uff0c\u505a\u5b8c\u767d\u4e66\u7684\u5927\u7ea6350\u9898\u6240\u5b66\u4f1a\u7684\u7b97\u6cd5\uff0c\u9762\u5bf910\u5e74\u7701\u8d5b\u51e0\u4e4e\u662f\u53ef\u4ee5AK\u7684\u8282\u594f\u554a\uff01</div>\n<div>&nbsp;</div>\n<div>11\u5e74\u5218\u6c5d\u4f73\u8001\u5e08\u6765\u4e86\u4e00\u8d9f\u957f\u6c99\uff0c\u5728\u7701\u8d5b\u524d\u5f00\u4e86\u4e00\u573a\u5ba3\u8bb2\u4f1a\uff08\u6559\u7ec3\u57f9\u8bad\u4f1a\uff09\uff0c\u7ad9\u5728\u5b8f\u89c2\u53d1\u5c55\u7684\u89d2\u5ea6\u8ba9\u5927\u5bb6\u770b\u5230\u4e86\u5173\u4e8eACM\u66f4\u5e7f\u9614\u7684\u4e16\u754c\uff0c\u5217\u4e3e\u4e86\u51e0\u4e2aACM\u603b\u51b3\u8d5b\u7684\u9898\u76ee\uff0c\u4e5f\u8ba9\u5927\u5bb6\u4e86\u89e3\u5230\u603b\u51b3\u8d5b\u7684\u9898\u4e5f\u6ca1\u6709\u96be\u5230\u6211\u4eec\u65e0\u6cd5\u505a\u3002\u540c\u65f6\u4e5f\u63d0\u5230\uff0c\u6e56\u5357\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u8981\u53d1\u5c55\uff0c\u7701\u8d5b\u7684\u96be\u5ea6\u4e5f\u4e0d\u4f1a\u4e00\u6210\u4e0d\u53d8\u300211\u5e74\u7684\u9898\u6bd4\u8d7710\u5e74\u786e\u5b9e\u96be\u5ea6\u6709\u4e00\u5b9a\u63d0\u5347\uff0c\u81f3\u5c11\u628a\u505a\u5b8c\u4e86\u767d\u4e66\u548c10\u5e74\u7701\u8d5b\u9898\u7684\u90ed\u5c0f\u4fa0\u6253\u51fb\u5f97\u591f\u60e8\u3002</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011AK\u7684\u610f\u601d\u662f\u4e00\u573a\u6bd4\u8d5b\u6240\u6709\u9898\u90fd\u6b63\u786e\u505a\u51fa\uff0c1Y\u7684\u610f\u601d\u662f\u4e00\u9053\u9898\u7b2c\u4e00\u6b21\u63d0\u4ea4\u5c31\u6b63\u786e\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>\u4e00\u8fb9\u8003\u7814\u4e00\u8fb9\u987e\u7740\u534f\u4f1a\u7684\u90ed\u5c0f\u4fa0\uff0c\u4f9d\u7136\u62bd\u7a7a\u505a\u4e00\u4e9bACM\u9898\uff0c\u8fdb\u5c55\u7f13\u6162\u4f46\u81f3\u5c11\u4e0d\u81f3\u4e8e\u534a\u5e74\u540e\u53d8\u5f97\u751f\u758f\u91cd\u5934\u518d\u6765\u3002\u6df1\u77e5\u6bd4\u8d5b\u961f\u53cb\u4e00\u5b9a\u8981\u627e\u771f\u6b63\u613f\u610f\u575a\u6301\u52aa\u529b\u4e0b\u53bb\u7684\uff0c\u5e76\u4e14\u5c3d\u65e9\u786e\u5b9a\uff0c\u6709\u76ee\u7684\u6709\u8ba1\u5212\u5730\u8bad\u7ec3\u3002\u83dc\u9e1f\u65f6\u4ee3\u7684\u90ed\u5c0f\u4fa0\u627e\u8fc7\u4e00\u4e9b\u961f\u5458\u5e0c\u671b\u7ec4\u961f\u800c\u88ab\u62d2\u7edd\uff0c\u5982\u4eca\u6765\u627e\u90ed\u5c0f\u4fa0\u7ec4\u961f\u7684\u4eba\uff0c\u90ed\u5c0f\u4fa0 \u4e00 \u4e00 \u5a49\u62d2\uff0c\u56e0\u4e3a\u5fc3\u4e2d\u5df2\u6709\u4eba\u9009\u3002\u65b0\u4eba\u5c0f\u658c\u658c\u548c\u5c0f\u5c0f\u82cf\uff0c\u867d\u7136\u8fd9\u65f6\u5019\u8fd8\u4e0d\u53ca\u7ecf\u5386\u66f4\u591a\u7684\u8001\u4eba\u7684\u6c34\u5e73\uff0c\u4f46\u90ed\u5c0f\u4fa0\u770b\u5f97\u5230\u4ed6\u4eec\u7684\u806a\u660e\uff0c\u770b\u5f97\u5230\u4ed6\u4eec\u8fdc\u8d85\u8d8a\u4ed6\u4eba\u7684\u52aa\u529b\uff0c\u81ea\u5df1\u4f5c\u4e3a\u52a9\u7406\u6559\u7ec3\u4eb2\u81ea\u5e26\u51fa\u7684\u961f\u5458\uff0c\u66f4\u503c\u5f97\u4fe1\u4efb\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u4e0e\u5c0f\u658c\u658c\u5546\u5b9a\uff0c\u6bcf\u5929\u5c0f\u658c\u658c\u8981\u5b8c\u6210\u4e00\u4efdpdf\u603b\u7ed3\uff0c\u603b\u7ed3\u5f53\u5929ACM\u5b66\u4e60\u5185\u5bb9\uff0c\u4f5c\u4e3a\u7763\u4fc3\u3002\u5c0f\u658c\u658c\u7684\u8fdb\u6b65\u901f\u5ea6\u5b8c\u5168\u8d85\u4e4e\u60f3\u50cf\uff0c\u4e00\u4e2a\u53c8\u4e00\u4e2a\u7b97\u6cd5\u5730\u653b\u514b\uff0c\u4e32\u8bb2\u4e2d\u7ed9\u65b0\u4eba\u8bb2\u89e3\uff0c\u7ed9\u6708\u8d5b\u51fa\u9898\uff0c\u51e0\u4e2a\u6708\u4e0b\u6765\u5df2\u8fd1\u5e74\u5e95\uff0c\u4fe8\u7136\u6709\u4e86\u4e9b\u9ad8\u624b\u98ce\u8303\u3002\u53c8\u5230\u4e00\u5e74\u4e00\u5ea6\u7684\u6e56\u5927\u65b0\u4eba\u8d5b\uff0c\u5c0f\u658c\u658c\u679c\u65ad\u62ff\u4e86\u4e2a\u51a0\u519b\uff0c\u8fd9\u5e74\u5956\u91d1\u6da8\u4e86\uff1f\u5c0f\u658c\u658c\u62ff\u4e86200\u5757\u3002\u3002\u6bd4\u4e00\u5e74\u524d\u90ed\u5c0f\u4fa0\u7684\u591a\u8bf6\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u5c0f\u82cf\u5012\u6ca1\u8fd9\u4e48\u75af\u72c2\uff0c\u81ea\u5df1\u505a\u7740\u7f51\u4e0a\u627e\u7684\u5206\u7c7b\u5217\u8868\u3002\u4e00\u6b21\u6b21\u4e2a\u4eba\u8d5b\uff0c\u548c\u5c0f\u658c\u658c\u52bf\u5747\u529b\u654c\uff0c\u8c01\u5f97\u7b2c\u4e00\u90fd\u8bf4\u4e0d\u5b9a\u3002\u5c0f\u658c\u658c\u3001\u5c0f\u5c0f\u82cf\u3001\u7f57\u5927\u53d4\u3001\u5efa\u519b\u4e00\u76f4\u5305\u63fd\u7740\u6821\u5185\u5404\u7c7b\u6bd4\u8d5b\u7684\u524d\u56db\u540d\u3002</div>\n<div>&nbsp;</div>\n<div>\u5173\u4e8e\u4e0b\u4e00\u5e74\u7684\u6691\u671f\u96c6\u8bad\uff0c\u90ed\u5c0f\u4fa0\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5927\u8ba1\u5212\uff0c\u9996\u5148\u5c31\u662f\u96c6\u8bad\u624b\u518c\u7684\u6539\u53d8\u3002</div>\n<div>&nbsp;</div>\n<div>09\u5e74\u5f00\u59cb\u5b58\u5728\u96c6\u8bad\u624b\u518c\uff0c\u800c\u5907\u53d7\u5173\u6ce8\u7684\u90e8\u5206\u5c31\u662f\u8bad\u7ec3\u9898\u76ee\u5217\u8868\u3002</div>\n<div>&nbsp;</div>\n<div>09\u5e74\u9898\u76ee\u5c11\u800c\u7cbe\uff0c\u6570\u91cf\u548c\u7c7b\u578b\u4e0d\u8db3\uff0c10\u5e74\u9898\u76ee\u6709\u4e86\u6781\u5927\u4e30\u5bcc\u4f46\u7a0d\u663e\u6742\u4e71\uff0c11\u5e74\u9898\u76ee\u5bf910\u5e74\u9898\u76ee\u6709\u90e8\u5206\u6539\u53d8\uff0c\u5e76\u6dfb\u52a0\u4e86\u5f88\u591a\u9898\u76ee\uff0c\u770b\u4e0a\u53bb\u66f4\u50cf\u76f4\u63a5\u5806\u780c\uff0c\u826f\u83a0\u4e0d\u9f50\uff0c\u96be\u9898\u3001\u504f\u9898\u90fd\u4e0d\u9002\u5408\u65b0\u4eba\u8bad\u7ec3\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e8e\u662f\u90ed\u5c0f\u4fa0\u5f00\u59cb\u4e86\u4e00\u9879\u5927\u5de5\u7a0b&mdash;&mdash;\u5bf9\u4e09\u5e74\u96c6\u8bad\u624b\u518c\u5b58\u5728\u7684\u9898\u76ee\u548c\u4ece\u7f51\u4e0a\u627e\u5230\u7684\u5e94\u8be5\u6dfb\u52a0\u7684\u7b97\u6cd5\u9898\u76ee\u5217\u8868\uff0c\u7528\u5c3d\u53ef\u80fd\u591a\u7684\u65b9\u6cd5\u89e3\u7b54\uff0c\u5e76\u5206\u6790\u601d\u8def\uff0c\u5bf9\u7b97\u6cd5\u548c\u96be\u5ea6\u8fdb\u884c\u7ec6\u81f4\u7684\u5206\u7c7b\uff0c\u5bf9\u9898\u76ee\u5217\u8868\u589e\u5220\u6539\uff0c\u4e3a\u6bcf\u9053\u9009\u4e0a\u7684\u9898\u76ee\u7528\u6807\u51c6\u4ee3\u7801\u683c\u5f0f\u548c\u6bd4\u8f83\u597d\u7684\u547d\u540d\u4e60\u60ef\u3001\u51fd\u6570\u5c01\u88c5 \u5b8c\u6210\u9898\u89e3\u4ee3\u7801\uff0c\u63cf\u8ff0\u89e3\u9898\u65b9\u6cd5\u3002\u8ba9\u96c6\u8bad\u624b\u518c\u6bcf\u9053\u9898\u51fa\u73b0\u5728\u5408\u7406\u7684\u4f4d\u7f6e\uff0c\u8d77\u5230\u5e94\u6709\u7684\u4f5c\u7528\uff0c\u7b26\u5408\u6691\u671f\u96c6\u8bad\u7684\u4efb\u52a1\u91cf\u3002\u9898\u89e3\u4f9b\u65b0\u4eba\u53c2\u8003\uff0c\u4f5c\u4e3a\u5b66\u4e60\u7684\u4ee3\u7801\u6a21\u677f\uff0c\u53ef\u5b66\u4e60\u5b9e\u73b0\u65b9\u6cd5\uff0c\u53ef\u603b\u7ed3\u6253\u5370\u4f7f\u7528\uff0c\u4e0d\u81f3\u4e8e\u56e0\u4e3a\u77e5\u9053\u7b97\u6cd5\u63cf\u8ff0\u5374\u4e0d\u77e5\u5982\u4f55\u7528\u4ee3\u7801\u5b9e\u73b0\u800c\u963b\u6321\u8bad\u7ec3\u7684\u6b65\u4f10\u3002\u8fd9\u9879\u5de5\u4f5c\u4e5f\u8ba9\u90ed\u5c0f\u4fa0\u63a5\u89e6\u4e86\u4e00\u4e9b\u66fe\u7ecf\u4e0d\u4e86\u89e3\u7684\u7b97\u6cd5\uff0c\u8fb9\u5b66\u8fb9\u505a\uff0c\u5bfb\u627e\u6700\u4f18\u89e3\u51b3\u65b9\u6848\u3002\u4f5c\u4e3a\u96c6\u8bad\u624b\u518c\u7684\u7f16\u5199\u8005\uff0c\u4e86\u89e3\u624b\u518c\u4e0a\u7684\u6bcf\u4e00\u9053\u9898\uff0c\u624b\u518c\u7684\u9898\u76ee\u5217\u8868\u624d\u771f\u6b63\u6709\u4e86\u610f\u4e49\u3002</div>\n<div>&nbsp;</div>\n<div><strong>2012\u5e74</strong></div>\n<div><strong>&nbsp;</strong></div>\n<div>\u8003\u7814\u521d\u8bd5\u6700\u96be\u4e00\u5e74\uff082013\u8ba1\u7b97\u673a\u6709\u4e2d\u5357\u81ea\u4e3b\u547d\u9898\u4e86\uff09\uff0c\u590d\u8bd5\u53d8\u4e25\u683c\u5934\u4e00\u5e74\uff08\u8fd9\u4e00\u5e74\u5f00\u59cb\u5237\u4e00\u534a\uff0c\u5b66\u7855\u5f55\u53d610\u4eba\uff09\uff0c\u90ed\u5c0f\u4fa0\u6709\u60ca\u65e0\u9669\u5730\u901a\u8fc7\u4e86\u3002\u5c0f\u658c\u658c\u548c\u5c0f\u5c0f\u82cf\u5f88\u9ad8\u5174\u5730\u7ed9&ldquo;\u8001\u5927&rdquo;\u529e\u4e86\u4e00\u573a\u7ec4\u961f\u7eaa\u5ff5\u8d5b\u3002</div>\n<div>&nbsp;</div>\n<div>\u7ec4\u961f</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u7684<span id=\"11KSFindDIV\" class=\"KSFIND_CLASS\">Q</span><span id=\"12KSFindDIV\" class=\"KSFIND_CLASS\">Q</span>\u5934\u50cf\u662fWall-E\uff08\u673a\u5668\u4eba\u603b\u52a8\u5458\uff0c\u672c\u4e16\u7eaa\u521d\u76ae\u514b\u65af\u6700\u4f18\u79c0\u52a8\u753b\u7247\uff09\uff0c\u800c\u5c0f\u658c\u658c\u7684\u5934\u50cf\u4e5f\u6539\u6210\u4e86&ldquo;\u6e05\u6d01\u5de5&rdquo;M-O\uff0c\u4e8e\u662f\u5c31\u62c9\u4e0a\u5c0f\u5c0f\u82cf\u505a&ldquo;\u7535\u710a\u5de5&rdquo;Burn-E\u4e86\uff0c\u961f\u540d\u5c31\u53d6\u4f5c&mdash;&mdash;CSU_BMW\u3002</div>\n<div>&nbsp;</div>\n<div>\u771f\u6b63\u7684\u7ec4\u961f\u624d\u521a\u521a\u5f00\u59cb\uff0c\u56e2\u961f\u914d\u5408\u8fd8\u6709\u5f88\u591a\u4e0d\u8db3\uff0c\u5e74\u521d\u7684\u5927\u5c0f\u6bd4\u8d5b\u8fd8\u662f\u88ab\u8650\u4e0d\u65ad\uff0c\u4f46\u961f\u4f0d\u7684\u6539\u53d8\u8ba9\u90ed\u5c0f\u4fa0\u81ea\u5df1\u90fd\u89c9\u5f97\u795e\u5947\uff0c\u5c31\u662f\u6781\u5f3a\u7684\u81ea\u9002\u5e94\u8c03\u6574\u6027\uff0c\u6bd4\u8d5b\u4e00\u573a\u6bd4\u4e00\u573a\u9ed8\u5951\u30022010\u4e4b\u540e\uff0c\u771f\u662f\u4e45\u8fdd\u4e86\u5c0f\u658c\u658c\u5c0f\u5c0f\u82cf\u8fd9\u6837\u7684\u9009\u624b\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u8bd5\u725b\u5200</div>\n<div>&nbsp;</div>\n<div>\u8fd8\u662f\u4e00\u5e74\u4e00\u5ea6\u7684\u6e58\u6f6d\u9080\u8bf7\u8d5b\uff0c\u4e2d\u5357\u62ff\u4e86\u9080\u8bf7\u8d5b\u7b2c\u4e8c\u4e2a\u51a0\u519b\uff08\u4e0a\u4e00\u6b21\u5c31\u662f10\u5e74\u7684\u7f57\u795e\u4e86\uff09\u3002\u800c\u7531\u90ed\u5c0f\u4fa0\u64ae\u5408\u7684\u7f57\u5927\u53d4\u548c\u5efa\u519b\u7ec4\u8d77\u7684\u961f\u4f0d\uff0c\u4e5f\u62ff\u4e86\u7b2c\u4e09\u3002</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad\u4e34\u8fd1</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u65f6\u5019\u4f59\u8001\u5e08\u4e5f\u5df2\u56de\u56fd\uff0c \u7ed9\u5927\u5bb6\u5e26\u6765\u4e86\u4e00\u4e2a\u60ca\u5929\u597d\u6d88\u606f\uff0c\u96c6\u8bad\u80fd\u7528\u4e0a\u673a\u623f\u4e86\uff01ACM\u8bad\u7ec3\u4e13\u7528\u673a\u623f\uff0c\u8d1f\u8d23\u4eba\u662f\u4f59\u8001\u5e08\u3002\u8fd9\u610f\u5473\u7740\u4e2d\u5357\u7684ACMer\u6709\u4e86\u81ea\u5df1\u7684\u5bb6\uff0c\u6709\u4e86\u4e00\u4e2a\u57fa\u5730\uff0c\u4e00\u4e2a\u4e0d\u7528\u88ab\u7ba1\u7406\u5458\u8fdb\u884c\u5404\u79cd\u9650\u5236\u7684\u81ea\u5df1\u7684\u5730\u65b9\u3002\u8981\u4e0d\u8981\u53bb\u673a\u623f\u7761\u4e00\u665a\u4e0a\u4ee5\u4f5c\u7eaa\u5ff5\u5462\uff1f\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u79df\u623f</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u548c\u5c0f\u5c0f\u82cf\u7684\u5bbf\u820d\u5728\u6821\u672c\u90e8\uff0c\u5c0f\u658c\u658c\u8fd8\u5728\u5357\u6821\uff0c\u961f\u4f0d\u8054\u7cfb\u5e76\u4e0d\u65b9\u4fbf\u3002\u96c6\u8bad\u524d\u4e09\u4e2a\u4eba\u4e00\u5408\u8ba1\uff0c\u5c31\u5728\u540e\u6e56\u79df\u4e86\u4e2a\u623f\u3002\u5c0f\u658c\u658c\u9ad8\u5174\u5730\u8bf4\uff0c\u6691\u5047\u80fd\u5439\u7a7a\u8c03\u4e86\uff01</div>\n<div>&nbsp;</div>\n<div>\u673a\u623f\u6765\u4e86</div>\n<div>&nbsp;</div>\n<div>7\u6708\uff0c\u673a\u623f\u88c5\u4fee\u5b8c\u6bd5\uff0c\u4f59\u8001\u5e08\u628a\u673a\u623f\u548c\u673a\u623f\u4ea4\u6362\u673a\u67dc\u7684\u94a5\u5319\u4ea4\u5230\u4e86\u90ed\u5c0f\u4fa0\u624b\u91cc\u3002\u56de\u60f3\u8fd9\u4e48\u591a\u5e74\uff0c\u90a3\u4e00\u523b\uff0c\u90ed\u5c0f\u4fa0\u7684\u5fc3\u60c5\u5f88\u590d\u6742\u3002</div>\n<div>&nbsp;</div>\n<div>\u6709\u767d\u677f\uff0c\u6709\u6295\u5f71\u4eea\uff0c\u6709\u6253\u5370\u673a\uff0c\u6709\u6307\u7eb9\u7b7e\u5230\u673a\uff0c\u670955\u53f0\u7535\u8111\u548c1\u4e2a\u5e26\u7535\u8111\u7684\u8bb2\u53f0\uff0c\u867d\u7136\u90fd\u662f08\u5e74\u7684\u65e7\u7535\u8111\uff0c\u4f46\u5df2\u7ecf\u5f88\u6ee1\u8db3\uff0c\u8fd8\u6709\u4e24\u53f0\u5168\u65b0\u5927\u5757\u5934\u6234\u5c14\u670d\u52a1\u5668\uff01\uff01\uff01\u590d\u6742\u7684\u5fc3\u60c5\u5f88\u5feb\u88ab\u559c\u60a6\u4ee3\u66ff\uff0c\u51e0\u5929\u540e\u5373\u5c06\u5f00\u59cb\u96c6\u8bad\u3002BMW\u4e09\u4e2a\u4eba\u9a6c\u4e0a\u5fd9\u6d3b\u8d77\u6765\u3002\u5361\u7ebf\u94b3\u7f51\u7ebf\u6c34\u6676\u5934\u87ba\u4e1d\u5200\u767d\u677f\u64e6\u767d\u677f\u7b14\uff0c\u90ed\u5c0f\u4fa0\u68c0\u67e5\u6bcf\u53f0\u673a\u5668\u7684\u7f51\u7edc\uff0c\u67e5\u770b\u7f51\u7ebf\u7f16\u53f7\u5bf9\u5e94\u673a\u5668\uff0c\u6362\u6c34\u6676\u5934\u6362\u63a5\u53e3\u3002\u5c0f\u658c\u658c\u67e5\u770b\u4e0d\u80fd\u542f\u52a8\u7684\u673a\u5668\uff0c\u5927\u6982\u662f\u673a\u5668\u8bb8\u4e45\u6ca1\u6709\u901a\u7535\uff0c\u6263\u4e00\u4e0bBIOS\u7535\u6c60\u5c31\u90fd\u597d\u4e86\u3002\u5c0f\u5c0f\u82cf\u7814\u7a76\u4e86\u673a\u623f\u673a\u5668\u7684\u8054\u60f3\u7f51\u7edc\u540c\u4f20\u7cfb\u7edf\uff0c\u7ed9\u673a\u623f\u7edf\u4e00\u88c5\u4e0a\u4e86Win7\u4e13\u4e1a\u7248\u548cACM\u8bad\u7ec3\u76f8\u5173\u8f6f\u4ef6\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u5fd9\u6d3b\u4e00\u5929\u4e0b\u6765\uff0c\u770b\u7740\u6240\u6709\u673a\u5668\u540c\u65f6\u542f\u52a8\uff0c\u95ea\u52a8\u542f\u52a8\u754c\u9762\uff0c\u8fdb\u5165\u7cfb\u7edf&hellip;&hellip;\u5fc3\u4e2d\u83ab\u540d\u7684\u6fc0\u52a8\u3002\u51c6\u5907\u597d\u4e86\uff0c\u8fce\u63a5\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u96c6\u8bad\uff01\u3001</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad\u524d</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u7684&ldquo;\u5927\u5de5\u7a0b&rdquo;\u4e5f\u5c06\u5b8c\u5de5\uff0c\u521a\u597d\u505a\u5b8c\u6bd5\u8bbe\uff0c\u7528\u6bd5\u8bbe\u7684\u6807\u51c6\u6392\u7248\u5236\u4f5c\u4e8612\u5e74\u96c6\u8bad\u624b\u518c\uff0c\u4e0d\u65ad\u56de\u5fc6\u81ea\u5df1\u7684&ldquo;\u83dc\u9e1f\u65f6\u4ee3&rdquo;\u9700\u8981\u4ec0\u4e48\uff0c\u4e0d\u65ad\u4fee\u6539\u96c6\u8bad\u624b\u518c\u7684\u5185\u5bb9\uff0c\u5e76\u8bbe\u60f3\u7740\u96c6\u8bad\u7684\u8ba1\u5212\uff0c\u4e0d\u662f\u67af\u71e5\u7684\u65e5\u590d\u4e00\u65e5\u7684\u6bd4\u8d5b\u7ec3\u4e60\uff0c\u8981\u5206\u7ec4\uff0c\u8981\u8bb2\u89e3\uff0c\u8981\u51cf\u5c11\u8ba9\u65b0\u4eba\u63aa\u624b\u4e0d\u53ca\u7684\u6bd4\u8d5b\u9891\u7387\uff0c\u8fd8\u4e0d\u80fd\u672c\u672b\u5012\u7f6e\uff0c\u628a\u63e1\u597d\u5ea6\u3002</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad\u70ed\u70ed\u95f9\u95f9\u5730\u5f00\u59cb\u4e86\uff0c\u5bf9\u4e8eBMW\u4e09\u4eba\u7ec4\u6765\u8bf4\uff0c\u6bcf\u5929\u7684\u751f\u6d3b\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u5b89\u6392\u597d\u65b0\u4eba\u7684\u8bad\u7ec3\u4efb\u52a1\uff0c\u542c&ldquo;\u534a\u65b0\u4eba&rdquo;\u7ed9\u65b0\u4eba\u8bb2\u89e3\u81ea\u5df1\u4e13\u95e8\u5b66\u4e60\u7684\u7279\u5b9a\u7b97\u6cd5\uff0c\u505a\u7ec3\u4e60\u6216\u9636\u6bb5\u6027\u7684\u6bd4\u8d5b\uff0c\u4e2d\u5348\u53eb\u4e2a&ldquo;\u5c0f\u53a8\u623f&rdquo;\u7684\u5916\u5356\uff0c\u665a\u4e0a\u4e00\u8d77\u53bb&ldquo;\u6e58\u53a8\u5bb6\u83dc\u9986&rdquo;\u70b9\u4e2a\u9999\u83c7\u7092\u8089\uff0c\u8304\u5b50\u7092\u86cb\uff0c\u7b80\u5355\u3001\u5fd9\u788c\u3001\u5145\u5b9e\u3002</div>\n<div>&nbsp;</div>\n<div>\u6691\u5047\u957f\u6c99\u7684\u5929\u548c10\u5e74\u300111\u5e74\u4e00\u6837\uff0c\u5f88\u84dd\uff0c\u8fd8\u6709\u5f88\u5927\u5f88\u5927\u5757\u7684\u767d\u4e91\uff0c\u5f88\u7f8e\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u5c0f\u82cf\u7ed9\u96c6\u8bad\u5236\u4f5c\u4e86\u5c40\u57df\u7f51\u5185\u7684\u96c6\u8bad\u4e3b\u9875\uff0c\u8ba9\u961f\u5458\u4eec\u53ef\u4ee5\u67e5\u770b\u5f53\u5929\u7684\u4efb\u52a1\uff0c\u4e0b\u8f7d\u4e0d\u65ad\u66f4\u65b0\u7684\u7b97\u6cd5\u5b66\u4e60\u6587\u6863\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u642d\u5efa\u4e86\u534e\u79d1\u5927\u795eIsun\u5236\u4f5c\u7684\u5f00\u6e90\u9879\u76eeVirtualJudge\uff0c\u53ef\u4ee5\u4ece\u4e0d\u540c\u7684OJ\u6293\u53d6\u9898\u76ee\u653e\u5728\u4e00\u8d77\u505a\uff0c\u8fd8\u53ef\u4ee5\u628a\u67d0\u573a\u6bd4\u8d5b\u7684Ranklist\u5bfc\u5165\u7cfb\u7edf\uff0c\u56e0\u4e3aRanklist\u5e26\u6709\u6bcf\u4e2a\u961f\u4f0d\u505a\u51fa\u67d0\u4e2a\u9898\u76ee\u7684\u65f6\u95f4\uff0c\u5229\u7528\u8fd9\u4e2a\u53ef\u4ee5\u628aRanklist\u53d8\u6210\u4e00\u4e2a\u6bd4\u8d5b\u52a8\u6001Ranklist\u57285\u4e2a\u5c0f\u65f6\u4e2d\u53d8\u5316\u7684&ldquo;\u5f55\u50cf&rdquo;\uff0c\u628a\u81ea\u5df1\u8bad\u7ec3\u65f6\u5019\u505a\u7684\u6bd4\u8d5b\u7684Ranklist\u4e0e&ldquo;\u5f55\u50cf&rdquo;\u7ed3\u5408\uff0c\u5c31\u4eff\u4f5b\u548c\u5f53\u5e74\u6bd4\u8d5b\u7684\u961f\u4f0d\u540c\u53f0\u7ade\u6280\u3002</div>\n<div>&nbsp;</div>\n<div>\u96c6\u8bad\u5feb\u7ed3\u675f\u7684\u67d0\u6b21\u8bad\u7ec3\u8d5b\uff0c\u7528VirtualJudge\uff0c\u6a21\u62df\u4e86\u7f57\u795e\u5f53\u5e74\u79bbFinal\u4e00\u6b65\u4e4b\u9065\u7684\u6bd4\u8d5b\u3002\u4ece\u59cb\u81f3\u7ec8BMW\u4e00\u76f4\u7d27\u6328\u7740\u7f57\u795e\u961f\u4f0d\u7684\u4e0b\u9762\u4e00\u540d\u3002\u800c\u6700\u540e\u65f6\u523b\uff0cBMW\u9009\u62e9\u4e86\u548c\u7f57\u795e\u5f53\u65f6\u505a\u7684\u4e0d\u540c\u7684\u53e6\u4e00\u9053\u9898\u76ee\uff0c\u662f\u4e2a\u8ba1\u7b97\u51e0\u4f55\u3002\u90ed\u5c0f\u4fa0\u5b8c\u6210\u4e86\u8fd9\u9053\u9898\u76ee\uff0c\u7136\u800c\u6bd4\u8f83\u65e0\u8bed\u7684\u662f\u5728HOJ\u63d0\u4ea4\u662fWA\uff0c\u4f46\u53bbUVA\uff08\u897f\u73ed\u7259\u7684\u8457\u540dOJ\uff0c\u4e0eICPC\u5408\u4f5c\u4f5c\u4e3aACM\u6bd4\u8d5b\u7684\u9898\u76ee\u5b58\u6863OJ\uff09\u63d0\u4ea4\u5c31\u6b63\u786e\u4e86\u3002&ldquo;\u6807\u7a0b\u6ca1\u52a0eps\uff0cOJ\u53c8\u4e0d\u7ed9Special Judge\uff0c\u5751\u7239&rdquo;\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011eps\u662f\u6307\u4e00\u4e2a\u5f88\u5c0f\u768410^(-6~-12)\u7684\u5c0f\u6570\uff0c\u7528\u4e8e\u4fee\u6b63double\u7684\u6d6e\u70b9\u7cbe\u5ea6\u3002SpecialJudge\u662fOJ\u4e2d\u7528\u6765\u901a\u8fc7\u53e6\u5916\u4e00\u4e2a\u7a0b\u5e8f\u89e3\u51b3\u95ee\u9898\u7684\u591a\u89e3\u95ee\u9898\uff0c\u800c\u4e0d\u9700\u8981\u4eba\u5de5\u5e72\u9884\uff0c\u6bd4\u5982\u62d3\u6251\u6392\u5e8f\uff0c\u6bd4\u5982\u53ef\u627f\u53d7double\u7cbe\u5ea6\u8303\u56f4\u3002</div>\n<div>&nbsp;</div>\n<div>\u81f3\u5c11\u8fd9\u7ed9\u4e86\u90ed\u5c0f\u4fa0\u4e0d\u5c11\u4fe1\u5fc3\uff0c\u90ed\u5c0f\u4fa0+\u5c0f\u658c\u658c+\u5c0f\u5c0f\u82cf\u7684\u961f\u4f0d\uff0c\u4e0d\u5f31\u4e8e\u7f57\u795e+\u6728\u5357+\u59da\u603b \u5f53\u5e74\u3002</div>\n<div>&nbsp;</div>\n<div>\u6821\u961f\u9009\u62d4\u8d5b</div>\n<div>&nbsp;</div>\n<div>\u6821\u961f\u9009\u62d4\u8d5b\u4ece\u6ca1\u6709\u8fc7\uff0c\u5f80\u5e74\u96c6\u8bad\u90fd\u662f\u6839\u636e\u5e73\u65f6\u9891\u7e41\u7684\u6bd4\u8d5b\u8fdb\u884c\u7efc\u5408\u53c2\u8003\u800c\u6307\u5b9a\u540d\u5355\u3002\u6709\u538b\u529b\u624d\u6709\u52a8\u529b\uff0c\u51ed\u5b9e\u529b\u8bf4\u8bdd\u624d\u5e94\u8be5\u662f\u9009\u62d4\u6821\u961f\u7684\u6807\u51c6\uff0c\u90ed\u5c0f\u4fa0\u5728\u96c6\u8bad\u4e00\u5f00\u59cb\u5c31\u544a\u8bc9\u5927\u5bb6\uff0c\u6821\u961f\u8981\u7528\u6bd4\u8d5b\u6765\u9009\u3002\u5f53\u7136\u96c6\u8bad\u671f\u95f4\u8fd8\u662f\u8fdb\u884c\u4e86\u82e5\u5e72\u6b21\u6bd4\u8d5b\u4f5c\u4e3a\u4e00\u5b9a\u7684\u53c2\u8003\u3002\u4e3a\u4e86\u907f\u514d\u5076\u7136\u6027\uff0c\u6700\u540e\u7684\u9009\u62d4\u8d5b\u8fdb\u884c\u4e24\u573a\uff0c\u53d6\u6bcf\u573a\u524d10\u540d\uff0c\u7b2c\u4e00\u573a\u524d10\u5728\u7b2c\u4e8c\u573a\u4e0d\u8ba1\u6392\u540d\uff0c\u4e14\u4e24\u573a\u4ece\u59cb\u81f3\u7ec8\u5c01\u699c\uff0c\u7b2c\u4e8c\u573a\u7ed3\u675f\u516c\u5e03\u7ed3\u679c\u3002\u8003\u9a8c\u7684\u4e0d\u6b62\u662f\u6c34\u5e73\uff0c\u8fd8\u6709\u5fc3\u6001\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e00\u5e74\u6765ACM\u534f\u4f1a\u5404\u9879\u5de5\u4f5c\u7684\u5c55\u5f00\u6709\u4e86\u663e\u8457\u7684\u6536\u6548&mdash;&mdash;\u6821\u961f\u5e73\u5747\u5e74\u9f84\u964d\u4f4e\uff0c\u5e73\u5747\u6c34\u5e73\u63d0\u9ad8\u3002\u81f3\u5c11\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u8fd9\u4e00\u5e74\u521a\u9009\u51fa\u7684\u6821\u961f\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u5199\u7ebf\u6bb5\u6811&hellip;&hellip;\uff08\u5f80\u5e74\u662f\u505a\u4e0d\u5230\u7684\uff0c\u6bd4\u5982\u5f53\u5e74\u4e8c\u53c9\u6811\u90fd\u4e0d\u4f1a\u7684\u90ed\u5c0f\u4fa0\uff09</div>\n<div>&nbsp;</div>\n<div>\u7701\u8d5b</div>\n<div>&nbsp;</div>\n<div>\u6309\u7167\u7701\u8d5b\u7684\u89c4\u5b9a\uff0c\u7814\u4e00\u7684\u90ed\u5c0f\u4fa0\u662f\u4e0d\u80fd\u4eb2\u81ea\u53c2\u8d5b\u4e86\u3002\u65f6\u95f4\u5728\u56fd\u5e86\u8282\u4e4b\u540e\uff0c\u4e8e\u662f\u90ed\u5c0f\u4fa0\u4e3a\u961f\u5458\u4eec\u51c6\u5907\u4e86\u5145\u5b9e\u7684&ldquo;\u56fd\u5e86\u4e03\u5929\u4e50&rdquo;\u3002\u6309\u7167\u7701\u8d5b\u8001\u4eba\u5e26\u65b0\u4eba\u7684\u4f20\u7edf\uff0c\u5c0f\u658c\u658c\u3001\u5c0f\u5c0f\u82cf\u3001\u7f57\u5927\u53d4\u3001\u5efa\u519b\u5206\u522b\u9886\u8854\u56db\u652f\u961f\u4f0d\u3002\u90ed\u5c0f\u4fa0\u4ece\u5404\u5904\u627e\u6765\u5176\u4ed6\u7701\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u7684\u9898\u76ee\u3001\u6570\u636e\u3001\u9898\u89e3\uff0c\u5b8c\u5168\u6a21\u62df\u7701\u8d5b\u7684\u73af\u5883\uff08\u7701\u8d5b\u7528PC^2\uff0c\u5e74\u8f7b\u961f\u5458\u6ca1\u4ec0\u4e48\u6bd4\u8d5b\u7ecf\u5386\uff0c\u57fa\u672c\u4e0a\u53ea\u77e5\u9053OJ\uff09\uff0c\u4e03\u5929\u6bcf\u5929\u4e00\u573a\u6807\u51c6\u65f6\u95f4\u7684\u6bd4\u8d5b\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u658c\u658c\u548c\u5c0f\u5c0f\u82cf\u6bcf\u5929\u8bad\u7ec3\u4e4b\u4f59\u8981\u505a\u4e00\u4ef6\u4e8b\uff0c\u5c31\u662f\u8981\u770b\u4e2a\u4e00\u4e24\u96c6\u7684\u300a\u8f69\u8f95\u5251\u300b\uff08\u80e1\u6b4c\u90a3\u4e2a\uff09\uff0c\u8fd9\u5bfc\u81f4\u7684\u7ed3\u679c\u662f\uff0c\u7701\u8d5b\u4e2d\u5357\u56db\u652f\u4ee3\u8868\u961f\u7684\u540d\u5b57\u662f&mdash;&mdash;\u76d8\u53e4\u65a7\u3001\u5973\u5a32\u77f3\u3001\u795e\u519c\u9f0e\u3001\u4f0f\u7fb2\u7434\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u610f\u6599\u4e4b\u4e2d\uff1f\u610f\u6599\u4e4b\u5916\uff1f\u5efa\u519b\u8fd9\u8fb9\u5dee\u4e00\u70b9\u70b9\uff0c\u62ff\u4e86\u4e8c\u7b49\u5956\u7684\u7b2c\u4e00\u540d\uff0c\u4e8e\u662f2012\u5e74\u6e56\u5357\u7701\u7b2c\u516b\u5c4a\"\u84dd\u72d0\u676f\"\u5927\u5b66\u751f\u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\uff0c\u4e2d\u5357\u5927\u5b66\u62ff\u4e86\u4e09\u4e2a\u4e00\u7b49\u5956\uff0c\u4e00\u4e2a\u4e8c\u7b49\u5956\uff0c\u7b2c\u4e00\u6b21\u3010\u56e2\u4f53\u7b2c\u4e00\u3011\uff01</div>\n<div>&nbsp;</div>\n<div>\u665a\u4e0a\u5efa\u519b\u7684<span id=\"13KSFindDIV\" class=\"KSFIND_CLASS\">Q</span><span id=\"14KSFindDIV\" class=\"KSFIND_CLASS\">Q</span>\u7b7e\u540d\u6539\u6210\u4e86&ldquo;\u8fd9\u90fd\u662f\u547d\u554a\uff01&rdquo;\uff0c\u6709\u4e9b\u9057\u61be\u548c\u5fc3\u9178\u3002\u5efa\u519b\u5df2\u7ecf\u6210\u7ee9\u4fdd\u7814\u5916\u6821\uff0c\u8fd9\u53e5\u8bdd\u662f\u771f\u5fc3\u7684\u5bf9\u4e8eACM\u7684\u9057\u61be\u3002</div>\n<div>&nbsp;</div>\n<div>\u7f57\u5927\u53d4\u7684\u4fdd\u7814\u5927\u4e1a\u8fd8\u5728\u574e\u5777\u4e4b\u4e2d\u30022012\u5e74\u4e2d\u5357\u53d6\u6d88\u4e86\u5bf9\u5b66\u79d1\u7ade\u8d5b\u7701\u4e00\u76f4\u63a5\u4fdd\u7814\u7684\u653f\u7b56\uff0c\u800c\u5927\u53d4\u7684\u8bfe\u7a0b\u6210\u7ee9\u8fd8\u6ca1\u6709\u8fdb\u5165\u5e74\u7ea730%\uff0c\u60f3\u4fdd\u7814\uff0c\u8fd8\u8981\u533a\u57df\u8d5b\u7684\u94f6\u5956\u4ee5\u4e0a\u3002</div>\n<div>&nbsp;</div>\n<div>\u533a\u57df\u8d5b</div>\n<div>&nbsp;</div>\n<div>BMW\u4e09\u4e2a\u4eba\u9664\u4e86\u6253\u4e86\u4e24\u5e74\u9171\u6cb9\u7684\u90ed\u5c0f\u4fa0\uff0c\u5c0f\u658c\u658c\u548c\u5c0f\u5c0f\u82cf\u5176\u5b9e\u63a5\u89e6ACM\u7684\u65f6\u95f4\u5e76\u4e0d\u7b97\u4e45\uff0c\u518d\u597d\u7684\u5929\u5206\u548c\u52aa\u529b\u4e5f\u7ec8\u7a76\u53d7\u5230\u65f6\u95f4\u7684\u9650\u5236\uff0c\u4e3a\u5907\u6218\u533a\u57df\u8d5b\uff0c\u4e0d\u5f97\u4e0d\u660e\u786e\u5206\u5de5\u53bb\u5b66\u4e60\u7b97\u6cd5\u3002\u4e8e\u662f\u90ed\u5c0f\u4fa0\u6691\u671f\u96c6\u8bad\u8fdb\u884c\u4e00\u534a\u4e4b\u540e\u5c31\u5f00\u59cb\u4e13\u653b\u8ba1\u7b97\u51e0\u4f55\u4e86\uff0c\u5c0f\u658c\u658c\u4e13\u641e&ldquo;\u51b7\u95e8&rdquo;\u7b97\u6cd5\uff08\u5176\u5b9e\u4e0d\u51b7\u95e8\uff0c\u751a\u81f3\u5f88\u70ed\u95e8\uff0c\u53ea\u662f\u5bf9\u4e8e\u4e2d\u5357\u8fd9\u6837\u7684ACM\u5f31\u6821\uff0csplay\u3001dancinglinks\u8fd9\u6837\u7684\u4e1c\u897f\u57fa\u672c\u90fd\u662f&ldquo;\u5927\u540e\u671f&rdquo;\uff09\uff0c\u5c0f\u5c0f\u82cf\u5219\u641e\u56fe\u8bba\u548c\u52a8\u6001\u89c4\u5212\uff08\u5c0f\u5c0f\u82cf\u7167\u7740\u8d75\u6559\u535a\u5ba2\u7684\u56fe\u8bba\u5217\u8868\u505a\u4e86\u4e2a\u904d\uff0c\u53c8\u5b66\u4e60\u4e86\u5404\u79cd\u5947\u8469\u56fe\u8bba\u9898\uff0c\u8d85\u8d8a\u5f53\u5e74\u7684\u8d75\u6559\u8fd8\u662f\u5e94\u8be5\u80fd\u505a\u5230\u7684\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>\u6309\u7167\u4f20\u7edf\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5f53\u5e74\u7684\u6210\u7ee9\uff0c\u4e00\u961f\u4e00\u822c\u4f1a\u53bb\u4e24\u4e2a\u8d5b\u533a\u3002\u5c0f\u5c0f\u82cf\u7684\u5973\u670b\u53cb\u5728\u676d\u5dde\u4e0a\u5b66\uff0c\u5c0f\u658c\u658c\u7684\u5973\u670b\u53cb\u5728\u5317\u4eac\uff0c\u521a\u597d\u4e5f\u4e3a\u4e86\u4e24\u573a\u533a\u57df\u8d5b\u4e4b\u95f4\u80fd\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u4e8e\u662f\u9009\u62e9\u4e86\u4e2d\u95f4\u9694\u7740\u91d1\u534e\u8d5b\u533a\u7684 &nbsp;\u5929\u6d25\u8d5b\u533a \u548c \u676d\u5dde\u8d5b\u533a\u3002</div>\n<div>&nbsp;</div>\n<div>\u5929\u6d25</div>\n<div>&nbsp;</div>\n<div>\u5929\u6d25\u8d5b\u533a\u4e89\u53d6\u5230\u4e86\u4e24\u652f\u961f\u4f0d\u7684\u540d\u989d\uff0c\u4e8e\u662f\u90ed\u5c0f\u4fa0\u3001\u7f57\u5927\u53d4\u4e00\u884c\u516d\u4eba\u5f00\u8d74\u5929\u6d25\u3002</div>\n<div>&nbsp;</div>\n<div>\u706b\u8f66\u4e0a\u5927\u5bb6\u4e5f\u8c08\u8bba\u7740OJ\u8981\u4e0d\u8981\u81ea\u5df1\u5f00\u53d1\u4e00\u4e2a\uff0c\u90ed\u5c0f\u4fa0\u8fd8\u60f3\u7528PHP\uff0c\u5c0f\u5c0f\u82cf\u8bf4\u7528java\uff0c\u7f57\u5927\u53d4\u8bf4\u7528C++\uff08C++\u505a\u7f51\u7ad9\u3002\u3002\u6709\u5012\u662f\u6709\uff0c\u6548\u7387\u8fd8\u6bd4PHP\u9ad8\uff0c\u90ed\u5c0f\u4fa0\u4e0d\u5f97\u4e0d\u518d\u819c\u62dc\u4e00\u4e0b\u7f57\u5927\u53d4\uff09\u3002\u53c8\u8c08\u5230\u6765\u5e74\u6821\u8d5b\u51fa\u9898\uff0c\u90ed\u5c0f\u4fa0\u8bf4\uff0c\u54b1\u5c31\u51fa\u4e2a\u9ebb\u70e6\u70b9\u7684\u8ba1\u7b97\u51e0\u4f55\uff0c\u641e\u4e2a\u4e09\u7ef4\u51f8\u5305\uff0c\u95ee\u600e\u4e48\u653e\u5e73\u5730\u4e0a\u9ad8\u5ea6\u6700\u5c0f\uff0cbalabalabala\u3002\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u5929\u6d25\u8d5b\u533a\u7684\u70ed\u8eab\u8d5b\uff0c\u90ed\u5c0f\u4fa0\u53bb\u53c2\u52a0\u6559\u7ec3\u4f1a\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011\u961f\u5458\u53c2\u52a0\u6559\u7ec3\u4f1a\u548c\u6559\u7ec3\u665a\u5bb4\u4e5f\u7b97\u4e2d\u5357\u7684\u4f20\u7edf\u4e86\uff0c\u9648\u8001\u5e08\u4e3a\u4e86\u8282\u7ea6\u7ecf\u8d39\uff0c\u5c3d\u91cf\u8ba9\u6821\u961f\u80fd\u591a\u53c2\u52a0\u4e00\u4e2a\u8d5b\u533a\uff0c\u9648\u8001\u5e08\u6ca1\u6709\u53c2\u52a0\u4efb\u4f55\u4e00\u573a&ldquo;\u514d\u8d39\u65c5\u6e38&rdquo;\uff0c\u6bd4\u8d5b\u90fd\u662f\u961f\u5458\u81ea\u5df1\u53bb\uff0c\u961f\u957f\u8d1f\u8d23\u5904\u7406\u9700\u8981\u6559\u7ec3\u7684\u76f8\u5173\u4e8b\u5b9c\uff0c\u5404\u8d5b\u533a\u9001\u7684\u6559\u7ec3\u793c\u54c1\u9648\u8001\u5e08\u4e5f\u4e00\u822c\u8ba9\u961f\u5458\u4eec\u81ea\u5df1\u5206\u4e86\uff08\u91d1\u534e\u7684\u706b\u817f\uff0c\u5929\u6d25\u7684\u9ebb\u82b1&hellip;&hellip;\uff09\u3002</div>\n<div>&nbsp;</div>\n<div>\u6559\u7ec3\u4f1a\u5b8c\uff0c\u70ed\u8eab\u8d5b\u6ca1\u7ed3\u675f\uff0c\u90ed\u5c0f\u4fa0\u4e5f\u8d76\u8fc7\u6765\u51d1\u4e00\u4e0b\u70ed\u95f9\uff0c\u4ee5\u6821\u961f\u7b2c\u4e00\u9ad8\u7684\u6c34\u9898\u901a\u8fc7\u7387\u679c\u65ad\u5207\u6389\u4e00\u9053\u6c34\u9898\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u6ca1\u60f3\u5230\u778e\u641e\u4e00\u901a\uff0c\u70ed\u8eab\u8d5b\u62ff\u4e86\u4e2a\u7b2c\u4e09\u540d\u3002\u4e5f\u7b97\u4e2a\u597d\u5f69\u5934\u5427\u3002</div>\n<div>&nbsp;</div>\n<div>\u7b2c\u4e8c\u5929\u6b63\u8d5b\uff0c\u4e00\u5f00\u573a\u5c0f\u658c\u658c\u679c\u65ad\u6572\u8d77\u4ee3\u7801\uff0c\u4ea4\u4e86\u4e00\u6b21\u9519\u8bef\u4e4b\u540e\u8d76\u7d27\u8c03\u6574\u9a6c\u4e0a\u5c31\u901a\u8fc7\u4e86\uff0c\u90ed\u5c0f\u4fa0\u4e00\u770b\u9898\uff0c\u4e0d\u7528\u89e3\u91ca\u4e5f\u660e\u767d\u4e86\uff0c\u7b2c\u4e00\u9898\u662f\u5224\u65ad\u9ebb\u5c06\u662f\u5426\u80e1\u724c\uff0c\u8fd9\u5c0f\u5c0f\u82cf\u548c\u5c0f\u658c\u658c\u53ef\u662f\u68cb\u724c\u9ad8\u624b\u3002\u540c\u573a\u7684 \u671d\u9c9c\u91d1\u65e5\u6210\u7efc\u5408\u5927\u5b66\u4ee3\u8868\u961f\u636e\u8bf4\u4e0d\u4f1a\u73a9\u9ebb\u5c06\uff0c\u7b2c\u4e00\u9898\u7ea0\u7ed3\u5230\u4e0b\u534a\u573a\u3002</div>\n<div>&nbsp;</div>\n<div>\u7d27\u63a5\u7740\u90ed\u5c0f\u4fa0\u7684\u6c34\u98981Y\u7387\u4e0d\u662f\u76d6\u7684\uff0c\u4e24\u9053\u6c34\u9898\u8f7b\u677e\u901a\u8fc7\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011\u6c34\u9898\u987a\u5229\u901a\u8fc7\u5bf9\u961f\u4f0d\u7684\u9f13\u52b1\u6027\u662f\u5f88\u5927\u7684\u3002ACM\u8d5b\u573a\u4e0a\u4e00\u4e9b\u4e0d\u5f31\u7684\u961f\u4f0d\u56e0\u4e3a\u6c34\u9898\u5361\u5f88\u4e45\u800c\u4e25\u91cd\u5f71\u54cd\u6210\u7ee9\u7684\u6848\u4f8b\u5c61\u89c1\u4e0d\u9c9c\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u5c0f\u82cf\u641e\u7740DP\uff0c\u548c\u5c0f\u658c\u658c\u8ba8\u8bba\u7740\u4e00\u4e2a\u56fe\u8bba\uff0c\u90ed\u5c0f\u4fa0\u53d1\u73b0\u4e86\u8ba1\u7b97\u51e0\u4f55\u9898\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e2a\u8ba1\u7b97\u51e0\u4f55\u9898\u5176\u5b9e\u66f4\u7b97\u662f\u4e00\u4e2a\u9ad8\u4e2d\u51e0\u4f55\u9898\uff0c\u90ed\u5c0f\u4fa0\u660e\u660e\u77e5\u9053\u7ed3\u679c\u5e94\u8be5\u662f\u7b97\u4e00\u4e2a\u89d2\u5ea6\u8303\u56f4\u7684\u533a\u95f4\u8986\u76d6\uff0c\u4f46\u5c31\u662f\u8111\u888b\u8ff7\u7cca\u603b\u662f\u60f3\u9519\u90a3\u4e2a\u89d2\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u5c0f\u82cf\u7684DP\u548c\u90a3\u9053\u56fe\u8bba\u5361\u4e86\u633a\u4e45\uff0c\u5feb\u8981\u6700\u540e\u4e00\u5c0f\u65f6\u7684\u65f6\u5019\u90ed\u5c0f\u4fa0\u968f\u4fbf\u7f16\u4e86\u70b9\u6570\u636e\uff0c\u5c0f\u82cf\u82cf\u53d1\u73b0\u4e86DP\u9898\u4ee3\u7801\u7684\u95ee\u9898\uff0c\u7adf\u7136\u662f\u4e00\u53e5\u4e0b\u6807\u6807\u53cd\u4e86\uff0cDP\u9898\u901a\u8fc7\u3002\u5c0f\u658c\u658c\u4e5f\u7a81\u7136\u7075\u611f\u7206\u68da\uff0c\u628a\u62ff\u5230\u56fe\u8bba\u5237\u6389\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u65f6\u5019\u90ed\u5c0f\u4fa0\u7684\u8ba1\u7b97\u51e0\u4f55\u4ee3\u7801\u5df2\u7ecf\u6210\u578b\uff0c\u4f46\u8fd8\u662f\u8111\u888b\u8ff7\u7cca\u7ea0\u7ed3\u90a3\u4e2a\u89d2\u5ea6\u600e\u4e48\u56de\u4e8b\u3002\u5c0f\u658c\u658c\u548c\u5c0f\u5c0f\u82cf\u7ee7\u7eed\u8bfb\u9898\uff0c\u53d1\u73b0\u53e6\u4e00\u4e2a\u56fe\u8bba\u9898\uff0c\u5c0f\u5c0f\u82cf\u77e5\u9053\u6a21\u578b\u662f\u4ec0\u4e48\uff0c\u4e5f\u77e5\u9053\u8fd9\u4e2a\u9898&hellip;&hellip;\u80af\u5b9a\u505a\u4e0d\u51fa\u6765\u3002\u800c\u5c0f\u658c\u658c\u4e00\u58f0\u60ca\u559c\uff0c\u60f3\u901a\u4e86\u4e00\u9053\u9898\u7684\u6a21\u578b\uff0c\u5c31\u662f\u9648\u7acb\u6770\u5927\u795e\u5728\u6c5f\u6e56\u4e2d\u6d41\u4f20\u7684\u540e\u7f00\u81ea\u52a8\u673a\uff01\u6bd4\u8d5b\u524d\u5c0f\u658c\u658c\u521a\u597d\u51c6\u5907\u4e86\u4efd\u6a21\u7248\uff0c\u914d\u5408\u7740\u5c0f\u5c0f\u82cf\u7684\u6570\u636e\uff0c\u628a\u8fd9\u9053\u51b3\u5b9a\u91d1\u724c\u7684\u96be\u9898\u5207\u6389\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011\u9648\u7acb\u6770&mdash;&mdash;\u9ad8\u4e8c\u5b66\u751f\uff0ccodeforces\u5168\u7403\u6392\u540d\u7b2c\u4e94\uff0c\u5165\u9009\u56fd\u5bb6<span id=\"18KSFindDIV\" class=\"KSFIND_CLASS\">OI</span>\u96c6\u8bad\u961f\uff0c\u53d1\u660e\u540e\u7f00\u81ea\u52a8\u673a\u3002\u53ef\u80fd\u662f\u56e0\u4e3acodeforces\u7684\u6392\u540d\uff0c\u9ad8\u4e09\u610f\u5916\u5f97\u5230google\u603b\u90e8\u7684offer\u3002</div>\n<div>&nbsp;</div>\n<div>\u5386\u53f2\u60ca\u4eba\u7684\u76f8\u4f3c\uff0c\u6700\u540e\u534a\u5c0f\u65f6\uff0c\u4ee3\u7801\u5df2\u6210\u578b\uff0c\u8fd9\u9053\u51e0\u4f55\u9898\u901a\u8fc7\uff0c\u5c31\u662fWordFinal\u7684\u5165\u573a\u5238\u3002\u90ed\u5c0f\u4fa0\u8c03\u8bd5\u7740\u4ee3\u7801\uff0c\u660e\u660e\u5fc3\u91cc\u5c31\u662f\u90a3\u4e48\u6e05\u695a\u9898\u76ee\u7684\u6a21\u578b\uff0c\u63d0\u4ea4\u5c31\u662f\u90a3\u4e48\u4ee4\u4eba\u75db\u82e6\u7684Wrong Answer\u3002\u5012\u8ba1\u65f6\u3002\u3002\u3002\u6bd4\u8d5b\u7ed3\u675f\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u658c\u658c\u7684\u5c0f\u5973\u53cb\u7a81\u7136\u5192\u4e86\u51fa\u6765\u3002\u5443\uff0c\u8fd9\u5de5\u4f5c\u4eba\u5458\u8ba9\u8fdb\u7684\uff1f\u3002\u3002\u3002\u65e0\u6240\u8c13\u4e86\uff0c\u53cd\u6b63\u6bd4\u8d5b\u7ed3\u675f\u4e86\uff0c\u540e\u9762\u8fd8\u6709\u676d\u5dde\u8d5b\u533a\u3002</div>\n<div>&nbsp;</div>\n<div>\u665a\u4e0a\u9881\u5956\u524d\uff0c\u5fd7\u613f\u8005\u544a\u8bc9\u90ed\u5c0f\u4fa0\u770b\u5230\u4e86\u6700\u7ec8\u7ed3\u679c\uff0c\u662f\u91d1\u5956\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3002\u3002\u3002\u8fd9\u4e2a\u8fd8\u8981\u4e0d\u8981\u63d2\u3011\u5fd7\u613f\u8005&mdash;&mdash;\u6bd4\u8d5b\u4e3b\u529e\u65b9\u5b89\u6392\u7684\u5b66\u751f\u4e3a\u53c2\u8d5b\u961f\u4f0d\u63d0\u4f9b\u54a8\u8be2\u548c\u5f15\u5bfc\u670d\u52a1\u3002</div>\n<div>&nbsp;</div>\n<div>\u662f\u91d1\u5956\u554a\uff0c\u5c0f\u658c\u658c\u4e00\u542c\u5230\uff0c\u4e00\u4e0b\u5b50\u62b1\u4f4f\u4e86\u90ed\u5c0f\u4fa0\u3002</div>\n<div>&nbsp;</div>\n<div>\u5b66\u6821\u6392\u540d\u7b2c\u4e03\uff0c\u91d1\u3002\u90ed\u5c0f\u4fa0\u7684\u5988\u5988\u53d1\u6765\u77ed\u4fe1\u95ee\u7ed3\u679c\uff0c\u90ed\u5c0f\u4fa0\u56de\u590d\u4ec5\u6709\u4e00\u4e2a\u5b57\uff0c&ldquo;\u91d1&rdquo;\uff0c\u8fd9\u6761\u77ed\u4fe1\u90ed\u5c0f\u4fa0\u7684\u5988\u5988\u5f88\u4e45\u90fd\u6ca1\u6709\u5220\u3002</div>\n<div>&nbsp;</div>\n<div>\u5b66\u6821\u6392\u540d\u7b2c\u4e03\uff0c\u5237\u65b0\u4e86\u4e2d\u5357ACM\u533a\u57df\u8d5b\u6210\u7ee9\u8bb0\u5f55\uff0c\u8de8\u5728\u4e86WordFinal\u8d44\u683c\u7684\u7ebf\u4e0a\uff0c\u4e00\u5207\u7686\u6709\u53ef\u80fd\u3002</div>\n<div>&nbsp;</div>\n<div>\u53e6\u4e00\u8fb9\u7684\u7f57\u5927\u53d4\u5f88\u9057\u61be\uff0c\u4e3a\u4e86\u7167\u987e\u7f57\u5927\u53d4\u4fdd\u7814\uff0c\u5b89\u6392\u53c2\u52a0\u4e86\u4e24\u573a\u533a\u57df\u8d5b\uff0c\u5230\u6b64\u4e3a\u6b62\u4e24\u94dc\uff0c\u7f57\u5927\u53d4\u4e5f\u8981\u8003\u7814\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\u56de\u5230\u957f\u6c99\uff0c\u5929\u6d25\u7684\u9898\u76ee\u5df2\u7ecf\u653e\u5728\u4e86\u676d\u7535OJ\u4e0a\uff0c\u90ed\u5c0f\u4fa0\u884c\u4e91\u6d41\u6c34\u5730\u6572\u5b8c\u4e86\u90a3\u9053\u51e0\u4f55\u9898\u7684\u4ee3\u7801\uff0c\u63d0\u4ea4\uff0cAccepted\uff01\u8279&hellip;&hellip;</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>\u91d1\u534e</div>\n<div>&nbsp;</div>\n<div>\u8fd8\u662f\u7528VirtualJudge\u7cfb\u7edf\uff0cBMW\u505a\u4e86\u4e00\u573a\u6a21\u62df\u6bd4\u8d5b\uff0c\u65b0\u961f\u5458\u5c0f\u5b87\u3001\u5c0f\u7426\u7b49\u51e0\u4e2a\u961f\u4f0d\u4e5f\u4e00\u8d77\u505a\u3002</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u770b\u5230\u4e86\u4ec0\u4e48\uff1f\u6211\u52d2\u4e2a\u53bb\uff0c\u8fd9\u4e0d\u662f\u53bb\u5929\u6d25\u706b\u8f66\u4e0a\u90ed\u5c0f\u4fa0\u6253\u7b97\u51fa\u7684\u9898\u4e48\uff01\u51f8\u591a\u9762\u4f53\u653e\u5730\u4e0a\u7684\u6700\u4f4e\u9ad8\u5ea6\uff0c\u6700\u5c0f\u9634\u5f71\u9762\u79ef&hellip;&hellip;\u8fd9\u8f88\u5b50\u6ca1\u89c1\u8fc7\u8fd9\u4e48\u5de7\u7684\u4e8b\u3002</div>\n<div>&nbsp;</div>\n<div>\u91d1\u534e\u7684\u9898\u505a\u7684\u5f88\u987a\uff0c\u65f6\u95f4\u5230\uff0cBMW\u8d6b\u7136\u51fa\u73b0\u5728\u6a21\u62dfRanklist\u4e0a\u7b2c\u4e09\u540d\u3002\u5c0f\u7426\u54ed\u7b11\u4e0d\u5f97\u7740\u8bf4&ldquo;\u8001\u5927\uff0c\u4f60\u4eec\u53bb\u91d1\u534e\u8d5b\u533a\u591a\u597d&rdquo;\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u7426\u662f\u90ed\u5c0f\u4fa0\u5728\u4e2d\u5357\u5927\u5b66\u8d34\u5427\u53d1\u73b0\u7684\uff0c\u90a3\u662f11\u5e74\u6691\u5047\uff0c\u90ed\u5c0f\u4fa0\u7684\u5988\u5988\u7a81\u7136\u558a\u90ed\u5c0f\u4fa0\uff0c\u8bf4\u8d34\u5427\u6709\u4e2a\u5c0f\u5b69\u53d1\u5e16\u627eACM\u961f\u53cb\u3002\u90ed\u5c0f\u4fa0\u5bf9\u8fd9\u79cd\u4e8b\u60c5\u662f\u5f88\u654f\u611f\u7684\uff0c\u4e2d\u5357ACM\u5f88\u7f3a\u8fd9\u4e48\u6709\u4e3b\u52a8\u6027\u7684\u5b69\u5b50\uff0c\u679c\u65ad\u627e\u5176\u52a0QQ\u79c1\u804a\u3002\u8fd9\u4e2a\u53d1\u5e16\u7684\u5b69\u5b50\u5c31\u662f11\u5e74\u5165\u5b66\u7684\u5c0f\u7426\uff0c\u505a\u8fc7N<span id=\"19KSFindDIV\" class=\"KSFIND_CLASS\">OI</span>P\uff0c\u7269\u7406\u9662\u300211\u5e74\u96c6\u8bad\u90ed\u5c0f\u4fa0\u5e26\u5c0f\u7426\u8ba4\u8bc6\u4e86\u4e00\u4e0b\u9648\u8001\u5e08\u548c\u6821\u961f\uff0c\u5c0f\u7426\u5f88\u767d\u5f88\u5e05\u5f88\u817c\u8146\u3002\u3002\u300212\u5e74\u8fdb\u5165\u6821\u961f\uff0c\u8bad\u7ec3\u5f88\u52aa\u529b\u3002</div>\n<div>&nbsp;</div>\n<div>\u8bad\u7ec3\u6bd5\u7adf\u662f\u8bad\u7ec3\uff0c\u548c\u6b63\u5f0f\u6bd4\u8d5b\u6709\u5f88\u5927\u4e0d\u540c\uff0c\u4e0d\u8fc7\u8fd9\u573a\u8bad\u7ec3\u786e\u5b9e\u53c8\u7ed9\u90ed\u5c0f\u4fa0\u589e\u6dfb\u4e86\u4e0d\u5c11\u4fe1\u5fc3\u3002</div>\n<div>&nbsp;</div>\n<div>\u676d\u5dde</div>\n<div>&nbsp;</div>\n<div>\u676d\u5dde\u7684\u6bd4\u8d5b\u7b80\u76f4\u662f\u4e00\u573a\u60e8\u5267\u3002\u5c0f\u5c0f\u82cf\u5f00\u573a\u5c31\u53d1\u73b0\u4e86\u51e0\u9053\u6c34\u9898\uff0c\u8fc5\u901f\u6572\u8d77\u6765\uff0c\u9519\u4e86\u82e5\u5e72\u6b21\uff0c\u4e0d\u8fc7\u597d\u6b79\u662f\u987a\u5229\u901a\u8fc7\u4e86\u3002\u90ed\u5c0f\u4fa0\u6ca1\u6c34\u9898\u505a\u4e86\uff0c\u4e0d\u8fc7\u60ca\u559c\u53d1\u73b0\u6709\u4e24\u9053\u8ba1\u7b97\u51e0\u4f55\uff0c\u4e00\u9053\u7b80\u5355\u7684\u987a\u5229\u901a\u8fc7\uff0c\u5dee\u70b9\u62ffFirstBlood\u3002\u53e6\u4e00\u9053\u590d\u6742\u4e9b\uff0c\u6362\u7740\u601d\u8def\u4ea4\u4e866\u6b21\u624d\u901a\u8fc7\uff0c\u4e0d\u8fc7\u8fd9\u9053\u9898\u5168\u573a\u6ca1\u51e0\u4e2a\u961f\u4f0d\u8fc7\u7684\uff0c\u770b\u5230YES\u90a3\u4e00\u523b\u9ad8\u5174\u5730\u53eb\u4e86\u4e00\u58f0\u3002\u5c0f\u658c\u658c\u7684Splay\u4e5f\u6709\u4e86\u7528\u6b66\u4e4b\u5730\uff0c\u4e5f\u662f\u4e00\u4e2a\u6ca1\u51e0\u4e2a\u961f\u4f0d\u901a\u8fc7\u7684\u9898\u76ee\u3002\u8fd9\u65f6\u5019\u867d\u7136\u548c\u6392\u540d\u9760\u524d\u7684\u8bb8\u591a\u961f\u4f0d\u4e00\u6837\u662f7\u9898\uff0c\u4f46\u662f\u65e0\u8bba\u662f\u8fdc\u5728\u957f\u6c99\u7684\u770b\u76f4\u64ad\u7684\u6821\u961f\u548c\u6559\u7ec3\uff0c\u8fd8\u662f\u73b0\u573a\u7684BMW\uff0c\u90fd\u770b\u5230\u4e86Final\u7684\u5e0c\u671b\uff0c\u56e0\u4e3a\u4e24\u9053\u5168\u573a\u8fc7\u4e86\u51e0\u5341\u4e2a\u961f\u4f0d\u7684\u9898\u76ee\uff0c\u8fd8\u6ca1\u505a\uff0c\u800c\u901a\u8fc7\u7684\u4e24\u9053\u9898\u76ee\uff0c\u901a\u8fc7\u7684\u961f\u4f0d\u5f88\u5c11\u3002</div>\n<div>&nbsp;</div>\n<div>\u3010\u5c0f\u63d2\u66f2\u3011FirstBlood&mdash;&mdash;\u5c31\u662fdota\u6216\u8005LOL\u7684\u4e00\u8840\uff0c\u7528\u5728\u4e86ACM\u7684\u6bd4\u8d5b\u4e2d\uff0c\u8868\u793a\u67d0\u9053\u9898\u5168\u573a\u7b2c\u4e00\u4e2a\u901a\u8fc7\uff0c2012\u5e74\u534e\u4e3a\u8d5e\u52a9\u56fd\u5185ACM\u8d5b\u4e8b\uff0c\u4e00\u8840\u961f\u4f0d\u6709800\u5143\u5956\u91d1\u3002</div>\n<div>&nbsp;</div>\n<div>\u9020\u5316\u5f04\u4eba\uff0c\u4e00\u9053\u662f\u80fd\u60f3\u51fa\u7684\u65b9\u6cd5\u8981\u5f004GB\u5185\u5b58\uff0c\u5929\u65b9\u591c\u8c2d\u53ea\u597d\u653e\u5f03\uff0c\u53e6\u4e00\u9053\u662f\u521a\u597d\u6ca1\u6709\u505a\u8fc7\u7684\u4e00\u4e2a\u6a21\u578b\uff0c\u6700\u540e\u534a\u5c0f\u65f6\u90ed\u5c0f\u4fa0\u548c\u5c0f\u658c\u658c\u624d\u8ba8\u8bba\u6e05\u695a\u601d\u8def\uff0c\u5c0f\u658c\u658c\u7ebf\u6bb5\u6811\u66f4\u719f\u7ec3\u4e9b\uff0c\u5c31\u5f00\u6572\u3002\u53ea\u8fc7\u8fd9\u4e00\u9898\uff0c\u662f\u8fdb\u4e0d\u4e86Final\u7684\uff0c\u4f46\u81f3\u5c11\u80fd\u591a\u4fdd\u4e00\u4e2a\u91d1\u5956\u3002\u6700\u540e5\u5206\u949f\uff0c\u6572\u5b8c\uff0c\u672c\u5730\u8fd0\u884cRE(RuntimeError\uff0c\u5185\u5b58\u6ea2\u51fa\u4e4b\u7c7b\u95ee\u9898\uff09\uff0c\u627e\u95ee\u9898\uff0c\u95ee\u9898\u5728\u54ea\uff0c\u8fd9\u4e48\u719f\u6089\u7684\u7ebf\u6bb5\u6811\u4e3a\u4ec0\u4e48\u4f1aRE\uff0c\u8c03\u8bd5\uff0cRE\uff0c\u8c03\u8bd5\uff0cRE&hellip;&hellip;5\uff0c4\uff0c3\uff0c2\uff0c1&hellip;&hellip;\u6bd4\u8d5b\u7ed3\u675f\u3002</div>\n<div>&nbsp;</div>\n<div>\u539f\u6765\u5c0f\u658c\u658c\u7684\u5973\u670b\u53cb\u4ece\u5317\u4eac\u8d76\u6765\u4e00\u76f4\u5750\u5728\u770b\u53f0\u4e0a\uff0c\u5c0f\u5c0f\u82cf\u7684\u5973\u670b\u53cb\u4e5f\u5728\u5916\u9762\u7b49\u7740\u3002\u6bd4\u8d5b\u7ed3\u675f\uff0c\u5931\u843d\u3002\u5c0f\u658c\u658c\u548c\u5c0f\u5c0f\u82cf\u5e26\u5973\u670b\u53cb\u6e38\u676d\u5dde\u53bb\u4e86\uff0c\u90ed\u5c0f\u4fa0\u8fd8\u8981\u5b8c\u6210\u6559\u7ec3\u7684\u5de5\u4f5c\uff0c\u53c2\u52a0\u9881\u5956\u5178\u793c\u3002</div>\n<div>&nbsp;</div>\n<div>\u4e24\u9053\u9898\u505a\u51fa\u6765\u5c31\u662f\u4e9a\u519b\uff0c\u6ca1\u505a\u51fa\u6765\u5c31\u662f&hellip;&hellip;\u94f6\u5956\u7684\u7b2c\u4e00\u540d\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>WordFinal\u53ea\u80fd\u6307\u671b\u5929\u6d25\u7684\u7b2c\u4e03\u540d\u4e86\uff0c\u5e0c\u671b\u8fd8\u5728\u3002</div>\n<div>&nbsp;</div>\n<div>09\u300110\u4e24\u5e74\u7684\u5927\u9646Final\u540d\u989d\u662f19\u4e2a\uff0c11\u5e74\u9aa4\u7136\u7f29\u51cf\u523016\u4e2a\u9020\u6210\u5927\u9646\u59d4\u5458\u4f1a\u7684\u6781\u5ea6\u4e0d\u6ee1\uff0c\u90a3\u5e74\u95f9\u5f97\u6cb8\u6cb8\u626c\u626c\u5f88\u4e0d\u6109\u5feb\u4f46\u6ca1\u6709\u6539\u53d8\u7ed3\u679c\u3002</div>\n<div>&nbsp;</div>\n<div>12\u5e74\u5927\u9646\u670922.5\u4e2aslot\uff08\u5173\u4e8eslot\u662f\u5426\u7b49\u4e8e\u540d\u989d\u6570\u8fd9\u4e2a\u95ee\u9898\u4e00\u76f4\u5b58\u5728\u5206\u6b67\uff0c\u6211\u4e5f\u4e0d\u592a\u660e\u767d\uff09\uff0c\u800c\u5927\u96465\u4e2a\u8d5b\u533a\u6392\u540d\u524d\u4e03\u7684\u5b66\u6821\u6b63\u662f19\u4e2a\uff0c\u6309\u7167\u5e74\u521d\u4e9a\u6d32ACM/ICPC\u4e3b\u5e2d\u5bf9\u5927\u9646\u59d4\u5458\u4f1a\u7684\u627f\u8bfa\uff0c\u4e2d\u5357\u5e94\u8be5\u80fd\u8fdbFinal\uff0c\u4f46\u662f\u771f\u6b63\u7ed3\u679c\u5982\u4f55\uff0c\u4f9d\u7136\u662f\u672a\u77e5\u6570\u3002</div>\n<div>&nbsp;</div>\n<div>\u534f\u4f1a</div>\n<div>&nbsp;</div>\n<div>\u5e74\u521d\uff0c\u90ed\u5c0f\u4fa0\u5df2\u628a\u534f\u4f1a\u4ea4\u7ed9\u4e86\u5c0f\u5b87\uff0c\u4f46\u4f9d\u7136\u4e3a\u534f\u4f1a\u7684\u5de5\u4f5c\u51fa\u8c0b\u5212\u7b56\u3002\u5c0f\u5b87\u6574\u7406\u4e86\u534f\u4f1a\u5de5\u4f5c\uff0c\u5e76\u5c064\u4e2a\u90e8\u95e8\u7cbe\u7b80\u4e3a3\u4e2a\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u6539\u53d8\uff0c\u90ed\u5c0f\u4fa0\u5f88\u9ad8\u5174\uff0c\u9ad8\u5174\u770b\u5230\u5c0f\u5b87\u7684\u884c\u52a8\u529b\uff0c\u548c\u534f\u4f1a\u5de5\u4f5c\u5206\u914d\u7684\u66f4\u5408\u7406\u5316\u3002</div>\n<div>&nbsp;</div>\n<div>\u5ba3\u8bb2\u4f1a\u3001\u77e5\u8bc6\u4e32\u8bb2\u3001\u65b0\u4eba\u8d5b\u7b49\u7b49\uff0c\u6709\u4e86\u4e00\u5e74\u6765\u5de5\u4f5c\u7684\u79ef\u7d2f\u548c\u4e13\u7528\u673a\u623f\u8fd9\u4e2a\u5927\u672c\u8425\uff0c\u5de5\u4f5c\u8fdb\u5c55\u7684\u66f4\u987a\u5229\uff0c\u6548\u679c\u4e5f\u66f4\u597d\u3002\u7f8e\u4e2d\u4e0d\u8db3\u7684\u662f\uff0c11\u5e74\u4e2d\u5357ACM\u7684\u4f4e\u8c37\uff0c\u4e5f\u8bb8\u5f71\u54cd\u4e86\u65b0\u4eba\u53c2\u4e0eACM\u7684\u4fe1\u5fc3\u3002</div>\n<div>&nbsp;</div>\n<div>\u65b0\u4eba\u7684\u79ef\u6781\u6027\u548c\u4e3b\u52a8\u6027\uff0c\u4f3c\u4e4e\u4e5f\u4e0d\u5982\u591a\u5e74\u4ee5\u524d\u3002\u6761\u4ef6\u597d\u4e86\uff0c\u4e3a\u4ec0\u4e48\u53cd\u800c\u4e0d\u61c2\u5f97\u73cd\u60dc\u4e86\uff1f\u6709\u65f6\u5019\u90ed\u5c0f\u4fa0\u4f1a\u628a\u8fd9\u79cd\u73b0\u8c61\u5f52\u7f6a\u4e8e\u73b0\u5728\u7684\u5b69\u5b50\u7684\u5a07\u8d35\u3002\u4f46\u5374\u4e5f\u4e00\u76f4\u627e\u4e0d\u5230\u7b54\u6848\u3002\u4e2d\u5357\u4e0d\u518d\u50cf\u591a\u5e74\u4ee5\u524d\u90a3\u4e2aACM\u6761\u4ef6\u5f88\u5dee\u5374\u82f1\u96c4\u8f88\u51fa\u7684\u65f6\u4ee3\uff0c\u50cf\u59da\u603b\u8d75\u6559\u4ed6\u4eec\u90a3\u6837\u575a\u6301\u3001\u52aa\u529b\u3001\u75af\u72c2\u7684\u961f\u5458\u8d8a\u6765\u8d8a\u5c11\u3002\u524d\u8f88\u4eec\u6068\u4e0d\u5f97\u7761\u5728\u673a\u623f\uff0c\u800c\u5982\u4eca\u6709\u4e86\u673a\u623f\uff0c\u575a\u6301\u6765\u8bad\u7ec3\u7684\u5374\u5be5\u5be5\u65e0\u51e0\u3002</div>\n<div>&nbsp;</div>\n<div>\u575a\u6301\u7684\u4eba\uff0c\u6709\uff0c\u50cf\u5c0f\u7426\uff0c\u5c0f\u5b89\uff0c\u5c0f\u5b87\u7b49\u7b49\uff0c\u53ef\u90ed\u5c0f\u4fa0\u89c9\u5f97\uff0c\u4ed8\u51fa\u4e86\u8fd9\u4e48\u591a\u52aa\u529b\uff0c\u4e2d\u5357\u6709\u4e86\u8fd9\u4e48\u597d\u6761\u4ef6\uff0c\u4e3a\u4ec0\u4e48\u5dee\u4e0d\u591a\u751f\u6e90\uff08\u6ca1\u4ec0\u4e48<span id=\"20KSFindDIV\" class=\"KSFIND_CLASS\">OI</span>\u9009\u624b\uff09\u7684\u7535\u5b50\u79d1\u5927\u4e00\u5e74\u80fd\u67096\u4e2a\u91d1\u724c\u961f\u4f0d\uff0c\u4e2d\u5357\u5374\u6ca1\u591a\u5c11\u4eba\u613f\u610f\u53bb\u4e3aACM\u594b\u6597\uff0c\u53bb\u75af\u72c2\uff1f\uff01</div>\n<div>&nbsp;</div>\n<div>\u3010\u8865\u5145\u3011\u676d\u5dde\u8d5b\u533a\u90a3\u4e2a&ldquo;4G\u5185\u5b58\u9898&rdquo;\u4e3a\u4ec0\u4e48\u653e\u5f03\u5462\u3002\u90a3\u9053\u9898\u6700\u76f4\u89c2\u7684\u601d\u8def\u662f\u5c06\u5750\u6807\u65cb\u8f6c45\u5ea6\u540e\u7528\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u7edf\u8ba1\uff0c\u4f46\u6570\u636e\u91cf\u5f88\u5927\uff0c\u76f4\u63a5\u5f00\u6570\u7ec4\u8981\u5f00\u52304GB\uff0c\u60f3\u538b\u7f29\u53c8\u975e\u5e38\u4e4b\u9ebb\u70e6\u4e14\u6ca1\u6709\u601d\u8def\u3002\u6211\u4eec\u73b0\u5728\u7528\u7684\u5927\u591a\u7535\u8111\u5185\u5b58\u6761\u53ea\u67092GB\uff0c\u628a\u4e00\u53f0\u7535\u8111\u7684\u5185\u5b58\u5f00\u6ee1\u8dd1\u7a0b\u5e8f\uff0c\u60f3\u60f3\u90fd\u4e0d\u73b0\u5b9e\u3002\u867d\u7136\u8fd9\u80af\u5b9a\u4e0d\u662f\u6b63\u89e3\uff0c\u4f46\u8d5b\u540e\u6709\u4eba\u5199\u9898\u89e3\u7684\u65f6\u5019\uff0c\u771f\u7684\u5c31\u7528\u8fd9\u65b9\u6cd5\u901a\u8fc7\u4e86\uff0c\u539f\u56e0\u662f\u5199\u5b8c\u4ee3\u7801\u624d\u53bb\u770b\u6570\u636e\u8303\u56f4\uff0c\u53d1\u73b04G\u597d\u5927\u4f46\u65e2\u7136\u5199\u4e86\u5c31\u63d0\u4ea4\u4e00\u4e0b\u8bd5\u8bd5\u770b\uff0c\u7adf\u7136YES\u4e86\uff01\u4e00\u65b9\u9762\u662f\u53ef\u80fd\u9898\u76ee\u63d0\u4f9b\u7684\u6d4b\u8bd5\u6570\u636e\u5e76\u6ca1\u6709\u8fbe\u5230\u9898\u76ee\u63cf\u8ff0\u7684\u6781\u9650\uff0c\u4e5f\u5c31\u662f\u5b9e\u9645\u4f7f\u7528\u4e0d\u52304GB\u5185\u5b58\u3002\u53e6\u4e00\u65b9\u9762\u662f\uff0c\u90a3\u573a\u533a\u57df\u8d5b\u7684\u5224\u9898\u673a\u53ef\u80fd\u662f4+GB\u7684\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div><strong>2013\u5e74</strong></div>\n<div>&nbsp;</div>\n<div>\u68a6\u65ad</div>\n<div>&nbsp;</div>\n<div>1\u6708\u521d\uff0cACM/ICPC\u4e9a\u6d32\u533a\u4e3b\u5e2d\u535a\u5ba2\u516c\u5e03\u4e862013\u5e74\u4e9a\u6d32WordFinal\u8d44\u683c\u3002</div>\n<div>&nbsp;</div>\n<div>\u5927\u964617\u652f\u961f\u4f0d\u8fdb\u5165\u4e16\u754c\u603b\u51b3\u8d5b\u3002\u9999\u6e2f\u5927\u5b66\u3001\u9999\u6e2f\u4e2d\u6587\u5927\u5b66\u5360\u7528\u5927\u9646\u540d\u989d\uff08\u5728\u6d77\u5916\u8d5b\u533a\u53d6\u5f97\u5f88\u4f18\u79c0\u7684\u6210\u7ee9\uff09\uff0c\u4f46\u5728\u5927\u9646\u533a\u57df\u8d5b\u540d\u6b21\u4e0d\u8ba1\uff0c\u8fd9\u6837\u676d\u5dde\u8d5b\u533a\u7b2c\u516b\u7684\u590d\u65e6\u6210\u4e86\u7b2c\u4e03\uff0c\u51fa\u4e8e\u5bf9ICPC\u7684\u8d21\u732e\uff0811\u5e74\u4e0a\u6d77\u8d5b\u533a\u4e3b\u529e\u65b9\uff0c12\u5e74\u6210\u90fd\u8d5b\u533a\u51fa\u9898\uff09\uff0c\u4f18\u5148\u83b7\u5f97\u4e16\u754c\u603b\u51b3\u8d5b\u8d44\u683c\u3002\u8fd9\u6837\u6d3b\u751f\u751f\u5730\u628a\u5929\u6d25\u8d5b\u533a\u540c\u662f\u7b2c\u4e03\u7684\u4e2d\u5357\u5927\u5b66\u6321\u5728\u4e86\u603b\u51b3\u8d5b\u95e8\u5916\u3002</div>\n<div>&nbsp;</div>\n<div>\u4f1f\u54e510\u5e74\u66fe\u8bf4\u8fc7\uff0c\u6ca1\u4ec0\u4e48\u597d\u62b1\u6028\u7684\uff0c\u5982\u679c\u6709\u5b9e\u529b\u53bb\u62ff\u533a\u57df\u8d5b\u51a0\u519b\uff0c\u8c01\u4e5f\u4e0d\u80fd\u8ba9\u4f60\u8fdb\u4e0d\u4e86\u51b3\u8d5b\u3002</div>\n<div>&nbsp;</div>\n<div>\u9000\u5f79</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u5728\u4e2d\u5357ACM\u7ecf\u5386\u4e86\u597d\u591a\u4e86\uff0c\u4ece\u5f53\u5e74\u7684\u59da\u603b\u523012\u7ea7\u65b0\u6765\u7684\u5c0f\u9052\uff0c\u8db3\u8db3\u7ecf\u5386\u4e86\u4e2d\u5357\u4e03\u4ee3ACMer\uff0c\u80fd\u8bf4\u7684\u592a\u591a\uff0c\u4ee5\u81f3\u4e8e\u9000\u5f79\u65f6\u60f3\u5199\u7bc7\u6587\u7ae0\u4ee5\u8868\u7eaa\u5ff5\u5374\u53cc\u624b\u653e\u5728\u952e\u76d8\u4e0a\u6572\u4e0d\u51fa\u4e00\u4e2a\u5b57\u3002</div>\n<div>&nbsp;</div>\n<div>\u84e6\u7136\u56de\u9996\uff0c\u60f3\u8d77\u4e09\u5e74\u524d\u586b\u5199\u96c6\u8bad\u62a5\u540d\u8868\u90a3\u6700\u540e\u4e00\u680f\uff0c&ldquo;\u5237\u65b0\u4e2d\u5357ACM\u5386\u53f2\u6210\u7ee9&rdquo;\uff0c\u505a\u5230\u4e86\uff0c\u91ca\u7136\u4e86\uff0c\u7ed3\u675f\uff0c\u4e0d\u8fc7\u662f\u5fae\u5fae\u4e00\u7b11\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u5c0f\u82cf\u5b66\u4e60\u6210\u7ee9\u5f88\u597d\uff08\u62ff\u4e86\u56fd\u5956\uff1f\uff09\uff0c\u4e0d\u7528ACM\u7684\u91d1\u5956\u4e5f\u4fdd\u4e86\u7814\uff0c\u4e0d\u8fc7\u5fd9\u4e8e\u6bd4\u8d5b\uff0c\u6ca1\u65f6\u95f4\u8054\u7cfb\u5b66\u6821\uff0c\u4fdd\u7684\u672c\u6821\u7814\u7a76\u751f\uff0c\u90ed\u5c0f\u4fa0\u89c9\u5f97\u6536\u4e86\u5c0f\u5c0f\u82cf\u7684\u5bfc\u5e08\u662f\u5e78\u8fd0\u7684\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u658c\u658c\u662f\u60f3\u53bb\u5317\u4eac\u627e\u5973\u670b\u53cb\u7684\uff0c\u6210\u7ee9\u5f88\u597d\u4fdd\u5185\u4e5f\u4e0d\u6210\u95ee\u9898\uff0c\u4fdd\u5916\u5c31\u6709\u70b9\u70b9\u5371\u9669\uff0c10\u7ea7\u7684\u5c0f\u658c\u658c\u5728ACM\u8fd8\u5e74\u8f7b\uff0c\u90ed\u5c0f\u4fa0\u4e00\u76f4\u89c9\u5f97\u5c0f\u658c\u658c\u575a\u6301ACM\u4e00\u4e24\u5e74\uff0c\u4e00\u5b9a\u8d85\u8d8a\u7f57\u795e\uff0c\u4f55\u51b5\u535a\u5ba2\u4e0a\u90a3\u53e5&ldquo;\u6211\u8981\u628a\u4e2d\u5357\u5e26\u8fdb\u4e16\u754c\u603b\u51b3\u8d5b&rdquo;\u7684\u76ee\u6807\u8fd8\u6ca1\u5b9e\u73b0\u5462\u3002\u5c0f\u658c\u658c\u662f\u6709\u70b9\u7ea0\u7ed3\uff0c\u7ee7\u7eed\u53c2\u8d5b\u548c\u8003\u7814\u3002</div>\n<div>&nbsp;</div>\n<div>\u65b0\u7bc7\u7ae0</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\u66fe\u95ee\u526f\u4f1a\u957f\u5f6d\u5c0f\u5c71\uff0c\u5c0f\u5b87\u4e4b\u540e\u534f\u4f1a\u5e94\u8be5\u7ed9\u8c01\u5462\u3002\u5f53\u5e74\u5c0f\u7426\u6765\u534f\u4f1a\u7684\u65f6\u5019\uff0c\u526f\u4f1a\u957f\u5f6d\u5c0f\u5c71\u5c31\u544a\u8bc9\u90ed\u5c0f\u4fa0\uff0c\u5c0f\u7426\u73b0\u5728\u5e74\u8f7b\uff0c\u4f46\u662f\u505a\u4eba\u5f88\u7a33\uff0c\u4e00\u4e24\u5e74\u6210\u719f\u4e00\u4e9b\u4e4b\u540e\uff0c\u662f\u6700\u4f73\u4eba\u9009\u3002</div>\n<div>&nbsp;</div>\n<div>13\u5e74\uff0c\u5c0f\u5b87\u6e10\u6e10\u628a\u534f\u4f1a\u7684\u4e8b\u60c5\u4ea4\u7ed9\u4e86\u5c0f\u7426\u3002\u5f53\u5e74\u90ed\u5c0f\u4fa0\u662f\u534f\u4f1a\u548c\u8bad\u7ec3\u65b0\u4eba\u4e24\u90e8\u5206\u4e00\u4e2a\u4eba\u6293\uff0c\u540e\u6765\u628a\u534f\u4f1a\u4ea4\u7ed9\u4e86\u5c0f\u5b87\uff0c\u628a\u8bad\u7ec3\u65b0\u4eba\u4ea4\u7ed9\u4e86\u5c0f\u658c\u658c\uff0c\u5982\u4eca\u4f3c\u4e4e\u534f\u4f1a\u548c\u8bad\u7ec3\u65b0\u4eba\u53c8\u5230\u4e86\u5c0f\u7426\u4e00\u4e2a\u4eba\u8eab\u4e0a\u3002</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e00\u5e74\u7684\u65b0\u4eba\u53d1\u5c55\u72b6\u51b5\u8fd8\u662f\u6709\u70b9\u4ee4\u4eba\u62c5\u5fe7\uff0c\u6bd4\u8d77\u5c0f\u658c\u658c\u3001\u5c0f\u5c0f\u82cf\u3001\u7f57\u5927\u53d4\u3001\u5efa\u519b\u4e00\u4ee3\uff0c\u5dee\u4e86\u4e0d\u5c11\uff0c\u4e5f\u5c31\u5c0f\u7426\u8fd8\u6709\u70b9\u5f53\u5e74\u7fbd\u7ffc\u7565\u4e30\u7684\u5c0f\u658c\u658c\u7684\u5f71\u5b50\u3002\u8001\u4eba\u8fd8\u662f\u4e0d\u80fd\u4e00\u4e0b\u90fd\u8d70\u5149\u554a\uff0c\u5c0f\u658c\u658c\u51b3\u5b9a\u53c2\u52a0\u4e0b\u534a\u5e74\u7684\u6bd4\u8d5b\uff0c\u548c\u5c0f\u7426\u7ec4\u961f\u3002</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u7426\u4f60\u4eec\u52a0\u6cb9\u554a\uff0c\u4e89\u53d6\u5b9e\u73b0\u5c0f\u658c\u658c\u535a\u5ba2\u4e0a\u90a3\u53e5\u8bdd\u3002</div>\n<div>&nbsp;</div>\n<div>\u6bd5\u4e1a\u5b63</div>\n<div>&nbsp;</div>\n<div>\u8f6c\u773c\u53c8\u4e00\u4ee3\u4eba\u6bd5\u4e1a\u4e86\uff0c\u6bd5\u4e1a\u5178\u793c\u4e0a\u5f20\u6821\u957f\u8fd8\u7279\u5730\u70b9\u540d\u8868\u626c\u4e86\u4e00\u4e9b\u4f18\u79c0\u7684\u52aa\u529b\u594b\u6597\u7684\u6bd5\u4e1a\u751f\uff0c\u7f57\u5927\u53d4\u4e5f\u5728\u5185\uff0c\u90a3\u51e0\u5929\u8001\u961f\u5458QQ\u7fa4\u91cc\u90fd\u5728\u8c03\u4f83\u7f57\u5927\u53d4\uff0c\u771f\u9057\u61be\u5e74\u521d\u7ed3\u5a5a\u6ca1\u53bb\u56f4\u89c2\uff0c\u4e0d\u8fc7&ldquo;\u597d\u7236\u4eb2&rdquo;\u771f\u8ba9\u7f57\u5927\u53d4\u56e7\u4e86\u4e00\u4e0b\uff0c\u54ea\u8fd9\u4e48\u5feb\u751f\u5b69\u5b50\u3002\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</div>\n<div>&nbsp;</div>\n<div>\u8fd9\u4e2a\u5e16\u5b50\u7684\u6545\u4e8b\u5230\u8fd9\u91cc\u5dee\u4e0d\u591a\u5c31\u7ed3\u675f\u4e86\uff0c\u4e2d\u5357ACM\u7684\u6545\u4e8b\u8fd8\u6709\u5e74\u8f7b\u4eba\u53bb\u7eed\u5199\uff0c\u5e0c\u671b\u5979\u7684\u6545\u4e8b\u672a\u6765\u662f\u8f89\u714c\u7684\uff0c\u55ef\uff0c\u4e00\u5b9a\u662f\u3002</div>\n<div>&nbsp;</div>\n<div>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</div>\n<div>&nbsp;</div>\n<div>\u4eba\u7269\u540e\u8bb0</div>\n<div>&nbsp;</div>\n<div>\u59da\u603b\uff1a\u7814\u7a76\u751f\u6bd5\u4e1a\u5de5\u4f5c\uff0c\u516c\u53f8\u6211\u5fd8\u4e86\u3002\u3002</div>\n<div>&nbsp;</div>\n<div>\u8d75\u6559\uff1a\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66Master\uff0c\u7559\u7f8e\u5de5\u4f5c\uff0cgoogle\u516c\u53f8</div>\n<div>&nbsp;</div>\n<div>\u6728\u5357\uff1a\u672c\u6821\u7814\u7a76\u751f\u5e08\u4ece\u8521\u81ea\u5174\u6559\u6388\uff0c\u6bd5\u4e1a\uff0c\u6709\u8bfb\u535a\u8ba1\u5212</div>\n<div>&nbsp;</div>\n<div>\u7f57\u795e\uff1a\u672c\u79d1\u6bd5\u4e1a\u5de5\u4f5c\uff0c\u6df1\u4fe1\u670d\uff0c\u6df1\u5733</div>\n<div>&nbsp;</div>\n<div>\u4f1f\u54e5\uff1a\u672c\u79d1\u6bd5\u4e1a\u5de5\u4f5c\uff0c\u963f\u91cc\u5df4\u5df4\u65d7\u4e0b\uff08\u6dd8\u5b9d\uff1f\uff09\uff0c\u676d\u5dde</div>\n<div>&nbsp;</div>\n<div>\u5f00\u4ed9\uff1a\u672c\u6821\u5e94\u7528\u6570\u5b66\u7814\u7a76\u751f\u5728\u8bfb\uff0c\uff08\u6570\u5b66\u9662\u5bfc\u5e08\uff0c\u6211\u5c31\u4e0d\u4e86\u89e3\u4e86&hellip;&hellip;\uff09</div>\n<div>&nbsp;</div>\n<div>\n<div>\u6377\uff1a\u4fdd\u5916\uff0c\u534e\u4e2d\u79d1\u6280\u5927\u5b66\u7814\u7a76\u751f\u5728\u8bfb\uff0c\u8fdb\u51652012\u5fae\u8f6f\u7f16\u7a0b\u4e4b\u7f8e\u51b3\u8d5b\uff0c\u5f97\u5230\u817e\u8baf\u548c\u5fae\u8f6f\u5b9e\u4e60offer\uff0c\u73b0\u5728\u5fae\u8f6f\u5317\u4eac\u5b9e\u4e60</div>\n<div>&nbsp;</div>\n<div>\u6770\uff1a\u8003\u5165\u534e\u5357\u7406\u5de5\uff0c\u7814\u7a76\u751f\u5728\u8bfb\uff0c\u5f97\u5230\u817e\u8baf\u548c\u7f51\u6613\u6e38\u620f\u5b9e\u4e60offer</div>\n\n\n\n\n\n\n\n</div>\n<div>&nbsp;</div>\n<div>\u5927\u8c61\uff1a\u672c\u79d1\u6bd5\u4e1a\u5de5\u4f5c\uff0c\u817e\u8baf\uff0c\u6df1\u5733</div>\n<div>&nbsp;</div>\n<div>\u5f6d\u5c0f\u5c71\uff1a\uff08ACM\u534f\u4f1a\u526f\u4e3b\u5e2d\uff09\u5b9e\u4e60\u4e00\u5e74\uff0c\u6e56\u5927\u91d1\u878d\u76f4\u535a</div>\n<div>&nbsp;</div>\n<div>\u97e9\u5c0f\u5e05\uff1a\uff08ACM\u534f\u4f1a\u90e8\u957f\u4e4b\u4e00\uff09\u672c\u79d1\u6bd5\u4e1a\u5de5\u4f5c\uff0c\u534e\u4e3a\uff0c\u6df1\u5733</div>\n<div>&nbsp;</div>\n<div>\u51cc\u5c0f\u827a\uff1a\uff08ACM\u534f\u4f1a\u90e8\u957f\u4e4b\u4e00\uff09\u672c\u79d1\u6bd5\u4e1a\u5de5\u4f5c\uff0c\u817e\u8baf\uff0c\u6df1\u5733</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u90b1\uff1a\u4fdd\u7814\u672c\u6821\uff0c\u5e08\u4ece\u90b9\u5317\u9aa5\u6559\u6388\uff0c\u7814\u7a76\u751f\u5728\u8bfb</div>\n<div>&nbsp;</div>\n<div>\u9633\u4ed4\uff1a\u8003\u5165\u6d59\u6c5f\u5927\u5b66\u8f6f\u4ef6\u9662\uff0c\u7814\u7a76\u751f\u5728\u8bfb</div>\n<div>&nbsp;</div>\n<div>\u4e50\u4e50\uff1a\uff08ACM\u534f\u4f1a\u90e8\u957f\u4e4b\u4e00\uff09\u6559\u6539\u73ed\u4fdd\u7814\u672c\u6821\uff0c\u5e08\u4ece\u738b\u5efa\u65b0\u6559\u6388\uff0c\u7814\u7a76\u751f\u5728\u8bfb\uff0c\u7ee7\u7eed\u4e3aACM\u534f\u4f1a\u505a\u4e86\u4e0d\u5c11\u8d21\u732e</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u66f9\uff1a\u5df2\u5f97\u817e\u8baf\u5b9e\u4e60offer\uff0c\u51c6\u5907\u4e4b\u540e\u51fa\u56fd\u7559\u5b66</div>\n<div>&nbsp;\n<div>\u7f57\u5927\u53d4\uff1a\u8003\u7814\u534f\u548c\u533b\u5b66\u9662\u5931\u8d25\uff0c\u4fdd\u6301\u5de5\u4f5c\uff0c\u672a\u653e\u5f03\u8003\u7814</div>\n<div>&nbsp;</div>\n<div>\u5efa\u519b\uff1a\u4fdd\u9001\u4e2d\u79d1\u9662\uff0c\u4eca\u5e749\u6708\u7814\u7a76\u751f\u5165\u5b66</div>\n<div>&nbsp;</div>\n\n\n\n\n\n\n\n\n</div>\n<div>\u5c0f\u5c0f\u82cf\uff1a\u6210\u7ee9\u4f18\u5f02\u4fdd\u7814\u672c\u6821\uff0c\u5e08\u4ece\u738b\u5efa\u65b0\u6559\u6388\uff0c\u4eca\u5e749\u6708\u7814\u7a76\u751f\u5165\u5b66</div>\n<div>&nbsp;</div>\n<div>\u5c0f\u658c\u658c\uff1a\u6210\u7ee9\u4f18\u5f02\uff0c\u662f\u5426\u4fdd\u5916\u672a\u77e5\uff0c\u5df2\u5f97\u91d1\u5c71\u5b9e\u4e60offer\uff0c\u4e0b\u534a\u5e74\u6bd4\u8d5b\u4e3b\u8981\u4e3a\u5e26\u65b0\u4eba\uff0c\u4e0d\u4f1a\u6295\u5165\u592a\u591a\u65f6\u95f4\u8bad\u7ec3</div>\n<div>&nbsp;</div>\n<div>\u90ed\u5c0f\u4fa0\uff1a\u8003\u7814\u672c\u6821\uff0c\u5e08\u4ece\u90b9\u5317\u9aa5\u6559\u6388\uff0c\u7814\u7a76\u751f\u5728\u8bfb</div>\n<div>&nbsp;</div>\n<div>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;\u672c\u5e16\u7ed3\u675f\uff0c\u8c22\u8c22\u89c2\u770b&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>\n<div>\u4e2d\u5357ACM\u7684\u5386\u53f2\u5f53\u7136\u8fdc\u4e0d\u6b62\u6709\u6587\u4e2d\u51fa\u73b0\u7684\u89d2\u8272\uff0c\u4e2d\u5357ACM\u7684\u6bcf\u4e00\u6b65\u53d1\u5c55\uff0c\u90fd\u6709\u7740\u4f60\u4eec\u6e05\u6670\u7684\u8db3\u8ff9\u3002</div>\n<div>&nbsp;</div>\n<div>\u8c28\u4ee5\u672c\u5e16\u7eaa\u5ff5\u4e3a\u4e2d\u5357\u5927\u5b66ACM\u594b\u6597\u7684\u90a3\u4e9b\u65e5\u5b50\uff0c\u81f4\u6240\u6709\u66fe\u4e3aCSU-ACM\u5171\u540c\u68a6\u60f3\u594b\u6597\u7684\u524d\u8f88\u4eec\u3002</div>\n\n\n\n\n\n\n\n\n\n\n\n</div>\n\n\n\n\n\n\n\n\n\n\n\n</div>\n<div id=\"KSFIND_MASK\" style=\"background-color: #000000; opacity: 0.22; position: absolute !important; left: 0px !important; top: 0px !important; border: 0px none !important; padding: 0px !important; z-index: 1000000 !important; height: 0px; width: 0px; display: none; cursor: auto; background-position: initial initial; background-repeat: initial initial;\">&nbsp;</div>"
			}, {
				"title": "VS2010 MFC\u5bf9\u8bdd\u6846\u7a0b\u5e8f\u7528CButtonST\u7ed9\u6309\u94ae\u6dfb\u52a0\u56fe\u6807",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/07/02/3168037.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Tue, 02 Jul 2013 13:23:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/07/02/3168037.html",
				"description": "<p><span>\u4e5f\u8bb8\u662fVS\u7248\u672c\u7684\u5173\u7cfb\uff0cCButtonST\u4e2d\u7684BCMenu\u4e24\u4e2a\u6587\u4ef6\u662f\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\u7684\u3002</span></p>\n<div>&nbsp;</div>\n<div>1\u3001\u62f7\u8d1d\u4e0b\u8f7d\u7684CButtonST\uff08\u6211\u4e0b\u8f7d\u7684v3.9\uff09\u4e2d\u7684BtnST.h\u548cBtnST.cpp\u6587\u4ef6\u5230\u81ea\u5df1\u9879\u76ee\u76ee\u5f55\u4e0b\u3002</div>\n<div>2\u3001\u5c06\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5bfc\u5165\u9879\u76ee\u5e76\u5728\u5bf9\u8bdd\u6846\u7a0b\u5e8f\u7684\u5934\u6587\u4ef6\u4e2d#include \"BtnST.h\"</div>\n<div>3\u3001\u4fee\u6539BtnST.h\uff0c\u6ce8\u91ca\u6389&nbsp;#defineBTNST_USE_BCMENU &nbsp;\u548c&nbsp;#include \"BCMenu.h\"\uff0c\u8fd9\u6837\u5c31\u4e0d\u8003\u8651BCMenu\u4e86\u3002</div>\n<div>\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\uff0c\u6709\u4e00\u4e9bwarning\u3002</div>\n<div>4\u3001\u5728\u8d44\u6e90\u89c6\u56fe\u4e2d\u5bfc\u5165\u8981\u6dfb\u52a0\u7684icon</div>\n<div>5\u3001\u5728\u5bf9\u8bdd\u6846\u7c7b\u4e2d\u6dfb\u52a0\u53d8\u91cfCButtonST m_button;</div>\n<div>6\u3001\u5728OnInitDialog()\u4e2d\u6dfb\u52a0</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre>m_button .SubclassDlgItem(IDC_BUTTON<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\u8981\u6dfb\u52a0icon\u7684\u6309\u94ae\u63a7\u4ef6ID</span><span style=\"color: #008000;\">*/</span>, <span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">);\nm_button .SetIcon(IDI_ICON</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\u5bfc\u5165\u7684\u90a3\u4e2aicon ID</span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">);\nm_button .SetFlat(TRUE</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">\u8ba9\u8fd9\u4e2a\u6309\u94ae\u6241\u5e73\u8fd8\u662f\u7acb\u4f53</span><span style=\"color: #008000;\">*/</span>);</pre>\n</div>\n<p>\u6309\u94ae\u7684\u5927\u5c0f\u8981\u9002\u5f53\u8c03\u6574\u3002</p>\n<p>&nbsp;\u9644\u4ef6\uff1a<a href=\"http://files.cnblogs.com/CSGrandeur/BtnST%E4%BF%A9%E6%96%87%E4%BB%B6.rar\">BtnST\u4fe9\u6587\u4ef6</a></p>\n</div>"
			}, {
				"title": "VS2010 MFC \u4f7f\u7528GDI+\u7ed9\u56fe\u7247\u6dfb\u52a0\u6c49\u5b57",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/06/26/3156843.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 26 Jun 2013 08:42:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/06/26/3156843.html",
				"description": "<p>1\u3001\u914d\u7f6eGDI+</p>\n<p>VS2010\u81ea\u5e26GDI+\uff0c\u76f4\u63a5\u4f7f\u7528\u3002</p>\n<p>(1)\u9996\u5148\u8981\u6dfb\u52a0\u5934\u6587\u4ef6\u548c\u5e93</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">#pragma</span> comment( lib, \"gdiplus.lib\" )<span style=\"color: #000000;\">\n#include </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">gdiplus.h</span><span style=\"color: #800000;\">\"</span>\n<span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span> Gdiplus;</pre>\n</div>\n<p>\u5efa\u8bae\u6dfb\u52a0\u5230stdafx.h\u91cc</p>\n<p>(2)\u7136\u540e\u6dfb\u52a0\u5168\u5c40\u53d8\u91cf</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #0000ff;\">static</span> ULONG_PTR m_gdiplusToken;</pre>\n</div>\n<p>\u8be5\u6210\u5458\u53d8\u91cf\u7528\u6765\u4fdd\u5b58GDI+\u88ab\u521d\u59cb\u5316\u540e\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684GDI+\u6807\u8bc6\u3002</p>\n<p>(3)\u5728OnInitDialog()\u4e4b\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570\u4e2d\uff0c\u6dfb\u52a0\uff1a</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #000000;\">Gdiplus::GdiplusStartupInput gdiplusStartupInput;\n</span>Gdiplus::GdiplusStartup(&amp;m_gdiplusToken, &amp;gdiplusStartupInput, NULL); </pre>\n</div>\n<p>(4)\u7ed3\u675f\u540e\u5378\u8f7dGDI+\uff1a</p>\n<p>\u53ef\u4ee5\u624b\u52a8\u91cd\u8f7d\u6790\u6784\u51fd\u6570\u7136\u540e\u52a0\u4e0a\u8fd9\u53e5\uff1a</p>\n<div class=\"cnblogs_code\">\n<pre>Gdiplus::GdiplusShutdown(m_gdiplusToken);</pre>\n</div>\n<p>&nbsp;\u914d\u7f6e\u65b9\u6cd5\u5f88\u591a\u535a\u5ba2\u90fd\u6709\u8bf4\uff0c\u4e5f\u4e0d\u77e5\u9053\u6e90\u5934\u5728\u54ea\uff0c\u6055\u6211\u4e0d\u6807\u6ce8\u6765\u6e90\u4e86\u3002</p>\n<p>&nbsp;</p>\n<p>2\u3001\u7ed9\u56fe\u7247\u6dfb\u52a0\u6c49\u5b57</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> Image  image( L<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">D:\\\\pic\\\\abc.jpg</span><span style=\"color: #800000;\">\"</span> );          <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u52a0\u8f7d\u56fe\u7247</span>\n<span style=\"color: #008080;\"> 2</span>  Graphics imageGraphics(&amp;image);              <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u901a\u8fc7Image\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u7ed8\u56fe\u53e5\u67c4\uff0c\u4f7f\u7528\u8fd9\u4e2a\u53e5\u67c4\u5bf9\u56fe\u7247\u8fdb\u884c\u64cd\u4f5c </span>\n<span style=\"color: #008080;\"> 3</span> <span style=\"color: #000000;\"> imageGraphics.SetTextRenderingHint(TextRenderingHintAntiAlias);\n</span><span style=\"color: #008080;\"> 4</span>  WCHAR <span style=\"color: #0000ff;\">string</span>[ ] = L<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\u59d3\u540d</span><span style=\"color: #800000;\">\"</span>;                   <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8981\u5199\u7684\u5b57</span>\n<span style=\"color: #008080;\"> 5</span>  FontFamily fontFamily(L<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\u6977\u4f53</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">); \n</span><span style=\"color: #008080;\"> 6</span>  Gdiplus::Font myFont(&amp;fontFamily, <span style=\"color: #800080;\">60</span>, FontStyleRegular, UnitPoint); <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u7b2c\u4e8c\u4e2a\u662f\u5b57\u4f53\u5927\u5c0f</span>\n<span style=\"color: #008080;\"> 7</span>  SolidBrush blackBrush(Color(<span style=\"color: #800080;\">255</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>));  <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u534a\u900f\u660e+\u6587\u5b57RGB\u989c\u8272</span>\n<span style=\"color: #008080;\"> 8</span>  PointF school_site((REAL)<span style=\"color: #800080;\">100</span>, (REAL)<span style=\"color: #800080;\">100</span>);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6587\u5b57\u653e\u7f6e\u7684\u50cf\u7d20\u5750\u6807</span>\n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\"> StringFormat format;                         \n</span><span style=\"color: #008080;\">10</span>  format.SetAlignment(StringAlignmentNear);    <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6587\u672c\u6392\u5217\u65b9\u5f0f\uff0c\u5373\u5728\u5bf9\u5e94\u4f4d\u7f6e\u5c45\u4e2d\u3001\u9760\u5de6\u3001\u9760\u53f3\n</span><span style=\"color: #008080;\">11</span>  <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">wcscpy_s(string, CT2CW(str));              </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5982\u679c\u4f7f\u7528MFC\u4e2d\u7684CString\uff0c\u9700\u8981\u8fd9\u6837\u8f6c\u6362\u6210WCHAR</span>\n<span style=\"color: #008080;\">12</span>  imageGraphics.DrawString(<span style=\"color: #0000ff;\">string</span>, wcslen(<span style=\"color: #0000ff;\">string</span>), &amp;myFont, school_site, &amp;format, &amp;blackBrush );<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u628astring\u7ed8\u5236\u5230\u56fe\u4e0a</span>\n<span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\"> CLSID pngClsid; \n</span><span style=\"color: #008080;\">14</span>  GetEncoderClsid( L<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">image/jpeg</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">pngClsid); \n</span><span style=\"color: #008080;\">15</span>  image.Save(L<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">D:\\\\pic\\\\abc_1.jpg</span><span style=\"color: #800000;\">\"</span>, &amp;pngClsid, NULL );<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4fdd\u5b58\u6dfb\u52a0\u4e86\u6c49\u5b57\u7684\u56fe\u50cf</span></pre>\n</div>\n<p>&nbsp;</p>\n<p>\u6839\u636e\u9700\u8981\u6539\u53d8\u4e0a\u8ff0\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u4efb\u610f\u4f4d\u7f6e\u6dfb\u52a0\u4efb\u610f\u5b57\u4f53\u4efb\u610f\u5927\u5c0f\u7684\u5b57\u4e86\u3002</p>\n<p>\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e0d\u8bfb\u53d6\u56fe\u7247\uff0c\u76f4\u63a5\u5efa\u7acb\u56fe\u7247\u3002</p>"
			}, {
				"title": "HDU4546\t \u6bd4\u8d5b\u96be\u5ea6",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/05/17/3084741.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Fri, 17 May 2013 15:30:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/05/17/3084741.html",
				"description": "<p>\u8bbe\u7f6e\u4f18\u5148\u7ea7\u961f\u5217</p>\n<p>{</p>\n<p>sum:\u5f53\u524d\u548c</p>\n<p>nex:\u52a0\u5165\u4e0b\u4e2a\u5143\u7d20\u7684\u548c</p>\n<p>ith:\u5c06\u8981\u8003\u8651\u7684\u4e0b\u4e2a\u5143\u7d20</p>\n<p>}<br class=\"Apple-interchange-newline\" />\u4ee5nex\u4e3a\u4f18\u5148\u7ea7\uff0c\u5c0f\u7684\u5148\u51fa\u961f</p>\n<p>\u8bfb\u5165\u6570\u636e\u540e\u6392\u5e8f\uff0c\u521d\u59cb\u5316\u961f\u5217\u7b2c\u4e00\u4e2a\u5143\u7d20(0,a[0],0)</p>\n<p>\u6bcf\u6b21\u51fa\u961f\u4e00\u4e2a\u5143\u7d20\uff0c\u5165\u961f(sum,sum+a[ith],ith+1)\uff0c(nex,nex+a[ith],ith+1)\uff0c\u5373\u662f\u5426\u52a0\u4e0aa[ith]\u90fd\u8003\u8651\u8fdb\u53bb\u4e86\u3002</p>\n<p>\u8fd9\u6837\u6bcf\u6b21\u65b0\u52a0\u5165\u7684\u5143\u7d20\u90fd\u662f\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684(nex)\uff0c\u8fdb\u884cm\u6b21\u5c31\u5f97\u5230\u4e86\u7b2cm\u5c0f\u3002</p>\n<div class=\"cnblogs_code\">\n<pre>#include&lt;stdio.h&gt;<span style=\"color: #000000;\">\n#include</span>&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;<span style=\"color: #000000;\">\n#include</span>&lt;stdlib.h&gt;<span style=\"color: #000000;\">\n#include</span>&lt;algorithm&gt;<span style=\"color: #000000;\">\n#include</span>&lt;queue&gt;\n<span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, m;\n</span><span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">10011</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Node\n{\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> sum;\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nex;\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ith;\n    Node(){}\n    Node(</span><span style=\"color: #0000ff;\">int</span> sum_, <span style=\"color: #0000ff;\">int</span> nex_, <span style=\"color: #0000ff;\">int</span> ith_){sum = sum_, nex = nex_, ith =<span style=\"color: #000000;\"> ith_;}\n    </span><span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Node &amp;b)<span style=\"color: #0000ff;\">const</span><span style=\"color: #000000;\">\n    {</span><span style=\"color: #0000ff;\">return</span> b.nex &lt;<span style=\"color: #000000;\"> nex;}\n};\n</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a[maxn];\n</span><span style=\"color: #0000ff;\">int</span> Cal(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> m)\n{\n    priority_queue</span>&lt;Node&gt;<span style=\"color: #000000;\"> q;\n    Node lin;\n    lin.sum </span>= <span style=\"color: #800080;\">0</span>, lin.nex = a[<span style=\"color: #800080;\">0</span>], lin.ith = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n    q.push(lin);\n    </span><span style=\"color: #0000ff;\">int</span> cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n    a[n] </span>= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n    </span><span style=\"color: #0000ff;\">while</span>(cnt &lt;<span style=\"color: #000000;\"> m)\n    {\n        lin </span>=<span style=\"color: #000000;\"> q.top(); q.pop();\n        </span><span style=\"color: #0000ff;\">if</span>(lin.ith &gt;= n) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n        q.push(Node(lin.sum, lin.sum </span>+ a[lin.ith + <span style=\"color: #800080;\">1</span>], lin.ith + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n        q.push(Node(lin.nex, lin.nex </span>+ a[lin.ith + <span style=\"color: #800080;\">1</span>], lin.ith + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n        cnt </span>+= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n    }\n    </span><span style=\"color: #0000ff;\">for</span>(m = <span style=\"color: #800080;\">0</span>; !q.empty(); m ++) a[m] =<span style=\"color: #000000;\"> q.top().sum, q.pop();\n    sort(a, a </span>+<span style=\"color: #000000;\"> m);\n    </span><span style=\"color: #0000ff;\">return</span> a[m - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n}\n\n</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n{\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, t, ca;\n    </span><span style=\"color: #0000ff;\">for</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;t), ca = <span style=\"color: #800080;\">1</span>; ca &lt;= t; ca ++<span style=\"color: #000000;\">)\n    {\n        scanf(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;<span style=\"color: #000000;\">m);\n        </span><span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++<span style=\"color: #000000;\">)\n            scanf(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">a[i]);\n        sort(a, a </span>+<span style=\"color: #000000;\"> n);\n        printf(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Case #%d: %d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ca, Cal(m));\n    }\n    </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n}</span></pre>\n</div>\n<p>&nbsp;</p>"
			}, {
				"title": "\u9000\u5f79\uff1f",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2013/01/07/2850204.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 07 Jan 2013 13:50:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2013/01/07/2850204.html",
				"description": "<p>\u3000\u3000\u676d\u5dde\u6bd4\u8d5b\u4e4b\u540e\u9893\u4e86\u4e24\u4e2a\u6708\uff0c\u8865\u8865\u8bfe\u8003\u8003\u8bd5\uff0c\u5df2\u7ecf\u6c34\u5f97\u4e0d\u77e5\u8fd8\u914d\u5f97\u4e0a&ldquo;\u9000\u5f79&rdquo;\u4e24\u4e2a\u5b57\u5426\u3002&nbsp;<br />\u3000\u3000Final\u7684\u540d\u989d\u5927\u81f4\u5df2\u51fa\uff0c\u5927\u9646\u7684\u540d\u989d\u57fa\u672c\u4e0a\u5c31\u662f\u5404\u8d5b\u533a\u524d6\u52a0\u590d\u65e6\u3002\u5929\u6d25\u7684\u7b2c7\u5c31\u662f\u547d\u5427\u3002&nbsp;<br />\u3000\u3000\u597d\u591a\u611f\u6168<a href=\"http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659120.html\">&nbsp;\u8fd9\u7bc7\u6587\u7ae0\uff08\u94fe\u63a5\uff09</a>&nbsp;\u5df2\u7ecf\u8bf4\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u505a\u4e86\u5f88\u591a\u81ea\u5df1\u89c9\u5f97\u6bd4\u8f83\u6ee1\u610f\u7684\u4e8b\u60c5\uff0c\u4e0d\u8fc7\u5386\u53f2\u7684\u6d17\u6da4\u4e0e\u793e\u4f1a\u7684\u9009\u62e9\u4e0b\uff0c\u6700\u7ec8\u7559\u7ed9\u6211\u7684\uff0c\u8bb8\u53ea\u662f\u5929\u6d25\u7684\u8fd9\u5757\u91d1\u724c\u4e86\u5427\u3002&nbsp;<br />\u3000\u3000\u6216\u8bb8\u662f\u4e0a\u5929\u89c9\u5f97\u4e2d\u5357\u65f6\u5019\u672a\u5230\u5427\uff0c\u51e0\u4ee3\u4eba\u66fe\u4e00\u5ea6\u66f4\u52a0\u7684\u903c\u8fd1Final\u7684\u5165\u573a\u5238\uff0c\u5374\u4e00\u6b21\u6b21\u5728\u8fb9\u6cbf\u88ab\u6dd8\u6c70\u3002&nbsp;<br />\u3000\u3000\u7fa4\u91cc\u804a\u5929\uff0c\u5c39\u5e08\u5144\u8bf4\uff0c\u611f\u89c9\u81ea\u5df1\u5927\u5b66\u56e0\u4e3a\u53c2\u52a0\u4e86ACM\u624d\u6ca1\u767d\u8bfb\u3002\u56de\u60f3\u8d77\u6765\uff0c\u8fde\u7eed\u4e09\u5e74\u7684\u6691\u5047\u90fd\u5728\u96c6\u8bad\u4e2d\uff0c\u5148\u662f\u5c0f\u767d\uff0c\u518d\u662f\u62fc\u547d\uff0c\u518d\u662f\u5e26\u65b0\u4eba\uff0c\u8fd8\u8003\u4e86\u8ba1\u7b97\u673a\u7684\u7814\uff0c\u9003\u8dd1\u4f3c\u7684\u79bb\u5f00\u4e86\u81ea\u52a8\u5316\uff0c\u51e0\u4e4e\u5c31\u662f\u81ea\u5df1\u5bf9\u81ea\u5df1\u672c\u79d1\u56db\u5e74\u7684\u5426\u5b9a\uff0c\u5982\u679c\u6ca1\u6709ACM\uff0c\u5c31\u597d\u50cf\u8fd9\u56db\u5e74\u4e0d\u66fe\u6765\u8fc7\u3002&nbsp;<br />\u3000\u3000\u60f3\u8d77\u81ea\u5df1\u7684\u8ba1\u7b97\u51e0\u4f55\u5217\u8868\u8fd8\u6ca1\u5b8c\u6210\uff0c\u60f3\u603b\u7ed3\u4e00\u7bc7\u597d\u4e00\u70b9\u7684\u4e13\u9898\u90fd\u6ca1\u5e95\u6c14\u3002&nbsp;<br />\u3000\u3000\u4eca\u5e74\u5b66\u6821\u7684ACM\u6709\u4e86\u4e9b\u4e0d\u9519\u7684\u6210\u7ee9\uff0c\u65b0\u4eba\u4e2d\u7684\u5ba3\u4f20\u4e5f\u6bd4\u53bb\u5e74\u7ed9\u529b\u591a\u4e86\u3002\u66fe\u7ecf\u8bf4\uff0c\u8fd9\u6837\u52aa\u529b\u53d1\u5c55\u4e0b\u53bb\uff0c\u4e09\u5e74\u65f6\u95f4\u4e2d\u5357\u5e94\u8be5\u80fd\u591f\u8fdbFinal\u3002\u4eca\u5e74\u4f9d\u7136\u6b20\u4e86\u4e00\u4e9b\u8fd0\u6c14\uff0c\u90a3\u4e48\uff0c\u770b\u4f60\u4eec\u7684\u4e86\u3002&nbsp;<br />\u3000\u3000\u6ca1\u4e86ACM\uff0c\u7a81\u7136\u5fc3\u91cc\u7a7a\u7a7a\u7684\uff0c\u4e5f\u8bb8\u5c31\u662f\u8fd9\u51e0\u5929\u6709\u70b9\u6291\u90c1\u7684\u539f\u56e0\u5427\u3002&nbsp;<br />\u3000\u3000\u4f5c\u4e3a\u4e00\u4e2a\u7ecf\u5386\u4e2d\u53577\u4ee3ACMer\uff0c\u627f\u524d\u542f\u540e\u8d2f\u7a7f\u53d1\u5c55\u53f2\u7684\u8001\u4eba\uff08\u6700\u540e\u88c5\u4e00\u4e0b\u3002\u3002\uff09\uff0c\u4ee5\u8fd9\u4e48\u7bc7\u77ed\u77ed\u7684\u6587\u7ae0\u8c22\u5e55\uff0c\u662f\u6709\u90a3\u4e48\u70b9\u4e0d\u597d\u610f\u601d\u3002\u5982\u679c\u6709\u673a\u4f1a\u6709\u7cbe\u529b\uff0c\u518d\u8bb2\u6545\u4e8b\u3002</p>"
			}, {
				"title": "mysql \u7ed9select\u7684\u7ed3\u679c\u6dfb\u52a0\u4e00\u5217\u5e8f\u53f7",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/11/30/2796382.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Fri, 30 Nov 2012 07:56:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/11/30/2796382.html",
				"description": "<p>SET @mycnt=0;</p>\n<p>SELECT @mycnt := @mycnt +1 as mycnt, a.*, b.*&nbsp;</p>\n<p>FROM a, b;</p>\n<p>\u8868\u4e2d\u7b2c\u4e00\u5217\u5373\u4e3amycnt\uff0c\u4ece1\u5f00\u59cb\u8ba1\u6570\u3002</p>"
			}, {
				"title": "\u5728\u7f51\u9875\u4e0a\u663e\u793a\u52a8\u6001\u7684\u65f6\u95f4",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/11/21/2781370.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 21 Nov 2012 11:39:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/11/21/2781370.html",
				"description": "<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> &lt;script language=\"javascript\"&gt;\n<span style=\"color: #008080;\"> 2</span>  <span style=\"color: #0000ff;\">var</span> t = <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 3</span>  t = setTimeout(time,1000<span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 4</span>  <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> str0(a)\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 6</span>      <span style=\"color: #0000ff;\">if</span>(a&lt;10) <span style=\"color: #0000ff;\">return</span> \"0\"<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>      <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">return</span> \"\"<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\"> }\n</span><span style=\"color: #008080;\"> 9</span>  <span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> time()\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">     clearTimeout(t);\n</span><span style=\"color: #008080;\">12</span>      <span style=\"color: #0000ff;\">var</span> dt = <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Date();\n</span><span style=\"color: #008080;\">13</span>      <span style=\"color: #0000ff;\">var</span> year =<span style=\"color: #000000;\"> dt.getFullYear();\n</span><span style=\"color: #008080;\">14</span>      <span style=\"color: #0000ff;\">var</span> month = dt.getMonth() + 1; \n<span style=\"color: #008080;\">15</span>      <span style=\"color: #0000ff;\">var</span> day = dt.getDate();\n<span style=\"color: #008080;\">16</span>      <span style=\"color: #0000ff;\">var</span> hour =<span style=\"color: #000000;\"> dt.getHours();\n</span><span style=\"color: #008080;\">17</span>      <span style=\"color: #0000ff;\">var</span> minute =<span style=\"color: #000000;\"> dt.getMinutes();\n</span><span style=\"color: #008080;\">18</span>      <span style=\"color: #0000ff;\">var</span> sec =<span style=\"color: #000000;\"> dt.getSeconds();\n</span><span style=\"color: #008080;\">19</span>      <span style=\"color: #0000ff;\">var</span> ts =year+\"-\"+str0(month)+month+\"-\"+str0(day)+day+\" \"+str0(hour)+hour+\":\"+str0(minute)+minute+\":\"+str0(sec)+<span style=\"color: #000000;\">sec;\n</span><span style=\"color: #008080;\">20</span>      document.getElementById(\"timeShow\").innerHTML =<span style=\"color: #000000;\"> ts;\n</span><span style=\"color: #008080;\">21</span>      t = setTimeout(time,1000<span style=\"color: #000000;\">);              \n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\"> } \n</span><span style=\"color: #008080;\">23</span>  &lt;/script&gt;\n<span style=\"color: #008080;\">24</span>  &lt;/head&gt;\n<span style=\"color: #008080;\">25</span>  \n<span style=\"color: #008080;\">26</span>  &lt;body&gt;\n<span style=\"color: #008080;\">27</span>  \u3000\u3000&lt;label id=\"timeShow\"&gt;&lt;/lable&gt;\n<span style=\"color: #008080;\">28</span>  &lt;/body&gt;\n<span style=\"color: #008080;\">29</span>  &lt;/html&gt;</pre>\n</div>\n<p>\u6b63\u5b66php\uff0c\u8fd8\u6ca1\u5b66js\u3002\u9047\u5230\u8fd9\u95ee\u9898\u4e86\uff0c\u767e\u5ea6\u4e4b\uff0c\u5927\u4f53\u90fd\u662f\u8fd9\u4e48\u4e2a\u5199\u6cd5\u3002</p>"
			}, {
				"title": "EXCEL\u4e2d\u8ba1\u7b97\u4e0d\u91cd\u590d\u5355\u5143\u683c\u7684\u4e2a\u6570",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/11/07/2758749.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 07 Nov 2012 06:17:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/11/07/2758749.html",
				"description": "<p><span>=SUM(1/COUNTIF(A1:A10,A1:A10))</span></p>\n<p><span>\u597d\u50cf\u662f\u4e0d\u80fd\u7528\u7a7a\u767d\u5355\u5143\u683c\uff0c\u5426\u5219\u4f1a\u51fa\u73b0#DIV/0!</span></p>\n<p>A1\u662f\u5de6\u4e0a\u89d2\uff0cA10\u662f\u53f3\u4e0b\u89d2\uff0c\u8f93\u5165\u540ectrl+shift+enter\u5c31\u663e\u793a\u533a\u57df\u5185\u4e0d\u91cd\u590d\u5355\u5143\u683c\u7684\u4e2a\u6570\u4e86\u3002</p>"
			}, {
				"title": "\u88c5Ubuntu\u9047\u5230\u86cb\u75bc\u7684\u4e0b\u8f7dwubi-amd64.tar.xz\uff1f",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/29/2744858.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 29 Oct 2012 07:45:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/29/2744858.html",
				"description": "<p><span style=\"font-size: 18px;\">\u4ee5\u524d\u600e\u4e48\u6ca1\u6ce8\u610f\u8fc7\u8fd9\u4e2a\u95ee\u9898\uff0c\u4eca\u5929\u5b89\u88c5ubuntu12.04\uff0c\u628aiso\u89e3\u538b\uff0c\u8fd0\u884c\u6587\u4ef6\u5939\u91cc\u552f\u4e00\u7684.exe\u6587\u4ef6\uff08wubi.exe\uff09\uff0c\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u8981\u4e0b\u8f7d\u5341\u51e0\u4e2a\u5c0f\u65f6\u7684wubi-amd64.tar.xz\u8fd9\u4e2a\u4e1c\u897f\uff0c\u597d\u5947\u602a\u3002</span></p>\n<p><span style=\"font-size: 18px;\">\u7136\u540e\uff0c\u628awubi.exe\u5355\u72ec\u526a\u51fa\u6765\uff0c\u653e\u5230\u548c.iso\u6587\u4ef6\u76f8\u540c\u76ee\u5f55\u4e0b\uff0c\u518d\u8fd0\u884cwubi.exe\uff0c\u597d\u4e86\uff0c\u4e0d\u4e0b\u8f7d\u90a3\u4e1c\u897f\u4e86\u3002\u3002\u3002\u5b89\u88c5\u6210\u529f\uff01</span></p>"
			}, {
				"title": "HDU3272 Mission Impossible",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/26/2741873.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Fri, 26 Oct 2012 14:14:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/26/2741873.html",
				"description": "<p>\u4e09\u70b9\u6784\u6210\u4e09\u4e2a\u70b9\u5bf9\u7684\u8def\u5f84\uff0cx\u8f74\u3001y\u8f74\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u5bf9\u7684\u8def\u5f84\u7ecf\u8fc7\u3002</p>\n<p>\u679a\u4e3e\u6bcf\u7ec4\u70b9\u5bf9\u7684\u8def\u5f84\u8ba9\u5176\u7ecf\u8fc7\u4e00\u4e2a\u8f74\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u540c\u65f6\u7ecf\u8fc7\u4e24\u4e2a\u8f74\u3002\u5728\u6240\u6709\u60c5\u51b5\u4e2d\u53d6\u6700\u5c0f\u7b54\u6848\u3002</p>\n<p>\u5f53\u5750\u6807\u5728\u8f74\u540c\u4e00\u4fa7\u65f6\uff0c\u5bf9\u5176\u4e2d\u4e00\u4e2a\u70b9\u7684\u8be5\u5750\u6807\u53d6\u53cd\uff0c\u5f97\u5230\u7684\u65b0\u70b9\u6c42\u8ddd\u79bb\u5c31\u662f\u955c\u9762\u53cd\u5c04\u7684\u8ddd\u79bb\u3002</p>\n<p>\u5982\u679c\u5728\u4e0d\u540c\u4fa7\uff0c\u5c31\u76f4\u63a5\u6c42\u8ddd\u79bb\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\"> 4</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\"> 5</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 6</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 9</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;\n</span><span style=\"color: #008080;\">10</span>     <span style=\"color: #0000ff;\">double</span> Dis(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>{<span style=\"color: #0000ff;\">return</span> sqrt(Sqr(x - b.x) + Sqr(y -<span style=\"color: #000000;\"> b.y));}\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">12</span> Point p[<span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">], lin;\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #0000ff;\">double</span> CalDis(<span style=\"color: #0000ff;\">int</span> i, <span style=\"color: #0000ff;\">bool</span> nx, <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> ny)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">15</span>     Point lin =<span style=\"color: #000000;\"> p[i];\n</span><span style=\"color: #008080;\">16</span>     <span style=\"color: #0000ff;\">if</span>(nx &amp;&amp; p[i].x * p[i + <span style=\"color: #800080;\">1</span>].x &gt; -eps) lin.x = -<span style=\"color: #000000;\">lin.x;\n</span><span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">if</span>(ny &amp;&amp; p[i].y * p[i + <span style=\"color: #800080;\">1</span>].y &gt; -eps) lin.y = -<span style=\"color: #000000;\">lin.y;\n</span><span style=\"color: #008080;\">18</span>     <span style=\"color: #0000ff;\">return</span> lin.Dis(p[i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> t, i, j;\n</span><span style=\"color: #008080;\">23</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> dis, ans;\n</span><span style=\"color: #008080;\">24</span>     <span style=\"color: #0000ff;\">for</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;t); t --<span style=\"color: #000000;\">; )\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">3</span>; i ++) scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;p[i].x, &amp;<span style=\"color: #000000;\">p[i].y);\n</span><span style=\"color: #008080;\">27</span>         p[<span style=\"color: #800080;\">3</span>] = p[<span style=\"color: #800080;\">0</span>], ans =<span style=\"color: #000000;\"> 1e30;\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">3</span>; i ++) <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">3</span>; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">30</span>             dis = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">31</span>             <span style=\"color: #0000ff;\">if</span>(i == j) dis = CalDis(i, <span style=\"color: #0000ff;\">true</span>, <span style=\"color: #0000ff;\">true</span>) + p[i + <span style=\"color: #800080;\">1</span>].Dis(p[(i + <span style=\"color: #800080;\">2</span>) % <span style=\"color: #800080;\">3</span>]) + p[i].Dis(p[(i + <span style=\"color: #800080;\">2</span>) % <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">32</span>             <span style=\"color: #0000ff;\">else</span> dis = CalDis(i, <span style=\"color: #0000ff;\">true</span>, <span style=\"color: #0000ff;\">false</span>) + CalDis(j, <span style=\"color: #0000ff;\">false</span>, <span style=\"color: #0000ff;\">true</span>) + p[<span style=\"color: #800080;\">3</span> - i - j].Dis(p[<span style=\"color: #800080;\">4</span> - i -<span style=\"color: #000000;\"> j]);\n</span><span style=\"color: #008080;\">33</span>             ans =<span style=\"color: #000000;\"> std::min(ans, dis);\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">35</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.2f\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">37</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">38</span> }</pre>\n</div>"
			}, {
				"title": "HDU4439_No place to hide 2012 ICPC Tianjin Site I \u9898",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/26/2741459.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Fri, 26 Oct 2012 08:39:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/26/2741459.html",
				"description": "<p>\u96be\u9053\u548c I \u9898\u8fd9\u4e48\u6709\u7f18\u4e48\uff1f\u957f\u6625\u4e5f\u662f I \u9898&hellip;&hellip;</p>\n<p>1\u3001\u5982\u679c\u6709\u67d0\u4e2a\u8ffd\u9010\u70b9\u7684\u901f\u5ea6\u5927\u4e8e\u76ee\u6807\u70b9\uff0c\u6216\u8005\u4f4d\u7f6e\u4e0e\u76ee\u6807\u70b9\u91cd\u5408\uff0c\u5219\u7b54\u6848\u4e3a1\uff1b</p>\n<p>2\u3001\u8ffd\u9010\u70b9\u901f\u5ea6\u4e0d\u5927\u4e8e\u76ee\u6807\u70b9\u65f6\uff0c\u76ee\u6807\u70b9\u6709\u4e00\u4e2a\u65b9\u5411\u4e0a\u7684\u5706\u5468\u533a\u95f4\u53ef\u4ee5\u88ab\u8ffd\u5230\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u533a\u95f4\u7684\u8303\u56f4\uff1b</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012102616372864.jpg\" alt=\"\" /></p>\n<p>\u5230\u4e24\u70b9\u8ddd\u79bb\u6210\u6bd4\u4f8b\u7684\u70b9\u8f68\u8ff9\u662f\u5706\uff0c\u7528\u5706\u6c42\u5207\u7ebf\u5e94\u8be5\u4e5f\u80fd\u505a\u3002</p>\n<p>3\u3001\u8f6c\u5316\u4e3a\u6700\u5c0f\u533a\u95f4\u8986\u76d6\uff0c\u56e0\u4e3a\u5728\u5706\u5468\u4e0a\uff0c\u6240\u4ee5\u679a\u4e3e\u4e00\u4e0b\u8d77\u70b9\uff0c\u603b\u590d\u6742\u5ea6O(Nlogn+N^2)=O(N^2)</p>\n<p>\u6bd4\u8d5b\u65f6\u5019\u8111\u5b50\u62bd\u4e86\uff0c\u7adf\u7136\u5fd8\u4e86\u533a\u95f4\u8986\u76d6\u600e\u4e48\u5199\uff01\u6700\u540e\u5341\u5206\u949f\u6ca1\u8c03\u51fa\u6765\u3002\u82e5\u662f\u6709\u8fd9\u4e00\u9898\uff0c\u5e94\u8be5\u5c31\u7a33\u8fdbFinal\u4e86\u5427\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\">  6</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">1011</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 10</span> inline <span style=\"color: #0000ff;\">double</span> dcmp(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> (x &gt; eps) - (x &lt; -<span style=\"color: #000000;\">eps);}\n</span><span style=\"color: #008080;\"> 11</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 14</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y, v;\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #000000;\">    Point(){}\n</span><span style=\"color: #008080;\"> 16</span>     Point(<span style=\"color: #0000ff;\">double</span> x_, <span style=\"color: #0000ff;\">double</span> y_){x = x_, y =<span style=\"color: #000000;\"> y_;}\n</span><span style=\"color: #008080;\"> 17</span>     <span style=\"color: #0000ff;\">double</span> Dis(Point &amp;b){<span style=\"color: #0000ff;\">return</span> sqrt(Sqr(x - b.x) + Sqr(y -<span style=\"color: #000000;\"> b.y));}\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #000000;\">Point p[maxn], th;\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #0000ff;\">void</span> AngManage(<span style=\"color: #0000ff;\">double</span> &amp;<span style=\"color: #000000;\">x)\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 23</span>     <span style=\"color: #0000ff;\">while</span>(x + pi &lt; -eps) x += pi +<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\"> 24</span>     <span style=\"color: #0000ff;\">while</span>(x - pi &gt; -eps) x -= pi +<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 26</span> inline <span style=\"color: #0000ff;\">double</span> CounterAng(<span style=\"color: #0000ff;\">double</span> s, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> e)\n</span><span style=\"color: #008080;\"> 27</span> {<span style=\"color: #0000ff;\">return</span> e &gt; s + eps ? e - s : pi + pi + e -<span style=\"color: #000000;\"> s;}\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Cov\n</span><span style=\"color: #008080;\"> 29</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 30</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> s, e;\n</span><span style=\"color: #008080;\"> 31</span>     <span style=\"color: #0000ff;\">void</span> Read(<span style=\"color: #0000ff;\">double</span> s_, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> e_)\n</span><span style=\"color: #008080;\"> 32</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #000000;\">        AngManage(s_), AngManage(e_);\n</span><span style=\"color: #008080;\"> 34</span>         s = s_, e =<span style=\"color: #000000;\"> e_;\n</span><span style=\"color: #008080;\"> 35</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 36</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Cov &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 37</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 38</span>         <span style=\"color: #0000ff;\">if</span>(!dcmp(s - b.s)) <span style=\"color: #0000ff;\">return</span> CounterAng(s, e) &gt;<span style=\"color: #000000;\"> CounterAng(b.s, b.e);\n</span><span style=\"color: #008080;\"> 39</span>         <span style=\"color: #0000ff;\">return</span> s &lt;<span style=\"color: #000000;\"> b.s;\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #000000;\">} cover[maxn], cc[maxn];\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 44</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> t, i, j, k, ans, cnt;\n</span><span style=\"color: #008080;\"> 45</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> flag;\n</span><span style=\"color: #008080;\"> 46</span>     <span style=\"color: #0000ff;\">for</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;t); t --<span style=\"color: #000000;\">; )\n</span><span style=\"color: #008080;\"> 47</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 48</span>         flag = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 49</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">n);\n</span><span style=\"color: #008080;\"> 50</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;th.v, &amp;th.x, &amp;<span style=\"color: #000000;\">th.y);\n</span><span style=\"color: #008080;\"> 51</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 52</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 53</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;p[i].v, &amp;p[i].x, &amp;<span style=\"color: #000000;\">p[i].y);\n</span><span style=\"color: #008080;\"> 54</span>             <span style=\"color: #0000ff;\">if</span>(p[i].v &gt; th.v + eps || !dcmp(p[i].Dis(th))) flag = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 55</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 56</span>         <span style=\"color: #0000ff;\">if</span>(flag) {printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">1\\n</span><span style=\"color: #800000;\">\"</span>); <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 57</span>         <span style=\"color: #0000ff;\">if</span>(!dcmp(th.v)) {printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">0\\n</span><span style=\"color: #800000;\">\"</span>); <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 58</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 59</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 60</span>             <span style=\"color: #0000ff;\">double</span> ang = atan2(p[i].y - th.y, p[i].x -<span style=\"color: #000000;\"> th.x);\n</span><span style=\"color: #008080;\"> 61</span>             <span style=\"color: #0000ff;\">if</span>(p[i].v &gt; th.v -<span style=\"color: #000000;\"> eps)\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 63</span>                 cover[i].Read(ang - pi * <span style=\"color: #800080;\">0.5</span>, ang + pi * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 64</span>                 <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 65</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 66</span>             <span style=\"color: #0000ff;\">double</span> c =<span style=\"color: #000000;\"> p[i].Dis(th);\n</span><span style=\"color: #008080;\"> 67</span>             <span style=\"color: #0000ff;\">double</span> T = sqrt(Sqr(c) / (Sqr(th.v) -<span style=\"color: #000000;\"> Sqr(p[i].v)));\n</span><span style=\"color: #008080;\"> 68</span>             <span style=\"color: #0000ff;\">double</span> cs = acos(c / T /<span style=\"color: #000000;\"> th.v);\n</span><span style=\"color: #008080;\"> 69</span>             cover[i].Read(ang - cs, ang +<span style=\"color: #000000;\"> cs);\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 71</span>         sort(cover, cover +<span style=\"color: #000000;\"> n);\n</span><span style=\"color: #008080;\"> 72</span>         <span style=\"color: #0000ff;\">for</span>(i = k = <span style=\"color: #800080;\">1</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 73</span>             <span style=\"color: #0000ff;\">if</span>(dcmp(cover[i].s - cover[i - <span style=\"color: #800080;\">1</span>].s)) cover[k ++] =<span style=\"color: #000000;\"> cover[i];\n</span><span style=\"color: #008080;\"> 74</span>         n =<span style=\"color: #000000;\"> k;\n</span><span style=\"color: #008080;\"> 75</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>, ans = <span style=\"color: #800080;\">0x3f3f3f3f</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 76</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 77</span>             <span style=\"color: #0000ff;\">for</span>(j = i, k = <span style=\"color: #800080;\">0</span>; ; j = (j + <span style=\"color: #800080;\">1</span>) %<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 78</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 79</span>                 cc[k].Read(cover[j].s - cover[i].s - pi, cover[j].e - cover[i].s -<span style=\"color: #000000;\"> pi);\n</span><span style=\"color: #008080;\"> 80</span>                 <span style=\"color: #0000ff;\">if</span>(cc[k].s &gt; cc[k].e) cc[k].e = pi +<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\"> 81</span>                 ++<span style=\"color: #000000;\"> k;\n</span><span style=\"color: #008080;\"> 82</span>                 <span style=\"color: #0000ff;\">if</span>(j == (i + n - <span style=\"color: #800080;\">1</span>) % n) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 83</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 84</span>             <span style=\"color: #0000ff;\">double</span> now = -pi - pi, nex = -<span style=\"color: #000000;\">pi;\n</span><span style=\"color: #008080;\"> 85</span>             flag = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 86</span>             <span style=\"color: #0000ff;\">for</span>(j = cnt = <span style=\"color: #800080;\">0</span>; j &lt; n; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 87</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 88</span>                 <span style=\"color: #0000ff;\">if</span>(cc[j].e &lt; now + eps) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 89</span>                 <span style=\"color: #0000ff;\">if</span>(cc[j].s &gt; nex + eps) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 90</span>                 <span style=\"color: #0000ff;\">if</span>(cc[j].s &gt; now +<span style=\"color: #000000;\"> eps)\n</span><span style=\"color: #008080;\"> 91</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\"> 92</span>                     ++<span style=\"color: #000000;\"> cnt;\n</span><span style=\"color: #008080;\"> 93</span>                     now =<span style=\"color: #000000;\"> nex;\n</span><span style=\"color: #008080;\"> 94</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\"> 95</span>                 <span style=\"color: #0000ff;\">if</span>(cc[j].e &gt; nex + eps) nex =<span style=\"color: #000000;\"> cc[j].e;\n</span><span style=\"color: #008080;\"> 96</span>                 <span style=\"color: #0000ff;\">if</span>(nex &gt; pi - eps) {flag = <span style=\"color: #0000ff;\">true</span>; <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 97</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 98</span>             <span style=\"color: #0000ff;\">if</span>(flag) ans =<span style=\"color: #000000;\"> min(ans, cnt);\n</span><span style=\"color: #008080;\"> 99</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">100</span>         <span style=\"color: #0000ff;\">if</span>(ans == <span style=\"color: #800080;\">0x3f3f3f3f</span>) ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">101</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">102</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">103</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">104</span> }</pre>\n</div>"
			}, {
				"title": "ZOJ3663_Polaris of Pandora 2012 ICPC Changchun Site I \u9898",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/17/2728088.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 17 Oct 2012 09:24:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/17/2728088.html",
				"description": "<p>\u5148\u662f\u7528\u7ecf\u7eac\u5ea6\u7b97\uff0c\u8c03\u4e86\u5f88\u4e45\uff0c\u5b9e\u5728\u4e0d\u4f1a\u5982\u4f55\u7528\u7ecf\u7eac\u5ea6\u6c42\u4ea4\u70b9\uff0c\u767e\u5ea6\u8c37\u6b4c\u4e5f\u627e\u4e0d\u5230\u3002\u7528\u4e09\u5206\u6cd5\u6c42\u4e86\u4ea4\u70b9\uff0c\u6709\u95ee\u9898\u3002\u3002\u3002</p>\n<p>\u4e0d\u5f97\u5df2\u5404\u79cd\u4e09\u89d2\u51fd\u6570\u53cd\u4e09\u89d2\u51fd\u6570\u5750\u6807\u65cb\u8f6c\u795e\u9a6c\u7684\u90fd\u7528\u4e0a\u4e86\uff0c\u786c\u662f\u6c42\u51fa\u4e09\u7ef4\u5750\u6807\u7cfb\u7684\u5404\u79cd\u70b9\u518d\u7b97\uff0c\u7cbe\u5ea6\u90fd\u4e0d\u77e5\u635f\u5230\u54ea\u91cc\u53bb\u4e86\uff0c\u7adf\u7136\u80fdAC\u4e86\u3002\u3002\u3002</p>\n<p>1\u3001\u7b97\u4e34\u754c\u7ebf\u7684\u7eac\u5ea6</p>\n<p>2\u3001\u5224\u65ad\u884c\u7a0b\u6240\u5728\u5e73\u9762\u7684&ldquo;\u659c\u7387&rdquo;\u662f\u5426\u80fd\u4e0e\u4e34\u754c\u7ebf\u76f8\u4ea4\uff0c\u4e0d\u76f8\u4ea4\u5219100.000</p>\n<p>3\u3001\u628a\u884c\u7a0b\u5e73\u9762\u7684x\u65b9\u5411\u65cb\u8f6c\u5230x\u8f74\u6b63\u65b9\u5411\u7b97\u51fa\u4e0e\u4e34\u754c\u7ebf\u4ea4\u70b9\uff0c\u518d\u5728\u4e34\u754c\u9762\u65cb\u8f6c\u5230\u884c\u7a0b\u9762\u4e0e\u4e34\u754c\u9762\u4ea4\u70b9</p>\n<p>4\u3001\u7528\u7403\u9762\u8ddd\u79bb\u548cz\u5750\u6807\u7ed3\u5408\u5224\u65ad\u8ba1\u7b97\u533a\u95f4\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span>  #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span>  #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span>  #include&lt;math.h&gt;\n<span style=\"color: #008080;\"> 5</span>  #include&lt;vector&gt;\n<span style=\"color: #008080;\"> 6</span>  #include&lt;list&gt;\n<span style=\"color: #008080;\"> 7</span>  #include&lt;algorithm&gt;\n<span style=\"color: #008080;\"> 8</span>  #include&lt;iostream&gt;\n<span style=\"color: #008080;\"> 9</span>  <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\">10</span>  <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span>  <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">12</span>  inline <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span> x){<span style=\"color: #0000ff;\">return</span> (x &gt; eps) - (x &lt; -<span style=\"color: #000000;\">eps);}\n</span><span style=\"color: #008080;\">13</span>  inline <span style=\"color: #0000ff;\">double</span> pz(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> dcmp(x) ? x : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\">14</span>  inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\">15</span>  inline <span style=\"color: #0000ff;\">double</span> pcs(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> x &gt; <span style=\"color: #800080;\">1</span> ? <span style=\"color: #800080;\">1</span> : (x &lt; -<span style=\"color: #800080;\">1</span> ? -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\"> : x);}\n</span><span style=\"color: #008080;\">16</span>  <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point3\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\">18</span>      <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y, z;\n</span><span style=\"color: #008080;\">19</span>      Point3(){x = y = z = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\">20</span>      Point3(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span> b, <span style=\"color: #0000ff;\">double</span> c){x = a, y = b, z =<span style=\"color: #000000;\"> c;}\n</span><span style=\"color: #008080;\">21</span>      Point3 cross(Point3 p){<span style=\"color: #0000ff;\">return</span>\n<span style=\"color: #008080;\">22</span>          Point3(y * p.z - p.y * z, z * p.x - x * p.z, x * p.y - y *<span style=\"color: #000000;\"> p.x);}\n</span><span style=\"color: #008080;\">23</span>      <span style=\"color: #0000ff;\">double</span> dot(Point3 p){<span style=\"color: #0000ff;\">return</span> x * p.x + y * p.y + z *<span style=\"color: #000000;\"> p.z;}\n</span><span style=\"color: #008080;\">24</span>      Point3 <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>{<span style=\"color: #0000ff;\">return</span> Point3(x - p.x, y - p.y, z -<span style=\"color: #000000;\"> p.z);}\n</span><span style=\"color: #008080;\">25</span>      Point3 <span style=\"color: #0000ff;\">operator</span>-()<span style=\"color: #0000ff;\">const</span>{<span style=\"color: #0000ff;\">return</span> Point3(-x, -y, -<span style=\"color: #000000;\">z);}\n</span><span style=\"color: #008080;\">26</span>      Point3 <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>{<span style=\"color: #0000ff;\">return</span> Point3(x + p.x, y + p.y, z +<span style=\"color: #000000;\"> p.z);}\n</span><span style=\"color: #008080;\">27</span>      Point3 <span style=\"color: #0000ff;\">operator</span>*(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> &amp;b)<span style=\"color: #0000ff;\">const</span>{<span style=\"color: #0000ff;\">return</span> Point3(x * b, y * b, z *<span style=\"color: #000000;\"> b);}\n</span><span style=\"color: #008080;\">28</span>      Point3 <span style=\"color: #0000ff;\">operator</span>/(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> &amp;b)<span style=\"color: #0000ff;\">const</span>{<span style=\"color: #0000ff;\">return</span> Point3(x / b, y / b, z /<span style=\"color: #000000;\"> b);}\n</span><span style=\"color: #008080;\">29</span>      Point3 fxl(Point3 b, Point3 c){<span style=\"color: #0000ff;\">return</span> (*<span style=\"color: #0000ff;\">this</span> - b).cross(b -<span style=\"color: #000000;\"> c);}\n</span><span style=\"color: #008080;\">30</span>      <span style=\"color: #0000ff;\">double</span> Dis(Point3 b){<span style=\"color: #0000ff;\">return</span> sqrt((*<span style=\"color: #0000ff;\">this</span> - b).dot(*<span style=\"color: #0000ff;\">this</span> -<span style=\"color: #000000;\"> b));}\n</span><span style=\"color: #008080;\">31</span>      <span style=\"color: #0000ff;\">double</span> Rdis(Point3 b, <span style=\"color: #0000ff;\">double</span> R){<span style=\"color: #0000ff;\">return</span> R * asin(pcs((*<span style=\"color: #0000ff;\">this</span>).Dis(b) * <span style=\"color: #800080;\">0.5</span> / R)) * <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\">32</span>      <span style=\"color: #0000ff;\">double</span> vlen(){<span style=\"color: #0000ff;\">return</span> sqrt(dot(*<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">));}\n</span><span style=\"color: #008080;\">33</span>      Point3 RotePoint(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> ang)\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">     {\n</span><span style=\"color: #008080;\">35</span>          <span style=\"color: #0000ff;\">return</span> Point3((p.x - x) * cos(ang) - (p.y - y) * sin(ang) +<span style=\"color: #000000;\"> x,\n</span><span style=\"color: #008080;\">36</span>                  (p.x - x) * sin(ang) + (p.y - y) * cos(ang) +<span style=\"color: #000000;\"> y, p.z);\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">     }\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\"> };\n</span><span style=\"color: #008080;\">39</span>  <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> R, H, lat1, lng1, lat2, lng2, lat;\n</span><span style=\"color: #008080;\">40</span>  inline <span style=\"color: #0000ff;\">double</span> p2cross(<span style=\"color: #0000ff;\">const</span> Point3 &amp;a, <span style=\"color: #0000ff;\">const</span> Point3 &amp;b, <span style=\"color: #0000ff;\">const</span> Point3 &amp;<span style=\"color: #000000;\">c)\n</span><span style=\"color: #008080;\">41</span>  {<span style=\"color: #0000ff;\">return</span> (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y -<span style=\"color: #000000;\"> a.y);}\n</span><span style=\"color: #008080;\">42</span>  Point3 r(<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">43</span>  <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\">45</span>      <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;R, &amp;H, &amp;lat1, &amp;lng1, &amp;lat2, &amp;lng2) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">46</span> <span style=\"color: #000000;\">     {\n</span><span style=\"color: #008080;\">47</span>          <span style=\"color: #0000ff;\">double</span> R_ = R; lat = acos(R / (R + H)); R +=<span style=\"color: #000000;\"> H;\n</span><span style=\"color: #008080;\">48</span>          lat1 += pi * <span style=\"color: #800080;\">0.5</span>, lat2 += pi * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">49</span>          Point3 s(R * sin(lat1) * cos(lng1), R * sin(lat1) * sin(lng1), R *<span style=\"color: #000000;\"> cos(lat1));\n</span><span style=\"color: #008080;\">50</span>          Point3 e(R * sin(lat2) * cos(lng2), R * sin(lat2) * sin(lng2), R *<span style=\"color: #000000;\"> cos(lat2));\n</span><span style=\"color: #008080;\">51</span>          Point3 f =<span style=\"color: #000000;\"> r.fxl(s, e);\n</span><span style=\"color: #008080;\">52</span>          <span style=\"color: #0000ff;\">double</span> <span style=\"color: #0000ff;\">as</span> = asin(pcs(fabs(f.cross(Point3(<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">100</span>)).vlen() / f.vlen() / <span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">)));\n</span><span style=\"color: #008080;\">53</span>          <span style=\"color: #0000ff;\">if</span>(<span style=\"color: #0000ff;\">as</span> &lt; lat + eps) {printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">100.000\\n</span><span style=\"color: #800000;\">\"</span>); <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\">54</span>          <span style=\"color: #0000ff;\">double</span> len = R * sin(lat) / tan(<span style=\"color: #0000ff;\">as</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">55</span>          Point3 jd1(len, sqrt(Sqr(R_) - Sqr(len)), -R *<span style=\"color: #000000;\"> sin(lat));\n</span><span style=\"color: #008080;\">56</span>          Point3 jd2(len, -sqrt(Sqr(R_) - Sqr(len)), -R *<span style=\"color: #000000;\"> sin(lat));\n</span><span style=\"color: #008080;\">57</span>          <span style=\"color: #0000ff;\">if</span>(f.z &lt; -eps) f = -<span style=\"color: #000000;\">f;\n</span><span style=\"color: #008080;\">58</span>          <span style=\"color: #0000ff;\">double</span> ang =<span style=\"color: #000000;\"> atan2(f.y, f.x);\n</span><span style=\"color: #008080;\">59</span>          jd1 = r.RotePoint(jd1, ang), jd2 =<span style=\"color: #000000;\"> r.RotePoint(jd2, ang);\n</span><span style=\"color: #008080;\">60</span>          <span style=\"color: #0000ff;\">double</span> s1d = s.Rdis(jd1, R), s2d =<span style=\"color: #000000;\"> s.Rdis(jd2, R);\n</span><span style=\"color: #008080;\">61</span>          <span style=\"color: #0000ff;\">double</span> e1d = e.Rdis(jd1, R), e2d =<span style=\"color: #000000;\"> e.Rdis(jd2, R);\n</span><span style=\"color: #008080;\">62</span>          <span style=\"color: #0000ff;\">double</span> sed = s.Rdis(e, R), jd =<span style=\"color: #000000;\"> jd1.Rdis(jd2, R);\n</span><span style=\"color: #008080;\">63</span>          <span style=\"color: #0000ff;\">if</span>(!dcmp(s1d + e1d - sed) &amp;&amp; !dcmp(s2d + e2d -<span style=\"color: #000000;\"> sed))\n</span><span style=\"color: #008080;\">64</span>              printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.3f\\n</span><span style=\"color: #800000;\">\"</span>, (sed - jd) / sed * <span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">65</span>          <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(!dcmp(s1d + e1d -<span style=\"color: #000000;\"> sed))\n</span><span style=\"color: #008080;\">66</span> <span style=\"color: #000000;\">         {\n</span><span style=\"color: #008080;\">67</span>              <span style=\"color: #0000ff;\">if</span>(e.z &lt; s.z) printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.3f\\n</span><span style=\"color: #800000;\">\"</span>, s1d / sed * <span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">68</span>              <span style=\"color: #0000ff;\">else</span> printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.3f\\n</span><span style=\"color: #800000;\">\"</span>, e1d / sed * <span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">69</span> <span style=\"color: #000000;\">         }\n</span><span style=\"color: #008080;\">70</span>          <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(!dcmp(s2d + e2d -<span style=\"color: #000000;\"> sed))\n</span><span style=\"color: #008080;\">71</span> <span style=\"color: #000000;\">         {\n</span><span style=\"color: #008080;\">72</span>              <span style=\"color: #0000ff;\">if</span>(e.z &lt; s.z) printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.3f\\n</span><span style=\"color: #800000;\">\"</span>, s2d / sed * <span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">73</span>              <span style=\"color: #0000ff;\">else</span> printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.3f\\n</span><span style=\"color: #800000;\">\"</span>, e2d / sed * <span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">74</span> <span style=\"color: #000000;\">         }\n</span><span style=\"color: #008080;\">75</span>          <span style=\"color: #0000ff;\">else</span> printf(e.z &lt; jd1.z ? <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">0.000\\n</span><span style=\"color: #800000;\">\"</span> : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">100.000\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">76</span> <span style=\"color: #000000;\">     }\n</span><span style=\"color: #008080;\">77</span>      <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">78</span>  }</pre>\n</div>"
			}, {
				"title": "BZOJ2592: [Usaco2012 Feb]Symmetry",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/11/2720084.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Thu, 11 Oct 2012 08:01:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/10/11/2720084.html",
				"description": "<p>\u7279\u522b\u9009\u51fa\u5176\u4e2d\u4e24\u4e2a\u70b9\uff0c\u6bd4\u5982p[0]\u548cp[1]\uff0c\u4e24\u4e2a\u70b9\u8981\u4e48\u5728\u5bf9\u79f0\u8f74\u4e0a\uff0c\u8981\u4e48\u4e00\u4e2a\u5728\u5bf9\u79f0\u8f74\u4e0a\uff0c\u8981\u4e48\u662f\u5bf9\u79f0\u70b9\uff0c\u8981\u4e48\u5206\u522b\u548c\u5176\u4ed6\u70b9\u5bf9\u79f0\u800c\u5171\u4eab\u4e00\u4e2a\u5bf9\u79f0\u8f74\u3002</p>\n<p>\u8fd9\u6837\u679a\u4e3e\u5176\u4ed6\u70b9\u548c\u8fd9\u4e24\u70b9\u6784\u6210\u5bf9\u79f0\u8f74\uff0c\u53ef\u4ee5\u679a\u4e3e\u51fa2n\u4e2a\u5bf9\u79f0\u8f74\uff0c\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4e2d\u95f4\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u5176\u4e2d\u4e00\u4e2a\u70b9\u5728\u5bf9\u79f0\u8f74\u4e0a\u3002</p>\n<p>\u5bf9\u4e8e\u679a\u4e3e\u5f97\u5230\u7684O(n)\u4e2a\u5bf9\u79f0\u8f74\uff0c\u7528set\u6216hash\u7684\u65b9\u6cd5\u5b58\u70b9\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u5bf9\u79f0\u70b9\u662f\u5426\u5b58\u5728\u7684\u65b9\u6cd5O(nlogn)\u6216O(n)\u6765\u5224\u65ad\u662f\u5426\u662f\u5bf9\u79f0\u8f74\u4e86\u3002</p>\n<p>\u6ca1\u60f3\u523036ms\uff0cset\u8fd8\u633a\u5feb\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\"> 5</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\"> 6</span> #include&lt;<span style=\"color: #0000ff;\">set</span>&gt;\n<span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">1111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> (x &gt; eps) - (x &lt; -<span style=\"color: #000000;\">eps);}\n</span><span style=\"color: #008080;\">12</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">14</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">16</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;\n</span><span style=\"color: #008080;\">17</span>     Point(){x = y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\">18</span>     Point(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\">19</span>     {x = a, y =<span style=\"color: #000000;\"> b;}\n</span><span style=\"color: #008080;\">20</span>     inline Point <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">21</span>     {<span style=\"color: #0000ff;\">return</span> Point(x - b.x, y -<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\">22</span>     inline Point <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">23</span>     {<span style=\"color: #0000ff;\">return</span> Point(x + b.x, y +<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\">24</span>     inline Point <span style=\"color: #0000ff;\">operator</span>*(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">25</span>     {<span style=\"color: #0000ff;\">return</span> Point(x * b, y *<span style=\"color: #000000;\"> b);}\n</span><span style=\"color: #008080;\">26</span>     inline <span style=\"color: #0000ff;\">double</span> dot(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">27</span>     {<span style=\"color: #0000ff;\">return</span> x * b.x + y *<span style=\"color: #000000;\"> b.y;}\n</span><span style=\"color: #008080;\">28</span>     inline <span style=\"color: #0000ff;\">double</span> cross(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">29</span>     {<span style=\"color: #0000ff;\">return</span> (b.x - x) * (c.y - y) - (c.x - x) * (b.y -<span style=\"color: #000000;\"> y);}\n</span><span style=\"color: #008080;\">30</span>     inline <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">31</span>     {<span style=\"color: #0000ff;\">return</span> dcmp(x - b.x) ? x &lt; b.x : y &lt;<span style=\"color: #000000;\"> b.y;}\n</span><span style=\"color: #008080;\">32</span>     inline <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>==(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">33</span>     {<span style=\"color: #0000ff;\">return</span> !dcmp(x - b.x) &amp;&amp; !dcmp(y -<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">Point p[maxn], mps, mpe;\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #0000ff;\">set</span>&lt;Point&gt;<span style=\"color: #000000;\"> s;\n</span><span style=\"color: #008080;\">38</span> Point LineCross(<span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">d)\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">40</span>     <span style=\"color: #0000ff;\">double</span> u = a.cross(b, c), v =<span style=\"color: #000000;\"> b.cross(a, d);\n</span><span style=\"color: #008080;\">41</span>     <span style=\"color: #0000ff;\">return</span> Point((c.x * v + d.x * u) / (u + v), (c.y * v + d.y * u) / (u +<span style=\"color: #000000;\"> v));\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">43</span> Point AntiPoint(<span style=\"color: #0000ff;\">const</span> Point &amp;p, <span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">45</span>     <span style=\"color: #0000ff;\">if</span>(a == b) <span style=\"color: #0000ff;\">return</span> Point(a.x + a.x - p.x, a.y + a.y -<span style=\"color: #000000;\"> p.y);\n</span><span style=\"color: #008080;\">46</span>     Point tmp(p.x + a.y - b.y, p.y + b.x -<span style=\"color: #000000;\"> a.x);\n</span><span style=\"color: #008080;\">47</span>     <span style=\"color: #0000ff;\">return</span> LineCross(p, tmp, a, b) * <span style=\"color: #800080;\">2</span> -<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">48</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> Judge(Point a, Point b)\n</span><span style=\"color: #008080;\">50</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">51</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">52</span>         <span style=\"color: #0000ff;\">if</span>(!s.count(AntiPoint(p[i], a, b))) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">53</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">54</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">55</span> <span style=\"color: #0000ff;\">bool</span> MakeMP(Point a, Point b, Point &amp;c, Point &amp;<span style=\"color: #000000;\">d)\n</span><span style=\"color: #008080;\">56</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">57</span>     <span style=\"color: #0000ff;\">if</span>(a == b) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">58</span>     c = (a + b) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">59</span>     d = Point(c.x + a.y - b.y, c.y + b.x -<span style=\"color: #000000;\"> a.x);\n</span><span style=\"color: #008080;\">60</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">61</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">62</span> \n<span style=\"color: #008080;\">63</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">64</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">65</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, ans;\n</span><span style=\"color: #008080;\">66</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;n) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">67</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">68</span> <span style=\"color: #000000;\">        s.clear();\n</span><span style=\"color: #008080;\">69</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++ i) scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;p[i].x, &amp;<span style=\"color: #000000;\">p[i].y), s.insert(p[i]);\n</span><span style=\"color: #008080;\">70</span>         ans = Judge(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">71</span>         MakeMP(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">], mps, mpe);\n</span><span style=\"color: #008080;\">72</span>         ans +=<span style=\"color: #000000;\"> Judge(mps, mpe);\n</span><span style=\"color: #008080;\">73</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">2</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">74</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">75</span>             MakeMP(p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">], p[i], mps, mpe);\n</span><span style=\"color: #008080;\">76</span>             ans +=<span style=\"color: #000000;\"> Judge(mps, mpe);\n</span><span style=\"color: #008080;\">77</span>             MakeMP(p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">], p[i], mps, mpe);\n</span><span style=\"color: #008080;\">78</span>             ans += Judge(mps, mpe) &amp;&amp; !dcmp(p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].cross(mps, mpe));\n</span><span style=\"color: #008080;\">79</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">80</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">81</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">82</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">83</span> }</pre>\n</div>"
			}, {
				"title": "HDU4290 Counting Formations",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/17/2688142.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Sun, 16 Sep 2012 18:13:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/17/2688142.html",
				"description": "<p>Staginner\u527d\u608d\u5730\u62bd\u8c61\u51fa\u4e86\u6570\u5b66\u6a21\u578b\u5e76\u63a8\u51fa\u4e86\u5404\u9879\u6570\u636e\uff0c\u4e07\u4e8b\u4ff1\u5907\u53ea\u6b20\u4e1c\u98ce\uff0c\u53ef\u60dc\u6700\u540e\u4e00\u6b65\u63a8\u9519\u4e86\uff0c\u6bd4\u8d5b\u65f6\u5019\u8fd9\u9898\u6ca1\u8fc7\u3002\u3002</p>\n<p>\u63d2\u677f\u6cd5\u7ec4\u5408\u6570\u5bf9\u5e94\u4e86\u4e0d\u540c<span>icon\u7684\u5206\u914d\u65b9\u6848\u3002</span></p>\n<p><span>\u6bcf\u79cd\u5206\u914d\u65b9\u6848\u53c8\u5bf9\u5e94\u4e86\u5f88\u591a\u79cd\u6446\u653e\u65b9\u6848\u3002</span></p>\n<p><span>\u5047\u8bbe\u6709s\u79cd\u5206\u914d\u65b9\u6848\uff0cx[1]~x[s]\u5206\u522b\u5bf9\u5e94\u4e86\u6bcf\u79cd\u5206\u914d\u65b9\u6848\u7684\u6446\u653e\u65b9\u6848\uff0c\u53ef\u901a\u8fc7DP\u6c42\u5f97<span>&sum;x \u3002</span></span></p>\n<p><span><span>\u4e5f\u53ef\u6c42\u5f97<span>&sum;(x^2)\uff0c<span>&sum;(x^3)...</span></span></span></span></p>\n<p><span><span><span><span>\u8bbeM[p] =&nbsp;&sum;(x^p)\u3002</span></span></span></span></p>\n<p><span><span><span><span>\u8bbeS[p] = <span>&sum;</span>x[i1]*x[i2]*x[i3]...*x[ip]\uff0ci1~ip\u4e3a\u4e92\u4e0d\u76f8\u540c\u76841~s\u7684\u5e8f\u5217\u3002</span></span></span></span></p>\n<p><span><span><span><span>\u9898\u76ee\u6240\u7ed9\u68cb\u76d8\u662fN\u884c\uff0c\u6211\u4eec\u6c42\u7684\u5c31\u662fS[N] * N!</span></span></span></span></p>\n<p><span>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;\u5206\u5272\u7ebf&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</span></p>\n<p><span>\u4ee5\u4e0a\u662fStaginner\u5f97\u5230\u7684\u6570\u636e\u4e0e\u7ed3\u8bba\uff0c\u8be6\u7ec6\u7684\u63a8\u5bfc\u4ed6\u5e94\u8be5\u4f1a\u5199\u535a\u5ba2\u7684\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u63a5\u4e0b\u6765\u8981\u89e3\u51b3\u7684\u5c31\u662f\u5982\u4f55\u7528M[1]~M[p]\u6765\u63a8S[p]\uff0c\u6ca1\u60f3\u5230\u88ab\u6211\u4e00\u63a8\u4e00\u63a8\u63a8\u51fa\u6765\u4e86\u3002</span></p>\n<p><span>\u9996\u5148S[1] == M[1]</span></p>\n<p><span>S[1] * M[1]\u7684\u7ed3\u679c\u662f\u4e24\u4e24\u4e0d\u540cx\u7684\u79ef\u548c\u76f8\u540cx\u7684\u5e73\u65b9\u9879\uff0c\u90a3\u4e48\u53bb\u6389\u5e73\u65b9\u9879\u5c31\u662fS[2]\u7684\u82e5\u5e72\u500d\u3002</span></p>\n<p><span>\u5728S[1] * M[1]\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u4e00\u4e2aS[2]\u7684\u9879\u90fd\u7531\u4e24\u4e2a\u7ec4\u6210\u5b83\u7684x\u4e58\u5f97\u4e00\u6b21\uff0c\u6240\u4ee5\u8fd9\u4e2a&ldquo;\u82e5\u5e72\u500d&rdquo;\u662f2\u3002</span></p>\n<p><span>S[2] = (S[1] * M[1] - M[2]) / 2</span></p>\n<p>\u9012\u63a8\u8fc7\u53bb\uff0c\u6700\u7ec8</p>\n<p>S[p] = (S[p - 1] * M[1] - S[p - 2] * M[2] + S[p - 3] * M[3] - S[p - 4] * M[4] ....) / p</p>\n<p>\u8fd9\u6837\u5c31\u5f97\u5230\u4e86S[N]\u3002</p>\n<p>\u4e2d\u95f4\u8be5\u53d6\u6a21\u53d6\u6a21\uff0c\u8be5\u6c42\u9006\u5143\u6c42\u9006\u5143\uff0c\u5c31OK\u4e86\u3002</p>\n<p>&nbsp;</p>\n<p>\u4ee3\u7801\u662f\u5728Staginner\u4ee3\u7801\u4e0a\u6539\u7684\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> <span style=\"color: #0000ff;\">#define</span> MAXD 33\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #0000ff;\">#define</span> MOD 1000000007\n<span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">typedef __int64 LL;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> N, M, K;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">LL C[MAXD][MAXD][MAXD], f[MAXD][MAXD], X[MAXD], S[MAXD];\n</span><span style=\"color: #008080;\"> 8</span> LL fac(LL a, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">10</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">11</span>     LL ans = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">12</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; i ++) ans = ans * a %<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">13</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #0000ff;\">void</span> exgcd(LL a, LL b, LL &amp;x, LL &amp;<span style=\"color: #000000;\">y)\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">if</span>(b == <span style=\"color: #800080;\">0</span>) x = <span style=\"color: #800080;\">1</span>, y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span>     <span style=\"color: #0000ff;\">else</span> exgcd(b, a % b, y, x), y -= x * (a /<span style=\"color: #000000;\"> b);\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">LL getinv(LL a)\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    LL x, y;\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    exgcd(a, MOD, x, y);\n</span><span style=\"color: #008080;\">24</span>     x %=<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">25</span>     <span style=\"color: #0000ff;\">if</span>(x &lt; <span style=\"color: #800080;\">0</span>) x +=<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> prepare()\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">30</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, t;\n</span><span style=\"color: #008080;\">31</span>     memset(C, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(C));\n</span><span style=\"color: #008080;\">32</span>     C[<span style=\"color: #800080;\">1</span>][<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">33</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt;= <span style=\"color: #800080;\">32</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">35</span>         C[<span style=\"color: #800080;\">1</span>][i][<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">36</span>         <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">1</span>; j &lt;= i; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">37</span>             C[<span style=\"color: #800080;\">1</span>][i][j] = (C[<span style=\"color: #800080;\">1</span>][i - <span style=\"color: #800080;\">1</span>][j] + C[<span style=\"color: #800080;\">1</span>][i - <span style=\"color: #800080;\">1</span>][j - <span style=\"color: #800080;\">1</span>]) %<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">39</span>     <span style=\"color: #0000ff;\">for</span>(t = <span style=\"color: #800080;\">2</span>; t &lt;= <span style=\"color: #800080;\">32</span>; t ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">40</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt;= <span style=\"color: #800080;\">32</span>; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">41</span>             <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt;= <span style=\"color: #800080;\">32</span>; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">42</span>                 C[t][i][j] = fac(C[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">][i][j], t);\n</span><span style=\"color: #008080;\">43</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> solve()\n</span><span style=\"color: #008080;\">45</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">46</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, k, t;\n</span><span style=\"color: #008080;\">47</span> <span style=\"color: #000000;\">    LL ans;\n</span><span style=\"color: #008080;\">48</span>     <span style=\"color: #0000ff;\">for</span>(t = <span style=\"color: #800080;\">1</span>; t &lt;= N; t ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">50</span>         memset(f, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span>(f)), f[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">51</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt;= K; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">52</span>             <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt;= M; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">53</span>                 <span style=\"color: #0000ff;\">for</span>(k = <span style=\"color: #800080;\">0</span>; k &lt;= j; k ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">54</span>                     f[i][j] = (f[i][j] + f[i - <span style=\"color: #800080;\">1</span>][k] * C[t][M - k][j - k]) %<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">55</span>         X[t] =<span style=\"color: #000000;\"> f[K][M];\n</span><span style=\"color: #008080;\">56</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">57</span>     S[<span style=\"color: #800080;\">0</span>] = <span style=\"color: #800080;\">1</span>, S[<span style=\"color: #800080;\">1</span>] = X[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">58</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">2</span>; i &lt;= N; i ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">59</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">60</span>         S[i] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">61</span>         <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">1</span>; j &lt;= i; j ++<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">62</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">63</span>             <span style=\"color: #0000ff;\">if</span>(j &amp; <span style=\"color: #800080;\">1</span>) S[i] = (S[i] + S[i - j] * X[j] + MOD) %<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">64</span>             <span style=\"color: #0000ff;\">else</span> S[i] = (S[i] - S[i - j] * X[j] + MOD) %<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">65</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">66</span>         S[i] = S[i] * getinv(i) %<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">67</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">68</span>     ans =<span style=\"color: #000000;\"> S[N];\n</span><span style=\"color: #008080;\">69</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">2</span>; i &lt;= N; i ++) ans = ans * i %<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">70</span>     <span style=\"color: #0000ff;\">if</span>(ans &lt; <span style=\"color: #800080;\">0</span>) ans +=<span style=\"color: #000000;\"> MOD;\n</span><span style=\"color: #008080;\">71</span>     printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%I64d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">72</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">73</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">74</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">75</span> <span style=\"color: #000000;\">    prepare();\n</span><span style=\"color: #008080;\">76</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;N, &amp;M, &amp;K) == <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">77</span> <span style=\"color: #000000;\">        solve();\n</span><span style=\"color: #008080;\">78</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">79</span> }</pre>\n</div>\n<p>&nbsp;</p>"
			}, {
				"title": "HDU4294 Multiple",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/16/2687746.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Sun, 16 Sep 2012 11:25:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/16/2687746.html",
				"description": "<p>\u53bb\u5e74\u7701\u8d5b\u6559\u7ec3\u4f1a\u6c5d\u54e5\u8bb2\u8fc7\u4e00\u4e2a\u7ed3\u8bba\uff0c\u81f3\u591a\u4e24\u4e2a\u6570\u5b57\u5c31\u53ef\u4ee5\u62fc\u51fa\u4efb\u4f55\u6570\u7684\u500d\u6570\u3002</p>\n<p>\u8bc1\u660e\u53ef\u4ee5\u8fd9\u6837\uff0cAAAA...AAA\u82e5\u5e72\u4e2aA\uff0c\u6a21X\uff0c\u80fd\u5f97\u5230\u7684\u4f59\u6570\u79cd\u7c7b\u662f\u6709\u9650\u7684\uff0c\u81f3\u591a\u662f1~X-1\uff0c\u90a3\u4e48\u603b\u4f1a\u6709n\u4e2aA\u548cm\u4e2aA\u8fd9\u4e24\u4e2a\u6570\u6a21X\u4f59\u6570\u76f8\u7b49\uff0c\u4ed6\u4eec\u76f8\u51cf\u5c31\u5f97\u5230\u4e86X\u7684\u500d\u6570\uff0c\u800c\u76f8\u51cf\u5f97\u5230\u7684\u6570\u5c31\u662f\u4e24\u4e2a\u6570\u7ec4\u6210\u7684\u3002</p>\n<p>\u8fd9\u6837\u5c31\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u6570\u5148\u679a\u4e3e\u4e00\u4e0b\uff0c\u5bf9\u4e24\u4e2a\u6570\u518d\u679a\u4e3e\u4e00\u4e0b\uff0c\u627e\u7ec4\u6210\u7684\u90a3\u4e2a\u6570\uff0c\u53ef\u4ee5BFS\u3002\u4e00\u4e2a\u6570\u7528\u6765\u62fc\u6570\u5b57\u7684\u65f6\u5019\u8d85\u8fc7\u4e00\u5b9a\u957f\u5ea6\u5c31\u53ef\u4ee5\u505c\u4e0b\u4e86\uff0c\u4e00\u6b65\u6b65\u6a21\u4f1a\u51fa\u73b0\u5faa\u73af\u3002</p>\n<p>\u679a\u4e3e\u5f97\u5230\u7684\u7b54\u6848\u6bd4\u8f83\u4e00\u4e0b\u66f4\u65b0\uff0c\u6700\u540e\u8f93\u51fa\u3002</p>\n<p>\u6bd4\u8d5b\u65f6\u5019\u601d\u7ef4\u4e71\uff0c\u4ee3\u7801\u4e0d\u592a\u5de5\u6574\uff0c\u89c1\u8c05\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;queue&gt;\n<span style=\"color: #008080;\">  5</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">51111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, m, c;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pace[maxn], record[maxn], res[maxn];\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\"> ans[maxn], re[maxn];\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #0000ff;\">int</span> num[<span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #0000ff;\">int</span> comp(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *a, <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\"> 12</span> {<span style=\"color: #0000ff;\">return</span> *(<span style=\"color: #0000ff;\">int</span>*)a - *(<span style=\"color: #0000ff;\">int</span>*<span style=\"color: #000000;\">)b;}\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> BFS()\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 15</span>     queue&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> q;\n</span><span style=\"color: #008080;\"> 16</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, lin, nex;\n</span><span style=\"color: #008080;\"> 17</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; m; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 19</span>         <span style=\"color: #0000ff;\">if</span>(!num[i] || pace[num[i] % n]) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 20</span>         pace[num[i] % n] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 21</span>         record[num[i] % n] = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 22</span>         res[num[i] % n] =<span style=\"color: #000000;\"> num[i];\n</span><span style=\"color: #008080;\"> 23</span>         q.push(num[i] %<span style=\"color: #000000;\"> n);\n</span><span style=\"color: #008080;\"> 24</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 25</span>     <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">q.empty())\n</span><span style=\"color: #008080;\"> 26</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 27</span>         lin =<span style=\"color: #000000;\"> q.front(), q.pop();\n</span><span style=\"color: #008080;\"> 28</span>         <span style=\"color: #0000ff;\">if</span>(pace[lin] &gt; maxn) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 29</span>         <span style=\"color: #0000ff;\">if</span>(!lin) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 30</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; m; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 31</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 32</span>             nex = (lin * c + num[i]) %<span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\"> 33</span>             <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">pace[nex])\n</span><span style=\"color: #008080;\"> 34</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 35</span>                 res[nex] =<span style=\"color: #000000;\"> num[i];\n</span><span style=\"color: #008080;\"> 36</span>                 record[nex] =<span style=\"color: #000000;\"> lin;\n</span><span style=\"color: #008080;\"> 37</span>                 pace[nex] = pace[lin] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #000000;\">                q.push(nex);\n</span><span style=\"color: #008080;\"> 39</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 42</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 44</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> al, rl;\n</span><span style=\"color: #008080;\"> 45</span> <span style=\"color: #0000ff;\">void</span> Prin(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 47</span>     <span style=\"color: #0000ff;\">if</span>(record[i] != -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) Prin(record[i]);\n</span><span style=\"color: #008080;\"> 48</span>     re[rl ++] = res[i] + <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">0</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 49</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #0000ff;\">bool</span> cmp(<span style=\"color: #0000ff;\">int</span> &amp;al, <span style=\"color: #0000ff;\">int</span> &amp;<span style=\"color: #000000;\">rl)\n</span><span style=\"color: #008080;\"> 51</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 52</span>     <span style=\"color: #0000ff;\">if</span>(al &gt; rl) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 53</span>     <span style=\"color: #0000ff;\">if</span>(al &lt; rl) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 54</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; al; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 55</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 56</span>         <span style=\"color: #0000ff;\">if</span>(ans[i] &gt; re[i]) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 57</span>         <span style=\"color: #0000ff;\">if</span>(ans[i] &lt; re[i]) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 59</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 61</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 63</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\"> 64</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> flag;\n</span><span style=\"color: #008080;\"> 65</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;c) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\"> 66</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 67</span>         flag = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 68</span>         al = maxn - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 69</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt; c; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 71</span>             num[<span style=\"color: #800080;\">0</span>] = i, m = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 72</span>             memset(pace, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(pace));\n</span><span style=\"color: #008080;\"> 73</span>             <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(BFS())\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 75</span>                 flag = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 76</span>                 rl = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 77</span>                 Prin(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 78</span>                 <span style=\"color: #0000ff;\">if</span>(cmp(al, rl)) al = rl, memcpy(ans, re, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(ans));\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 80</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 81</span>         <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">flag)\n</span><span style=\"color: #008080;\"> 82</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 83</span>             <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt; c; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 84</span>                 <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt; i; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 85</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\"> 86</span>                     num[<span style=\"color: #800080;\">0</span>] = j, num[<span style=\"color: #800080;\">1</span>] = i, m = <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 87</span>                     memset(pace, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(pace));\n</span><span style=\"color: #008080;\"> 88</span>                     <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(BFS())\n</span><span style=\"color: #008080;\"> 89</span> <span style=\"color: #000000;\">                    {\n</span><span style=\"color: #008080;\"> 90</span>                         rl = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 91</span>                         Prin(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 92</span>                         <span style=\"color: #0000ff;\">if</span>(cmp(al, rl)) al = rl, memcpy(ans, re, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(ans));\n</span><span style=\"color: #008080;\"> 93</span> <span style=\"color: #000000;\">                    }\n</span><span style=\"color: #008080;\"> 94</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\"> 95</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 96</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; al; ++<span style=\"color: #000000;\"> i) putchar(ans[i]);\n</span><span style=\"color: #008080;\"> 97</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 99</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">100</span> }</pre>\n</div>"
			}, {
				"title": "HDU4291 A Short problem",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/16/2687739.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Sun, 16 Sep 2012 11:18:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/16/2687739.html",
				"description": "<p>\u6c42\u901a\u9879\u548c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u65b9\u6cd5\u4e00\u6837\uff0c\u77e9\u9635\u5feb\u901f\u5e42\u3002</p>\n<p>\u8fd9\u9053\u9898\u9ebb\u70e6\u5728\u5957\u4e86\u4e09\u5c42\u3002</p>\n<p>\u4f46\u5176\u5b9e\u53d6\u6a21\u8fd9\u79cd\u64cd\u4f5c\u80af\u5b9a\u4f1a\u51fa\u73b0\u5faa\u73af\u7684\uff0c\u53ef\u4ee5\u5148\u672c\u5730\u66b4\u51fa\u5faa\u73af\u8282\uff0c1000000007\u5bf9\u5e94\u7684\u5faa\u73af\u8282\u662f222222224\uff0c222222224\u5bf9\u5e94\u7684\u5faa\u73af\u8282\u662f183120\u3002</p>\n<p>\u6700\u5916\u5c42\u7684\u7ed3\u679c\u662f\u5bf91000000007\u53d6\u6a21\uff0c\u5b83\u7684\u5185\u5c42\u5bf9222222224\u53d6\u6a21\uff0c\u53ef\u4ee5\u5f97\u5230\u76f8\u7b49\u7684\u7b54\u6848\uff0c\u90a3\u4e48222222224\u7684\u5185\u5c42\u5bf9183120\u53d6\u6a21\uff0c\u4e5f\u80fd\u5f97\u5230\u76f8\u7b49\u7684\u7b54\u6848\uff0c\u8fd9\u6837\u5c31\u662f\u5206\u522b\u5bf9\u4e09\u4e2a\u6a21\u6570\u505a\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u5185\u5c42\u5f97\u5230\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u5916\u5c42\u4f5c\u4e3a\u6307\u6570\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">typedef __int64 LL;\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Matrix\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 7</span>     LL Mt[<span style=\"color: #800080;\">2</span>][<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 8</span>     <span style=\"color: #0000ff;\">void</span> init0(){memset(Mt, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(Mt));}\n</span><span style=\"color: #008080;\"> 9</span>     <span style=\"color: #0000ff;\">void</span> init1() {init0(), Mt[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span>] = Mt[<span style=\"color: #800080;\">1</span>][<span style=\"color: #800080;\">1</span>] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">    Matrix(){init0();}\n</span><span style=\"color: #008080;\">11</span>     Matrix(LL num) {init0();Mt[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span>] = Mt[<span style=\"color: #800080;\">1</span>][<span style=\"color: #800080;\">1</span>] =<span style=\"color: #000000;\"> num;}\n</span><span style=\"color: #008080;\">12</span>     Matrix(LL a, LL b, LL c, LL d){Mt[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span>] = a, Mt[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">1</span>] = b, Mt[<span style=\"color: #800080;\">1</span>][<span style=\"color: #800080;\">0</span>] = c, Mt[<span style=\"color: #800080;\">1</span>][<span style=\"color: #800080;\">1</span>] =<span style=\"color: #000000;\"> d;}\n</span><span style=\"color: #008080;\">13</span>     Matrix Mul(<span style=\"color: #0000ff;\">const</span> Matrix &amp;<span style=\"color: #000000;\">b, LL mod)\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">15</span>         <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, k;Matrix res;\n</span><span style=\"color: #008080;\">16</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">2</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">17</span>             <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt; <span style=\"color: #800080;\">2</span>; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">18</span>                 <span style=\"color: #0000ff;\">for</span>(k = <span style=\"color: #800080;\">0</span>; k &lt; <span style=\"color: #800080;\">2</span>; ++<span style=\"color: #000000;\"> k)\n</span><span style=\"color: #008080;\">19</span>                     res.Mt[i][j] = (res.Mt[i][j] + Mt[i][k] * b.Mt[k][j]) %<span style=\"color: #000000;\"> mod;\n</span><span style=\"color: #008080;\">20</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    Matrix Rep(LL p, LL mod)\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">24</span>         Matrix b = *<span style=\"color: #0000ff;\">this</span>, res(<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">25</span>         <span style=\"color: #0000ff;\">if</span>(p == <span style=\"color: #800080;\">0</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">if</span>(p == <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">while</span>(p &gt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">29</span>             <span style=\"color: #0000ff;\">if</span>(p &amp; <span style=\"color: #800080;\">1</span>) res =<span style=\"color: #000000;\"> res.Mul(b, mod);\n</span><span style=\"color: #008080;\">30</span>             b =<span style=\"color: #000000;\"> b.Mul(b, mod);\n</span><span style=\"color: #008080;\">31</span>             p &gt;&gt;= <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">33</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> b.Mul(res, mod);\n</span><span style=\"color: #008080;\">34</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">LL Cal(LL n, LL mod)\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">38</span>     Matrix mm(<span style=\"color: #800080;\">3</span>, <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span>), ori(<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">39</span>     <span style=\"color: #0000ff;\">if</span>(!n) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">40</span>     <span style=\"color: #0000ff;\">return</span> ori.Mul(mm.Rep(n - <span style=\"color: #800080;\">1</span>, mod), mod).Mt[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">43</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">    LL n;\n</span><span style=\"color: #008080;\">45</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%I64d</span><span style=\"color: #800000;\">\"</span>, &amp;n) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">46</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%I64d\\n</span><span style=\"color: #800000;\">\"</span>, Cal(Cal(Cal(n, <span style=\"color: #800080;\">183120</span>), <span style=\"color: #800080;\">222222224</span>), <span style=\"color: #800080;\">1000000007</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">47</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">48</span> }</pre>\n</div>"
			}, {
				"title": "UVA12305 Polishing a Extruded Polygon \u591a\u9762\u4f53\u5207\u5272 [Rujia Liu's Presents, Dedicated to Geometry and CG Lovers]",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/12/2681222.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Wed, 12 Sep 2012 01:50:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/12/2681222.html",
				"description": "<p>\u4e0d\u77e5\u9053\u8fd9\u7b97\u4e0d\u7b97\u4e2a\u795e\u9898\u4e86\uff0cAC\u7684\u65f6\u5019\u53ea\u6709\u6211\u548c\u6c5d\u54e5\u4e24\u4eba\u8fc7\u8fd9\u9898&hellip;&hellip;</p>\n<p>\u60f3\u4e86\u4e00\u5929\uff0c\u8c03\u4e86\u4e00\u5929\uff0c\u7adf\u7136\u56e0\u4e3a\u4e09\u89d2\u5256\u5206\u65f6\u5c31\u5dee\u4e86\u4e00\u53e5\u53c9\u79ef\u5224\u65ad\u76f8\u90bb\u8fb9\u7684\u51f9\u51f8\u6027WA\u4e86\u597d\u51e0\u5929&hellip;&hellip;</p>\n<p>1\u3001\u4e09\u89d2\u5256\u5206\uff1a</p>\n<p>\u6240\u7ed9\u591a\u9762\u4f53\u662f\u975e\u51f8\u7684\uff0c\u96be\u4ee5\u5904\u7406\uff0c\u5256\u5206\u6210\u4e00\u4e2a\u4e2a\u4e09\u68f1\u67f1\u5c31\u90fd\u662f\u51f8\u591a\u9762\u4f53\u4e86\u3002\u6700\u540e\u624d\u5f00\u59cb\u5199\u964c\u751f\u7684\u4e09\u89d2\u5256\u5206\u7684\uff0c\u5df2\u7ecf\u5199+\u8c03\u4e86\u4e8c\u767e\u591a\u884c\u75b2\u60eb\u4e0d\u582a\u7684\u65f6\u5019\u770b\u5230\u4e00\u8ba1\u7b97\u51e0\u4f55\u4e66\u4e0a\u597d\u590d\u6742\u7684nlogn\u7b97\u6cd5\uff0c\u7adf\u7136\u8fd8\u8981\u518d\u641e\u5e73\u8861\u6811\uff0c\u7b80\u76f4\u8981\u5d29\u6e83\u3002\u767e\u5ea6\u3001\u8c37\u6b4c\u90fd\u4e0d\u7ed9\u529b\u4e86\uff0c\u671f\u520a\u8bba\u6587\u770b\u7740\u4e5f\u6655\u4e4e\uff0c\u53ea\u597d\u51ed\u7740\u81ea\u5df1\u7684\u7406\u89e3\u6765\u66b4\u529b\u5256\u5206\u4e86\u3002</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091209394485.png\" alt=\"\" width=\"300\" /></p>\n<p>\u8bfb\u5165\u6bcf\u4e2a\u70b9\u5efa\u7acb\u53cc\u5411\u94fe\u8868\uff08\u5355\u5411\u5e94\u8be5\u4e5f\u6ca1\u5173\u7cfb\uff0c\u7075\u6d3b\u6027\u5dee\u70b9\uff09\uff0c\u7136\u540e\u5f00\u59cb\u5faa\u73af\u5256\u5206\uff0c\u5bf9\u6bcf\u4e2a\u76f8\u90bb\u8fb9\uff0c\u5148\u5224\u65ad\u51f9\u51f8\u6027\uff0c\u7136\u540e\u679a\u4e3e\u5176\u4ed6\u6240\u6709\u8fb9\u5224\u662f\u5426\u548c\u5982\u56fe\u6240\u793a\u865a\u7ebf\u4ea4\u53c9\uff0c\u901a\u8fc7\u5224\u65ad\u540e\u53ef\u4ee5\u786e\u5b9a\u8fd9\u662f\u4e2a\u51f8\u51fa\u7684\u89d2\uff0c\u53ef\u4ee5\u5207\u6389\uff0c\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u4e0d\u505c\u5730\u5bf9\u5269\u4e0b\u7684\u591a\u8fb9\u5f62\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c<span style=\"background-color: #ffff00;\">\u6bcf\u4e00\u65f6\u523b\u4e00\u5b9a\u4f1a\u6709\u8fd9\u6837\u7684\u51f8\u51fa\u7684\u89d2\u53ef\u4ee5\u5207</span>\uff0c\u6700\u540e\u53ef\u4ee5\u5b8c\u6210\u5256\u5206\u3002</p>\n<p>2\u3001\u6a21\u62df\u5207\u5272\uff1a</p>\n<p>\u5256\u5206\u7684\u540c\u65f6\u5c31\u5efa\u7acb\u4e86\u4e00\u4e2a\u4e2a\u4e09\u68f1\u67f1\uff0c<span style=\"background-color: #ffff00;\">\u5bf9&ldquo;\u5916\u4fa7&rdquo;\u7684\u9762\u6253\u4e0a\u6807\u8bb0\uff0c\u8fd9\u6837\u624d\u80fd\u8ba1\u7b97\u6b63\u786e\u7684\u8868\u9762\u79ef</span>\u3002\u6211\u7528\u94fe\u8868\u6765\u5b58\u591a\u9762\u4f53\u7684\u5404\u4e2a\u9762\uff0c\u7528\u6784\u6210\u591a\u9762\u4f53\u7684\u5404\u4e2a\u9762\u6765\u8868\u793a\u8fd9\u4e2a\u591a\u9762\u4f53\u3002\u5207\u5272\u7684\u65f6\u5019\u5c31\u662f\u5207\u8fd9\u4e9b\u9762\uff0c\u601d\u8003\u8d77\u6765\u633a\u9ebb\u70e6\u7684\uff0c\u5b9e\u73b0\u7684\u65f6\u5019\u601d\u8def\u8fd8\u662f\u6bd4\u8f83\u6e05\u6670\uff0c\u5207\u5272\u51f8\u591a\u9762\u4f53\u5f97\u5230\u7684\u4efb\u4f55\u9762\u4e00\u5b9a\u8fd8\u662f\u51f8\u591a\u8fb9\u5f62\uff0c\u800c\u5207\u51f8\u591a\u8fb9\u5f62\u53ea\u9700\u8981\u628a\u5207\u9762\u4e00\u4fa7\u7684\u70b9\u53bb\u6389\uff0c\u4e0e\u5207\u9762\u76f8\u4ea4\u7684\u4e24\u70b9\u8fde\u8d77\u6765\uff0c\u548c\u5269\u4e0b\u7684\u70b9\u56f4\u6210\u65b0\u7684\u51f8\u5305\u3002\u5bf9\u4e8e\u5207\u6389\u7684\u6574\u4e2a\u9762\uff0c\u4e43\u81f3\u6574\u4e2a\u51f8\u591a\u9762\u4f53\uff0c\u5c31\u53ef\u4ee5\u6709\u6548\u5730\u5229\u7528\u94fe\u8868\u8f7b\u677e\u5220\u9664\u3002</p>\n<p>3\u3001\u8ba1\u7b97\u4f53\u79ef\u548c\u9762\u79ef\uff1a</p>\n<p>\u9762\u79ef\u5c31\u7528\u591a\u8fb9\u5f62\u9762\u79ef\u516c\u5f0f\uff0c\u548c\u4e8c\u7ef4\u5750\u6807\u8ba1\u7b97\u7684\u539f\u7406\u662f\u4e00\u6837\u7684\u3002\u7531\u4e8e\u662f\u51f8\u591a\u9762\u4f53\uff0c\u90a3\u4e48\u51f8\u591a\u9762\u4f53\u5185\u4efb\u9009\u4e00\u70b9\uff0c\u5c31\u53ef\u4ee5\u628a\u591a\u9762\u4f53\u5206\u5272\u6210\u4e00\u4e2a\u4e2a\u68f1\u9525\uff0c\u68f1\u9525\u7684\u4f53\u79ef\u5c31\u662f\u70b9\u5230\u9762\u7684\u8ddd\u79bb\u4e58\u4ee5\u9762\u79ef\u9664\u4ee53\u3002\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u968f\u610f\u53d6\uff0c\u53d6\u591a\u9762\u4f53\u7684\u4e00\u4e2a\u9876\u70b9\u5c31\u975e\u5e38\u65b9\u4fbf\u4e86\u3002</p>\n<p>\u8c03\u8bd5\u867d\u7136\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\uff0c\u4f46\u662f\u5de5\u4f5c\u91cf\u5e76\u4e0d\u7b97\u5927\uff0c\u57fa\u672c\u4e0a\u8c03\u51fa\u6837\u4f8b\u5c31\u5dee\u4e0d\u591a\u4e86\u3002</p>\n<p>\u5e94\u8be5\u662f\u6ca1\u6709\u4e09\u70b9\u5171\u7ebf\u7684\u6570\u636e\uff0c\u6211\u628a\u5904\u7406\u8fd9\u4e2a\u7684\u4ee3\u7801\u5220\u4e86\u662f\u53ef\u4ee5AC\u7684\u3002</p>\n<p>\u597d\u957f\u7684\u4ee3\u7801&hellip;&hellip;<img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091209515290.gif\" alt=\"\" /></p>\n<div class=\"cnblogs_code\" onclick=\"cnblogs_code_show('afb40b5d-fc4d-4f18-b894-db3947728af3')\"><img id=\"code_img_closed_afb40b5d-fc4d-4f18-b894-db3947728af3\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><img id=\"code_img_opened_afb40b5d-fc4d-4f18-b894-db3947728af3\" class=\"code_img_opened\" style=\"display: none;\" onclick=\"cnblogs_code_hide('afb40b5d-fc4d-4f18-b894-db3947728af3',event)\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">View Code </span>\n<div id=\"cnblogs_code_open_afb40b5d-fc4d-4f18-b894-db3947728af3\" class=\"cnblogs_code_hide\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;vector&gt;\n<span style=\"color: #008080;\">  6</span> #include&lt;list&gt;\n<span style=\"color: #008080;\">  7</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\">  8</span> #include&lt;iostream&gt;\n<span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">3011</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 12</span> inline <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 14</span>     <span style=\"color: #0000ff;\">return</span> x &gt; eps ? <span style=\"color: #800080;\">1</span> : (x &lt; -eps ? -<span style=\"color: #800080;\">1</span> : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 16</span> inline <span style=\"color: #0000ff;\">double</span> pz(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 18</span>     <span style=\"color: #0000ff;\">return</span> dcmp(x) ? x : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">****************************************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5b9a\u4e49\u4e09\u7ef4\u70b9</span>\n<span style=\"color: #008080;\"> 22</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point3\n</span><span style=\"color: #008080;\"> 23</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 24</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y, z;\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #000000;\">    Point3()\n</span><span style=\"color: #008080;\"> 26</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 27</span>         x = y = z = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 29</span>     Point3(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span> b, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> c)\n</span><span style=\"color: #008080;\"> 30</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 31</span>         x = a, y = b, z =<span style=\"color: #000000;\"> c;\n</span><span style=\"color: #008080;\"> 32</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #000000;\">    Point3 cross(Point3 p)\n</span><span style=\"color: #008080;\"> 34</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 35</span>         <span style=\"color: #0000ff;\">return</span> Point3(y * p.z - p.y *<span style=\"color: #000000;\"> z,\n</span><span style=\"color: #008080;\"> 36</span>                       z * p.x - x *<span style=\"color: #000000;\"> p.z,\n</span><span style=\"color: #008080;\"> 37</span>                       x * p.y - y *<span style=\"color: #000000;\"> p.x);\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 39</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> dot(Point3 p)\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 41</span>         <span style=\"color: #0000ff;\">return</span> x * p.x + y * p.y + z *<span style=\"color: #000000;\"> p.z;\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 43</span>     Point3 <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 44</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 45</span>         <span style=\"color: #0000ff;\">return</span> Point3(x - p.x, y - p.y, z -<span style=\"color: #000000;\"> p.z);\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 47</span>     Point3 <span style=\"color: #0000ff;\">operator</span>-()<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 48</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 49</span>         <span style=\"color: #0000ff;\">return</span> Point3(-x, -y, -<span style=\"color: #000000;\">z);\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 51</span>     Point3 <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 52</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 53</span>         <span style=\"color: #0000ff;\">return</span> Point3(x + p.x, y + p.y, z +<span style=\"color: #000000;\"> p.z);\n</span><span style=\"color: #008080;\"> 54</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 55</span>     Point3 <span style=\"color: #0000ff;\">operator</span>*(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 56</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 57</span>         <span style=\"color: #0000ff;\">return</span> Point3(x * b, y * b, z *<span style=\"color: #000000;\"> b);\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 59</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>==(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 60</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 61</span>         <span style=\"color: #0000ff;\">return</span> !dcmp(x - p.x) &amp;&amp; !dcmp(y - p.y) &amp;&amp; !dcmp(z -<span style=\"color: #000000;\"> p.z);\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 63</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>!=(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 64</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 65</span>         <span style=\"color: #0000ff;\">return</span> !(*<span style=\"color: #0000ff;\">this</span> ==<span style=\"color: #000000;\"> p);\n</span><span style=\"color: #008080;\"> 66</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 67</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 68</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 69</span>         <span style=\"color: #0000ff;\">if</span>(!dcmp(x -<span style=\"color: #000000;\"> p.x))\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 71</span>             <span style=\"color: #0000ff;\">if</span>(!dcmp(y -<span style=\"color: #000000;\"> p.y))\n</span><span style=\"color: #008080;\"> 72</span>                 <span style=\"color: #0000ff;\">return</span> dcmp(z - p.z) &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 73</span>             <span style=\"color: #0000ff;\">return</span> dcmp(y - p.y) &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 75</span>         <span style=\"color: #0000ff;\">return</span> dcmp(x - p.x) &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 76</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 77</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&gt;(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 78</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 79</span>         <span style=\"color: #0000ff;\">return</span> p &lt; *<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 80</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 81</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&gt;=(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 82</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 83</span>         <span style=\"color: #0000ff;\">return</span> !(*<span style=\"color: #0000ff;\">this</span> &lt;<span style=\"color: #000000;\"> p);\n</span><span style=\"color: #008080;\"> 84</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 85</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;=(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 86</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 87</span>         <span style=\"color: #0000ff;\">return</span> !(*<span style=\"color: #0000ff;\">this</span> &gt;<span style=\"color: #000000;\"> p);\n</span><span style=\"color: #008080;\"> 88</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 89</span>     Point3 fxl(Point3 b, Point3 c)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5e73\u9762\u6cd5\u5411\u91cf</span>\n<span style=\"color: #008080;\"> 90</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 91</span>         <span style=\"color: #0000ff;\">return</span> (*<span style=\"color: #0000ff;\">this</span> - b).cross(b -<span style=\"color: #000000;\"> c);\n</span><span style=\"color: #008080;\"> 92</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 93</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> Dis(Point3 b)\n</span><span style=\"color: #008080;\"> 94</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 95</span>         <span style=\"color: #0000ff;\">return</span> sqrt((*<span style=\"color: #0000ff;\">this</span> - b).dot(*<span style=\"color: #0000ff;\">this</span> -<span style=\"color: #000000;\"> b));\n</span><span style=\"color: #008080;\"> 96</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 97</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> vlen()\n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 99</span>         <span style=\"color: #0000ff;\">return</span> sqrt(dot(*<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">100</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">101</span>     <span style=\"color: #0000ff;\">bool</span> PinLine(Point3 b, Point3 c)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4e09\u70b9\u5171\u7ebf</span>\n<span style=\"color: #008080;\">102</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">103</span>         <span style=\"color: #0000ff;\">return</span> fxl(b, c).vlen() &lt;<span style=\"color: #000000;\"> eps;\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">105</span>     <span style=\"color: #0000ff;\">bool</span> PonPlane(Point3 b, Point3 c, Point3 d)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u56db\u70b9\u5171\u9762</span>\n<span style=\"color: #008080;\">106</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">107</span>         <span style=\"color: #0000ff;\">return</span> !dcmp(fxl(b, c).dot(d - *<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">109</span>     <span style=\"color: #0000ff;\">bool</span> PonSeg(Point3 b, Point3 c)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u5728\u7ebf\u6bb5\u4e0a\uff0c\u5305\u62ec\u7aef\u70b9</span>\n<span style=\"color: #008080;\">110</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">111</span>         <span style=\"color: #0000ff;\">return</span> !dcmp((*<span style=\"color: #0000ff;\">this</span> - b).cross(*<span style=\"color: #0000ff;\">this</span> - c).vlen()) &amp;&amp;\n<span style=\"color: #008080;\">112</span>                (*<span style=\"color: #0000ff;\">this</span> - b).dot(*<span style=\"color: #0000ff;\">this</span> - c) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">113</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">114</span>     <span style=\"color: #0000ff;\">bool</span> PinSeg(Point3 b, Point3 c)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u5728\u7ebf\u6bb5\u4e0a\uff0c\u4e0d\u5305\u62ec\u7aef\u70b9</span>\n<span style=\"color: #008080;\">115</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">116</span>         <span style=\"color: #0000ff;\">return</span> PonSeg(b, c) &amp;&amp; *<span style=\"color: #0000ff;\">this</span> != b &amp;&amp; *<span style=\"color: #0000ff;\">this</span> !=<span style=\"color: #000000;\"> c;\n</span><span style=\"color: #008080;\">117</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">118</span>     <span style=\"color: #0000ff;\">double</span> PtoLine(Point3 b, Point3 c)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u5230\u76f4\u7ebf\u8ddd\u79bb</span>\n<span style=\"color: #008080;\">119</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">120</span>         <span style=\"color: #0000ff;\">return</span> (*<span style=\"color: #0000ff;\">this</span> - b).cross(c - b).vlen() /<span style=\"color: #000000;\"> b.Dis(c);\n</span><span style=\"color: #008080;\">121</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">122</span>     <span style=\"color: #0000ff;\">double</span> PtoPlane(Point3 b, Point3 c, Point3 d)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u5230\u5e73\u9762\u8ddd\u79bb</span>\n<span style=\"color: #008080;\">123</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">124</span>         <span style=\"color: #0000ff;\">return</span> fabs(b.fxl(c, d).dot(*<span style=\"color: #0000ff;\">this</span> - b)) /<span style=\"color: #000000;\"> b.fxl(c, d).vlen();\n</span><span style=\"color: #008080;\">125</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">126</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">127</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">****************************************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">128</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5b9a\u4e49\u5e73\u9762+\u7a7a\u95f4\u5e73\u9762\u51f8\u5305</span>\n<span style=\"color: #008080;\">129</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Plane\n</span><span style=\"color: #008080;\">130</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">131</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> a, b, c, d;\n</span><span style=\"color: #008080;\">132</span>     <span style=\"color: #0000ff;\">bool</span> outplane;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8ba1\u5165\u8868\u9762\u79ef\u7684\u9762</span>\n<span style=\"color: #008080;\">133</span>     vector&lt;Point3&gt;<span style=\"color: #000000;\"> p;\n</span><span style=\"color: #008080;\">134</span> <span style=\"color: #000000;\">    Plane()\n</span><span style=\"color: #008080;\">135</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">136</span>         a = b = c = d = <span style=\"color: #800080;\">0</span>, outplane = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">137</span> <span style=\"color: #000000;\">        p.clear();\n</span><span style=\"color: #008080;\">138</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">139</span>     inline <span style=\"color: #0000ff;\">void</span> init(<span style=\"color: #0000ff;\">double</span> a_, <span style=\"color: #0000ff;\">double</span> b_, <span style=\"color: #0000ff;\">double</span> c_, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> d_)\n</span><span style=\"color: #008080;\">140</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">141</span>         a = a_, b = b_, c = c_, d =<span style=\"color: #000000;\"> d_;\n</span><span style=\"color: #008080;\">142</span> <span style=\"color: #000000;\">        p.clear();\n</span><span style=\"color: #008080;\">143</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">144</span>     inline <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> init(Point3 pa, Point3 pb, Point3 pc)\n</span><span style=\"color: #008080;\">145</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">146</span>         Point3 t = (pa - pb).cross(pa -<span style=\"color: #000000;\"> pc);\n</span><span style=\"color: #008080;\">147</span>         a = t.x, b = t.y, c =<span style=\"color: #000000;\"> t.z;\n</span><span style=\"color: #008080;\">148</span>         d = -(pa.x * t.x + pa.y * t.y + pa.z *<span style=\"color: #000000;\"> t.z);\n</span><span style=\"color: #008080;\">149</span> <span style=\"color: #000000;\">        p.clear();\n</span><span style=\"color: #008080;\">150</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">151</span>     Plane(<span style=\"color: #0000ff;\">double</span> a_, <span style=\"color: #0000ff;\">double</span> b_, <span style=\"color: #0000ff;\">double</span> c_, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> d_)\n</span><span style=\"color: #008080;\">152</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">153</span> <span style=\"color: #000000;\">        init(a_, b_, c_, d_);\n</span><span style=\"color: #008080;\">154</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">155</span> <span style=\"color: #000000;\">    Plane(Point3 pa, Point3 pb, Point3 pc)\n</span><span style=\"color: #008080;\">156</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">157</span> <span style=\"color: #000000;\">        init(pa, pb, pc);\n</span><span style=\"color: #008080;\">158</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">159</span>     <span style=\"color: #0000ff;\">double</span> PtoPlane(<span style=\"color: #0000ff;\">const</span> Point3 &amp;pa)<span style=\"color: #0000ff;\">const</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u9762\u8ddd\u79bb</span>\n<span style=\"color: #008080;\">160</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">161</span>         <span style=\"color: #0000ff;\">return</span> fabs(Sub(pa)) / sqrt(a * a + b * b + c *<span style=\"color: #000000;\"> c);\n</span><span style=\"color: #008080;\">162</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">163</span>     <span style=\"color: #0000ff;\">double</span> Sub(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u4ee3\u5165\u65b9\u7a0b</span>\n<span style=\"color: #008080;\">164</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">165</span>         <span style=\"color: #0000ff;\">return</span> p.x * a + p.y * b + p.z * c +<span style=\"color: #000000;\"> d;\n</span><span style=\"color: #008080;\">166</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">167</span> <span style=\"color: #000000;\">    Point3 PcrossPlane(Point3 a, Point3 b)\n</span><span style=\"color: #008080;\">168</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">169</span>         <span style=\"color: #0000ff;\">return</span> a + (b - a) * (PtoPlane(a) / (PtoPlane(a) +<span style=\"color: #000000;\"> PtoPlane(b)));\n</span><span style=\"color: #008080;\">170</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">171</span>     <span style=\"color: #0000ff;\">int</span> Parallel(Plane pl)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u9762\u5e73\u884c</span>\n<span style=\"color: #008080;\">172</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">173</span>         <span style=\"color: #0000ff;\">if</span>(!dcmp(a * pl.b - b * pl.a) &amp;&amp; !dcmp(a * pl.c - c * pl.a) &amp;&amp; !dcmp(b * pl.c - c *<span style=\"color: #000000;\"> pl.b))\n</span><span style=\"color: #008080;\">174</span>             <span style=\"color: #0000ff;\">return</span> dcmp(pl.Sub(p[<span style=\"color: #800080;\">0</span>])) &gt; <span style=\"color: #800080;\">0</span> ? <span style=\"color: #800080;\">1</span> : -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">175</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">176</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">177</span>     <span style=\"color: #0000ff;\">bool</span> Cut(Plane &amp;pl)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5e73\u9762\u5207\u5272</span>\n<span style=\"color: #008080;\">178</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">179</span>         <span style=\"color: #0000ff;\">switch</span><span style=\"color: #000000;\">(Parallel(pl))\n</span><span style=\"color: #008080;\">180</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">181</span>         <span style=\"color: #0000ff;\">case</span> -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">182</span>             <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">183</span>         <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">184</span>             <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">185</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">186</span>         <span style=\"color: #0000ff;\">int</span> i, j, k, n =<span style=\"color: #000000;\"> p.size();\n</span><span style=\"color: #008080;\">187</span>         <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> flag1, flag2;\n</span><span style=\"color: #008080;\">188</span> <span style=\"color: #000000;\">        Point3 p1, p2;\n</span><span style=\"color: #008080;\">189</span>         vector&lt;Point3&gt;<span style=\"color: #000000;\"> ret;\n</span><span style=\"color: #008080;\">190</span>         <span style=\"color: #0000ff;\">for</span>(i = flag1 = flag2 = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">191</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">192</span>             flag1 |= pl.Sub(p[i]) &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">193</span>             flag2 |= pl.Sub(p[i]) &gt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">194</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">195</span>         <span style=\"color: #0000ff;\">if</span>(flag1 != flag2) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> flag1;\n</span><span style=\"color: #008080;\">196</span>         <span style=\"color: #0000ff;\">if</span>(!flag1) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">197</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; pl.Sub(p[i]) &gt;= <span style=\"color: #800080;\">0</span>; ++<span style=\"color: #000000;\"> i);\n</span><span style=\"color: #008080;\">198</span>         <span style=\"color: #0000ff;\">for</span>(; pl.Sub(p[i]) &lt; <span style=\"color: #800080;\">0</span>; i = (i + <span style=\"color: #800080;\">1</span>) %<span style=\"color: #000000;\"> n);\n</span><span style=\"color: #008080;\">199</span>         <span style=\"color: #0000ff;\">for</span>(j = i; pl.Sub(p[j]) &gt;= <span style=\"color: #800080;\">0</span>; j = (j + <span style=\"color: #800080;\">1</span>) %<span style=\"color: #000000;\"> n);\n</span><span style=\"color: #008080;\">200</span>         <span style=\"color: #0000ff;\">for</span>(k = j; k != i; k = (k + <span style=\"color: #800080;\">1</span>) %<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">201</span> <span style=\"color: #000000;\">            ret.push_back(p[k]);\n</span><span style=\"color: #008080;\">202</span>         p1 = pl.PcrossPlane(p[i], p[(i + n - <span style=\"color: #800080;\">1</span>) %<span style=\"color: #000000;\"> n]);\n</span><span style=\"color: #008080;\">203</span>         p2 = pl.PcrossPlane(p[j], p[(j + n - <span style=\"color: #800080;\">1</span>) %<span style=\"color: #000000;\"> n]);\n</span><span style=\"color: #008080;\">204</span> <span style=\"color: #000000;\">        ret.push_back(p1), ret.push_back(p2);\n</span><span style=\"color: #008080;\">205</span>         p =<span style=\"color: #000000;\"> ret;\n</span><span style=\"color: #008080;\">206</span> <span style=\"color: #000000;\">        pl.p.push_back(p1), pl.p.push_back(p2);\n</span><span style=\"color: #008080;\">207</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">208</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">209</span>     <span style=\"color: #0000ff;\">void</span> Graham()<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6c42\u7a7a\u95f4\u5e73\u9762\u51f8\u5305</span>\n<span style=\"color: #008080;\">210</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">211</span>         <span style=\"color: #0000ff;\">int</span> len, i, n, top = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">212</span>         vector&lt;Point3&gt;<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">213</span> <span style=\"color: #000000;\">        Point3 fx(a, b, c);\n</span><span style=\"color: #008080;\">214</span> <span style=\"color: #000000;\">        sort(p.begin(), p.end());\n</span><span style=\"color: #008080;\">215</span>         vector&lt;Point3&gt;::iterator iter =<span style=\"color: #000000;\"> unique(p.begin(), p.end());\n</span><span style=\"color: #008080;\">216</span> <span style=\"color: #000000;\">        p.erase(iter, p.end());\n</span><span style=\"color: #008080;\">217</span>         n =<span style=\"color: #000000;\"> p.size();\n</span><span style=\"color: #008080;\">218</span>         res.push_back(p[<span style=\"color: #800080;\">0</span>]), res.push_back(p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">219</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">2</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">220</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">221</span>             <span style=\"color: #0000ff;\">while</span>(top &amp;&amp; dcmp((res[top] - res[top - <span style=\"color: #800080;\">1</span>]).cross(p[i] - res[top]).dot(fx)) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">222</span>                 res.pop_back(), --<span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">223</span>             res.push_back(p[i]), ++<span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">224</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">225</span>         len =<span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">226</span>         res.push_back(p[n - <span style=\"color: #800080;\">2</span>]), ++<span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">227</span>         <span style=\"color: #0000ff;\">for</span>(i = n - <span style=\"color: #800080;\">3</span>; i &gt;= <span style=\"color: #800080;\">0</span>; --<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">228</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">229</span>             <span style=\"color: #0000ff;\">while</span>(top != len &amp;&amp; dcmp((res[top] - res[top - <span style=\"color: #800080;\">1</span>]).cross(p[i] - res[top]).dot(fx)) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">230</span>                 res.pop_back(), --<span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">231</span>             res.push_back(p[i]), ++<span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">232</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">233</span> <span style=\"color: #000000;\">        res.pop_back();\n</span><span style=\"color: #008080;\">234</span>         p =<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">235</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">236</span>     <span style=\"color: #0000ff;\">double</span> PolygonArea()<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u7a7a\u95f4\u5e73\u9762\u51f8\u5305\u9762\u79ef</span>\n<span style=\"color: #008080;\">237</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">238</span>         <span style=\"color: #0000ff;\">int</span> n =<span style=\"color: #000000;\"> p.size();\n</span><span style=\"color: #008080;\">239</span>         <span style=\"color: #0000ff;\">double</span> ret = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">240</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">2</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">241</span>             ret += (p[i - <span style=\"color: #800080;\">1</span>] - p[<span style=\"color: #800080;\">0</span>]).cross(p[i] - p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]).vlen();\n</span><span style=\"color: #008080;\">242</span>         <span style=\"color: #0000ff;\">return</span> ret * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">243</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">244</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">245</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">****************************************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">246</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5b9a\u4e49\u53d8\u91cf</span>\n<span style=\"color: #008080;\">247</span> <span style=\"color: #0000ff;\">struct</span> Polyhedron<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u7acb\u65b9\u4f53\u9762\u96c6\u5408</span>\n<span style=\"color: #008080;\">248</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">249</span>     list&lt;Plane&gt;<span style=\"color: #000000;\"> pl;\n</span><span style=\"color: #008080;\">250</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">251</span> list&lt;Polyhedron&gt;<span style=\"color: #000000;\"> pol;\n</span><span style=\"color: #008080;\">252</span> <span style=\"color: #0000ff;\">int</span> n, h, m;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u4e2a\u6570\uff0c\u9ad8\u5ea6\uff0c\u5207\u5272\u6b21\u6570</span>\n<span style=\"color: #008080;\">253</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> PointChain\n</span><span style=\"color: #008080;\">254</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">255</span> <span style=\"color: #000000;\">    Point3 p;\n</span><span style=\"color: #008080;\">256</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pre, nex;\n</span><span style=\"color: #008080;\">257</span>     <span style=\"color: #0000ff;\">bool</span> outside;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6807\u8bb0\u53d1\u5411nex\u7684\u8fb9\u4e3a\u5916\u90e8\u8fb9\uff0c\u62ac\u8d77\u7684\u9762\u8ba1\u5165\u603b\u9762\u79ef</span>\n<span style=\"color: #008080;\">258</span> <span style=\"color: #000000;\">} PC[maxn];\n</span><span style=\"color: #008080;\">259</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">****************************************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">260</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5224\u76f8\u4ea4\uff0c\u8f85\u52a9\u5224\u65ad\u4e09\u89d2\u5256\u5206\u5408\u6cd5\u6027</span>\n<span style=\"color: #008080;\">261</span> inline <span style=\"color: #0000ff;\">double</span> det(<span style=\"color: #0000ff;\">double</span> x1, <span style=\"color: #0000ff;\">double</span> y1, <span style=\"color: #0000ff;\">double</span> x2, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> y2)\n</span><span style=\"color: #008080;\">262</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">263</span>     <span style=\"color: #0000ff;\">return</span> x1 * y2 - x2 *<span style=\"color: #000000;\"> y1;\n</span><span style=\"color: #008080;\">264</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">265</span> inline <span style=\"color: #0000ff;\">double</span> cross2(Point3 a, Point3 b, Point3 c)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5e73\u9762\u53c9\u79ef</span>\n<span style=\"color: #008080;\">266</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">267</span>     <span style=\"color: #0000ff;\">return</span> det(b.x - a.x, b.y - a.y, c.x - a.x, c.y -<span style=\"color: #000000;\"> a.y);\n</span><span style=\"color: #008080;\">268</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">269</span> inline <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> SegCross(Point3 u1, Point3 u2, Point3 v1, Point3 v2)\n</span><span style=\"color: #008080;\">270</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">271</span>     <span style=\"color: #0000ff;\">return</span> ((dcmp(cross2(u1, u2, v1)) ^ dcmp(cross2(u1, u2, v2))) == -<span style=\"color: #800080;\">2</span> &amp;&amp;\n<span style=\"color: #008080;\">272</span>             (dcmp(cross2(v1, v2, u1)) ^ dcmp(cross2(v1, v2, u2))) == -<span style=\"color: #800080;\">2</span>) ||\n<span style=\"color: #008080;\">273</span>            ((v1.PinSeg(u1, u2) || v2.PinSeg(u1, u2)) &amp;&amp;\n<span style=\"color: #008080;\">274</span>             (u1.PonSeg(v1, v2) || u2.PonSeg(v1, v2))) ||\n<span style=\"color: #008080;\">275</span>            ((v1.PonSeg(u1, u2) || v2.PonSeg(u1, u2)) &amp;&amp;\n<span style=\"color: #008080;\">276</span>             (u1.PinSeg(v1, v2) ||<span style=\"color: #000000;\"> u2.PinSeg(v1, v2)));\n</span><span style=\"color: #008080;\">277</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">278</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">****************************************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">279</span> <span style=\"color: #0000ff;\">bool</span> CanDo(<span style=\"color: #0000ff;\">int</span> s, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> e)\n</span><span style=\"color: #008080;\">280</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">281</span>     <span style=\"color: #0000ff;\">int</span> tp =<span style=\"color: #000000;\"> PC[s].nex;\n</span><span style=\"color: #008080;\">282</span>     <span style=\"color: #0000ff;\">while</span>(tp !=<span style=\"color: #000000;\"> s)\n</span><span style=\"color: #008080;\">283</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">284</span>         <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(SegCross(PC[s].p, PC[e].p, PC[tp].p, PC[PC[tp].pre].p))\n</span><span style=\"color: #008080;\">285</span>             <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">286</span>         tp =<span style=\"color: #000000;\"> PC[tp].nex;\n</span><span style=\"color: #008080;\">287</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">288</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">289</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">290</span> <span style=\"color: #0000ff;\">void</span> AddPolyhedron(<span style=\"color: #0000ff;\">int</span> A, <span style=\"color: #0000ff;\">int</span> B, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> C)\n</span><span style=\"color: #008080;\">291</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">292</span> <span style=\"color: #000000;\">    Polyhedron t;\n</span><span style=\"color: #008080;\">293</span> <span style=\"color: #000000;\">    Plane pl;\n</span><span style=\"color: #008080;\">294</span>     Point3 a = PC[A].p, b = PC[B].p, c =<span style=\"color: #000000;\"> PC[C].p;\n</span><span style=\"color: #008080;\">295</span>     Point3 a_ = Point3(a.x, a.y, h), b_ = Point3(b.x, b.y, h), c_ =<span style=\"color: #000000;\"> Point3(c.x, c.y, h);\n</span><span style=\"color: #008080;\">296</span> <span style=\"color: #000000;\">    pl.init(a, b, c);\n</span><span style=\"color: #008080;\">297</span> <span style=\"color: #000000;\">    pl.p.push_back(a);\n</span><span style=\"color: #008080;\">298</span> <span style=\"color: #000000;\">    pl.p.push_back(b);\n</span><span style=\"color: #008080;\">299</span> <span style=\"color: #000000;\">    pl.p.push_back(c);\n</span><span style=\"color: #008080;\">300</span>     pl.outplane = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">301</span> <span style=\"color: #000000;\">    t.pl.push_front(pl);\n</span><span style=\"color: #008080;\">302</span> <span style=\"color: #000000;\">    pl.init(a_, b_, c_);\n</span><span style=\"color: #008080;\">303</span> <span style=\"color: #000000;\">    pl.p.push_back(a_);\n</span><span style=\"color: #008080;\">304</span> <span style=\"color: #000000;\">    pl.p.push_back(b_);\n</span><span style=\"color: #008080;\">305</span> <span style=\"color: #000000;\">    pl.p.push_back(c_);\n</span><span style=\"color: #008080;\">306</span> <span style=\"color: #000000;\">    t.pl.push_front(pl);\n</span><span style=\"color: #008080;\">307</span> <span style=\"color: #000000;\">    pl.init(a, b, b_);\n</span><span style=\"color: #008080;\">308</span> <span style=\"color: #000000;\">    pl.p.push_back(a);\n</span><span style=\"color: #008080;\">309</span> <span style=\"color: #000000;\">    pl.p.push_back(b);\n</span><span style=\"color: #008080;\">310</span> <span style=\"color: #000000;\">    pl.p.push_back(b_);\n</span><span style=\"color: #008080;\">311</span> <span style=\"color: #000000;\">    pl.p.push_back(a_);\n</span><span style=\"color: #008080;\">312</span>     pl.outplane = PC[A].outside, PC[A].outside = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">313</span> <span style=\"color: #000000;\">    t.pl.push_front(pl);\n</span><span style=\"color: #008080;\">314</span> <span style=\"color: #000000;\">    pl.init(b, c, c_);\n</span><span style=\"color: #008080;\">315</span> <span style=\"color: #000000;\">    pl.p.push_back(b);\n</span><span style=\"color: #008080;\">316</span> <span style=\"color: #000000;\">    pl.p.push_back(c);\n</span><span style=\"color: #008080;\">317</span> <span style=\"color: #000000;\">    pl.p.push_back(c_);\n</span><span style=\"color: #008080;\">318</span> <span style=\"color: #000000;\">    pl.p.push_back(b_);\n</span><span style=\"color: #008080;\">319</span>     pl.outplane = PC[B].outside, PC[B].outside = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">320</span> <span style=\"color: #000000;\">    t.pl.push_front(pl);\n</span><span style=\"color: #008080;\">321</span> <span style=\"color: #000000;\">    pl.init(c, a, a_);\n</span><span style=\"color: #008080;\">322</span> <span style=\"color: #000000;\">    pl.p.push_back(c);\n</span><span style=\"color: #008080;\">323</span> <span style=\"color: #000000;\">    pl.p.push_back(a);\n</span><span style=\"color: #008080;\">324</span> <span style=\"color: #000000;\">    pl.p.push_back(a_);\n</span><span style=\"color: #008080;\">325</span> <span style=\"color: #000000;\">    pl.p.push_back(c_);\n</span><span style=\"color: #008080;\">326</span>     <span style=\"color: #0000ff;\">if</span>(PC[C].nex == A &amp;&amp;<span style=\"color: #000000;\"> PC[C].outside)\n</span><span style=\"color: #008080;\">327</span>         pl.outplane = <span style=\"color: #0000ff;\">true</span>, PC[C].outside = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">328</span>     <span style=\"color: #0000ff;\">else</span> pl.outplane = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">329</span> <span style=\"color: #000000;\">    t.pl.push_front(pl);\n</span><span style=\"color: #008080;\">330</span> <span style=\"color: #000000;\">    pol.push_front(t);\n</span><span style=\"color: #008080;\">331</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">332</span> <span style=\"color: #0000ff;\">void</span> Triangulation()<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5faa\u73af\u679a\u4e3e\u76f8\u90bb\u4e09\u70b9\u5212\u5206\u4e09\u89d2\u5f62</span>\n<span style=\"color: #008080;\">333</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">334</span>     <span style=\"color: #0000ff;\">int</span> tp = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">335</span>     <span style=\"color: #0000ff;\">while</span>(PC[PC[tp].nex].nex !=<span style=\"color: #000000;\"> tp)\n</span><span style=\"color: #008080;\">336</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">337</span>         <span style=\"color: #0000ff;\">while</span>(dcmp(cross2(PC[tp].p, PC[PC[tp].nex].p, PC[PC[PC[tp].nex].nex].p)) &lt;= <span style=\"color: #800080;\">0</span> || \n<span style=\"color: #008080;\">338</span>             !CanDo(tp, PC[PC[tp].nex].nex)) tp =<span style=\"color: #000000;\"> PC[tp].nex;\n</span><span style=\"color: #008080;\">339</span> <span style=\"color: #000000;\">        AddPolyhedron(tp, PC[tp].nex, PC[PC[tp].nex].nex);\n</span><span style=\"color: #008080;\">340</span>         PC[PC[PC[tp].nex].nex].pre =<span style=\"color: #000000;\"> tp;\n</span><span style=\"color: #008080;\">341</span>         PC[tp].nex =<span style=\"color: #000000;\"> PC[PC[tp].nex].nex;\n</span><span style=\"color: #008080;\">342</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">343</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">344</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> init()\n</span><span style=\"color: #008080;\">345</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">346</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;\n</span><span style=\"color: #008080;\">347</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, tp;\n</span><span style=\"color: #008080;\">348</span> <span style=\"color: #000000;\">    pol.clear();\n</span><span style=\"color: #008080;\">349</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">350</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">351</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;x, &amp;<span style=\"color: #000000;\">y);\n</span><span style=\"color: #008080;\">352</span>         PC[i].p = Point3(x, y, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">353</span>         PC[i].pre = i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">354</span>         PC[i].nex = i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">355</span>         PC[i].outside = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">356</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">357</span>     PC[<span style=\"color: #800080;\">0</span>].pre = n - <span style=\"color: #800080;\">1</span>, PC[n - <span style=\"color: #800080;\">1</span>].nex = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">358</span> <span style=\"color: #000000;\">    Triangulation();\n</span><span style=\"color: #008080;\">359</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">360</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">****************************************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">361</span> list&lt;Polyhedron&gt;<span style=\"color: #000000;\">::iterator iti;\n</span><span style=\"color: #008080;\">362</span> list&lt;Plane&gt;<span style=\"color: #000000;\">::iterator itj;\n</span><span style=\"color: #008080;\">363</span> <span style=\"color: #0000ff;\">double</span> CalSumVol()<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6c42\u603b\u4f53\u79ef</span>\n<span style=\"color: #008080;\">364</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">365</span>     <span style=\"color: #0000ff;\">double</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">366</span> <span style=\"color: #000000;\">    Point3 tmp;\n</span><span style=\"color: #008080;\">367</span>     <span style=\"color: #0000ff;\">for</span>(iti = pol.begin(); iti != pol.end(); ++<span style=\"color: #000000;\"> iti)\n</span><span style=\"color: #008080;\">368</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">369</span>         <span style=\"color: #0000ff;\">for</span>(itj = (*iti).pl.begin(), tmp = (*itj).p[<span style=\"color: #800080;\">0</span>]; itj != (*iti).pl.end(); ++<span style=\"color: #000000;\"> itj)\n</span><span style=\"color: #008080;\">370</span>             ans += (*itj).PolygonArea() * (*<span style=\"color: #000000;\">itj).PtoPlane(tmp);\n</span><span style=\"color: #008080;\">371</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">372</span>     <span style=\"color: #0000ff;\">return</span> ans / <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">373</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">374</span> <span style=\"color: #0000ff;\">double</span> CalSumArea()<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6c42\u603b\u9762\u79ef</span>\n<span style=\"color: #008080;\">375</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">376</span>     <span style=\"color: #0000ff;\">double</span> ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">377</span>     <span style=\"color: #0000ff;\">for</span>(iti = pol.begin(); iti != pol.end(); ++<span style=\"color: #000000;\"> iti)\n</span><span style=\"color: #008080;\">378</span>         <span style=\"color: #0000ff;\">for</span>(itj = (*iti).pl.begin(); itj != (*iti).pl.end(); ++<span style=\"color: #000000;\"> itj)\n</span><span style=\"color: #008080;\">379</span>             <span style=\"color: #0000ff;\">if</span>((*itj).outplane) ans += (*<span style=\"color: #000000;\">itj).PolygonArea();\n</span><span style=\"color: #008080;\">380</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">381</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">382</span> \n<span style=\"color: #008080;\">383</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> MakeAns()\n</span><span style=\"color: #008080;\">384</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">385</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> a, b, c, d;\n</span><span style=\"color: #008080;\">386</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> flag;\n</span><span style=\"color: #008080;\">387</span>     <span style=\"color: #0000ff;\">while</span>(m --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">388</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">389</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;a, &amp;b, &amp;c, &amp;<span style=\"color: #000000;\">d);\n</span><span style=\"color: #008080;\">390</span>         <span style=\"color: #0000ff;\">for</span>(iti = pol.begin(); iti !=<span style=\"color: #000000;\"> pol.end();)\n</span><span style=\"color: #008080;\">391</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">392</span> <span style=\"color: #000000;\">            Plane tmp(a, b, c, d);\n</span><span style=\"color: #008080;\">393</span>             tmp.outplane = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">394</span>             <span style=\"color: #0000ff;\">for</span>(itj = (*iti).pl.begin(), flag = <span style=\"color: #0000ff;\">false</span>; itj != (*<span style=\"color: #000000;\">iti).pl.end();)\n</span><span style=\"color: #008080;\">395</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">396</span>                 <span style=\"color: #0000ff;\">if</span>(!(*<span style=\"color: #000000;\">itj).Cut(tmp))\n</span><span style=\"color: #008080;\">397</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">398</span>                     list&lt;Plane&gt;::iterator tmpj =<span style=\"color: #000000;\"> itj;\n</span><span style=\"color: #008080;\">399</span>                     ++<span style=\"color: #000000;\"> itj;\n</span><span style=\"color: #008080;\">400</span>                     (*<span style=\"color: #000000;\">iti).pl.erase(tmpj);\n</span><span style=\"color: #008080;\">401</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">402</span>                 <span style=\"color: #0000ff;\">else</span> flag = <span style=\"color: #0000ff;\">true</span>, ++<span style=\"color: #000000;\"> itj;\n</span><span style=\"color: #008080;\">403</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">404</span>             <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">flag)\n</span><span style=\"color: #008080;\">405</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">406</span>                 list&lt;Polyhedron&gt;::iterator tmpi =<span style=\"color: #000000;\"> iti;\n</span><span style=\"color: #008080;\">407</span>                 ++<span style=\"color: #000000;\"> iti;\n</span><span style=\"color: #008080;\">408</span> <span style=\"color: #000000;\">                pol.erase(tmpi);\n</span><span style=\"color: #008080;\">409</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">410</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(tmp.p.size())\n</span><span style=\"color: #008080;\">411</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">412</span> <span style=\"color: #000000;\">                tmp.Graham();\n</span><span style=\"color: #008080;\">413</span>                 (*<span style=\"color: #000000;\">iti).pl.push_front(tmp);\n</span><span style=\"color: #008080;\">414</span>                 ++<span style=\"color: #000000;\"> iti;\n</span><span style=\"color: #008080;\">415</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">416</span>             <span style=\"color: #0000ff;\">else</span> ++<span style=\"color: #000000;\"> iti;\n</span><span style=\"color: #008080;\">417</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">418</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.3f %.3f\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, CalSumVol(), CalSumArea());\n</span><span style=\"color: #008080;\">419</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">420</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">421</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">422</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">423</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;h, &amp;m), n | h |<span style=\"color: #000000;\"> m)\n</span><span style=\"color: #008080;\">424</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">425</span> <span style=\"color: #000000;\">        init();\n</span><span style=\"color: #008080;\">426</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.3f %.3f\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, CalSumVol(), CalSumArea());\n</span><span style=\"color: #008080;\">427</span> <span style=\"color: #000000;\">        MakeAns();\n</span><span style=\"color: #008080;\">428</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">429</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">430</span> }</pre>\n</div>\n</div>"
			}, {
				"title": "HDU3511 Prison Break \u5173\u4e8e\u5706\u7684\u626b\u63cf\u7ebf",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/12/2681050.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Tue, 11 Sep 2012 17:12:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/12/2681050.html",
				"description": "<p><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091200524379.png\" alt=\"\" width=\"300\" /><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091201021220.png\" alt=\"\" width=\"300\" /></p>\n<p>\u9996\u5148\u548c\u4f20\u7edf\u626b\u63cf\u7ebf\u7684\u65b9\u6cd5\u4e00\u6837\u5148\u628a\u6bcf\u4e2a\u5706\u5de6\u53f3\u4fa7x\u5750\u6807\u79bb\u6563\u51fa\u6765\u6392\u4e2a\u5e8f\u6807\u8bb0\u597d\u8fdb\u51fa\uff0c\u7136\u540e\u5f00\u59cb\u626b\u63cf\u3002</p>\n<p>\u5982\u679c\u5168\u662f\u77e9\u5f62\uff0c\u5c31\u5f88\u597d\u5904\u7406\u3002\u5706\u5c31\u9ebb\u70e6\u5728\u6ca1\u6709\u50cf\u77e9\u5f62\u90a3\u6837\u53ef\u4ee5\u79bb\u6563\u5316\u7684\u89c4\u5219\u4e0a\u4e0b\u754c\uff0c\u4fbf\u65e0\u6cd5\u7528\u9884\u5904\u7406\u597d\u7684\u79bb\u6563\u7f16\u53f7\u6765\u6784\u5efa\u7ebf\u6bb5\u6811\u3002</p>\n<p>\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u8bf4\u4e86\u5706\u4e0e\u5706\u4e0d\u4f1a\u76f8\u5207\u6216\u76f8\u4ea4\uff0c\u90a3\u4e48\u5bf9\u4e8e\u626b\u63cf\u7ebf\u626b\u63cf\u7684\u8fc7\u7a0b\u4e2d\u4ece\u4e0a\u5230\u4e0b\u7a7f\u8fc7\u5404\u4e2a\u5706\u7684\u987a\u5e8f\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u4e8c\u53c9\u6811\uff0c\u628a\u626b\u63cf\u7ebf\u7ecf\u8fc7\u7684&ldquo;\u8fb9&rdquo;\u6709\u5e8f\u5730\u63d2\u5165\uff08\u8fd9\u91cc\u7528set\u5c31\u5f88\u65b9\u4fbf\u9ad8\u6548\u4e86\uff09\uff0c\u5bf9\u4e8e\u5706\u6765\u8bf4\uff0c\u8fd9\u4e2a\u8fb9\u5c31\u662f\u4e0e\u4e0a\u534a\u5706\u4ea4\u70b9\u7eb5\u5750\u6807\u548c\u4e0e\u4e0b\u534a\u5706\u4ea4\u70b9\u7eb5\u5750\u6807\u3002\u7531\u4e8e\u626b\u63cf\u7ebf\u4f4d\u7f6e\u7684\u53d8\u5316\uff0c\u63d2\u5165\u65f6\u7528\u6765\u6bd4\u8f83\u7684\u4ee3\u8868&ldquo;\u8fb9&rdquo;\u7684\u7eb5\u5750\u6807\u4e5f\u4f1a\u53d8\u5316\uff0c\u4f46\u662f\u524d\u9762\u8bf4\u8fc7\uff0c\u626b\u63cf\u7ebf\u7a7f\u8fc7\u5706\u7684\u987a\u5e8f\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u6240\u4ee5\u65b0\u7684&ldquo;\u8fb9&rdquo;\u4f9d\u7136\u4f1a\u63d2\u5165\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u5176\u4ed6&ldquo;\u8fb9&rdquo;\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e5f\u4e0d\u4f1a\u6539\u53d8\u3002</p>\n<p>\u8fb9\u7684\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u5c31\u53ef\u4ee5\u50cf\u77e9\u5f62\u7684\u56fe\u90a3\u6837\u7406\u89e3\u4e86\uff1a</p>\n<p>\u626b\u63cf\u5230\u4e00\u4e2a\u77e9\u5f62A\u5de6\u4fa7\u65f6\uff0c\u4e0a\u65b9\u6216\u4e0b\u65b9\u6ca1\u6709\u8fb9\uff0c\u5219\u8fd9\u4e2a\u77e9\u5f62\u5728\u6700\u5916\u4fa7\uff1b</p>\n<p>\u4e0a\u65b9\u4e0e\u4e0b\u65b9\u8fb9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u77e9\u5f62B\uff0c\u5219\u77e9\u5f62A\u6bd4\u77e9\u5f62B\u6df1\u5ea6\u591a1\uff1b</p>\n<p>\u4e0a\u65b9\u4e0e\u4e0b\u65b9\u8fb9\u5206\u522b\u5c5e\u4e8e\u77e9\u5f62B\u4e0e\u77e9\u5f62C\uff0c\u5219\u77e9\u5f62A\u4e0e\u8f83\u6df1\u7684\u90a3\u4e2a\u77e9\u5f62\u6df1\u5ea6\u76f8\u540c\u3002</p>\n<p>\u7531\u6b64\u53ef\u5f97\u5230\u6bcf\u4e2a\u77e9\u5f62\u7684\u6df1\u5ea6\uff0c\u66f4\u65b0\u6700\u6df1\u7684\u4e3a\u7b54\u6848\u3002</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;\u5206\u5272\u7ebf&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>\n<p>\u7f51\u4e0a\u770b\u5230\u6709\u4eba\u7528\u968f\u673a\u7684\u505a\uff0c\u4e8e\u662f\u4e5f\u60f3\u8bd5\u8bd5\uff08\u6709\u65f6\u5019\u5c31\u662f\u4f1a\u505a\u4e00\u4e9b\u65e0\u804a\u7684\u4e8b\u60c5&hellip;&hellip;<img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091201095277.gif\" alt=\"\" />\uff09\uff0c\u7531\u4e8e\u6570\u636e\u6ca1\u6709\u4e13\u95e8\u5361\u968f\u673a\u7b97\u6cd5\uff0c\u610f\u5916\u5730\u53d1\u73b0\u4e86\u4e00\u4e2asrand()\u7684\u79cd\u5b50\uff0c\u5c3193ms\u4e86&hellip;&hellip;</p>\n<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;\u5206\u5272\u7ebf&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>\n<p>\u4e0d\u9760\u8c31\u7684\u4e1c\u897f\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u53ea\u8d34\u4e2a\u6b63\u89e3\u7684\u4ee3\u7801\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\"> 5</span> #include&lt;<span style=\"color: #0000ff;\">set</span>&gt;\n<span style=\"color: #008080;\"> 6</span> #include&lt;iostream&gt;\n<span style=\"color: #008080;\"> 7</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">51111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">11</span> inline <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> (x &gt; eps) - (x &lt; -<span style=\"color: #000000;\">eps);}\n</span><span style=\"color: #008080;\">12</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> LineNow, ltp, n, cnt[maxn];\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #0000ff;\">struct</span> Cir<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5706</span>\n<span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">16</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">17</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> y;\n</span><span style=\"color: #008080;\">18</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> r;\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">}c[maxn];\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #0000ff;\">struct</span> Line<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4ece\u5de6\u5411\u53f3\u626b\u63cf\u8282\u70b9</span>\n<span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">22</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> id;\n</span><span style=\"color: #008080;\">23</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>     <span style=\"color: #0000ff;\">void</span> Read(<span style=\"color: #0000ff;\">int</span> id_, <span style=\"color: #0000ff;\">bool</span> in_){id = id_, <span style=\"color: #0000ff;\">in</span> =<span style=\"color: #000000;\"> in_;}\n</span><span style=\"color: #008080;\">25</span>     inline <span style=\"color: #0000ff;\">int</span> GetSite()<span style=\"color: #0000ff;\">const</span>{<span style=\"color: #0000ff;\">return</span> c[id].x + (<span style=\"color: #0000ff;\">in</span> ? -<span style=\"color: #000000;\">c[id].r : c[id].r);}\n</span><span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Line &amp;b)<span style=\"color: #0000ff;\">const</span>{<span style=\"color: #0000ff;\">return</span> GetSite() &lt;<span style=\"color: #000000;\"> b.GetSite();}\n</span><span style=\"color: #008080;\">27</span> }l[maxn &lt;&lt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #0000ff;\">struct</span> Node<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4ece\u4e0a\u81f3\u4e0b\u6392\u5e8f\u8282\u70b9</span>\n<span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">30</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> id;\n</span><span style=\"color: #008080;\">31</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> up;\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">    Node(){}\n</span><span style=\"color: #008080;\">33</span>     Node(<span style=\"color: #0000ff;\">int</span> id_, <span style=\"color: #0000ff;\">bool</span> up_){id = id_, up =<span style=\"color: #000000;\"> up_;}\n</span><span style=\"color: #008080;\">34</span>     inline <span style=\"color: #0000ff;\">double</span> GetSite()<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">35</span>     {<span style=\"color: #0000ff;\">return</span> c[id].y + sqrt(Sqr(c[id].r) - Sqr(LineNow - c[id].x)) * (up ? <span style=\"color: #800080;\">1</span> : -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);}\n</span><span style=\"color: #008080;\">36</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Node &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">38</span>         <span style=\"color: #0000ff;\">double</span> y1 =<span style=\"color: #000000;\"> GetSite();\n</span><span style=\"color: #008080;\">39</span>         <span style=\"color: #0000ff;\">double</span> y2 =<span style=\"color: #000000;\"> b.GetSite();\n</span><span style=\"color: #008080;\">40</span>         <span style=\"color: #0000ff;\">return</span> dcmp(y1 - y2) ? y1 &gt; y2 : up &gt;<span style=\"color: #000000;\"> b.up;\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">43</span> <span style=\"color: #0000ff;\">set</span>&lt;Node&gt;<span style=\"color: #000000;\"> s;\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #0000ff;\">set</span>&lt;Node&gt;<span style=\"color: #000000;\">::iterator iti, itn;\n</span><span style=\"color: #008080;\">45</span> <span style=\"color: #0000ff;\">void</span> ReadData(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">46</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">47</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">48</span>     <span style=\"color: #0000ff;\">for</span>(ltp = i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">50</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;c[i].x, &amp;c[i].y, &amp;<span style=\"color: #000000;\">c[i].r);\n</span><span style=\"color: #008080;\">51</span>         l[ltp ++].Read(i, <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">52</span>         l[ltp ++].Read(i, <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">53</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">54</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">55</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> MakeAns()\n</span><span style=\"color: #008080;\">56</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">57</span>     <span style=\"color: #0000ff;\">int</span> i, ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">58</span>     sort(l, l +<span style=\"color: #000000;\"> ltp);\n</span><span style=\"color: #008080;\">59</span> <span style=\"color: #000000;\">    s.clear();\n</span><span style=\"color: #008080;\">60</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; ltp; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">61</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">62</span>         LineNow =<span style=\"color: #000000;\"> l[i].GetSite();\n</span><span style=\"color: #008080;\">63</span>         <span style=\"color: #0000ff;\">if</span>(!l[i].<span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">64</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">65</span>             s.erase(Node(l[i].id, <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">66</span>             s.erase(Node(l[i].id, <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">67</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">68</span>         <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">69</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">70</span>             iti = itn = s.insert(Node(l[i].id, <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">)).first;\n</span><span style=\"color: #008080;\">71</span>             itn ++<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">72</span>             <span style=\"color: #0000ff;\">if</span>(iti == s.begin() || itn == s.end()) cnt[l[i].id] = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">73</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">74</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">75</span>                 iti --<span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">76</span>                 <span style=\"color: #0000ff;\">if</span>((*iti).id == (*itn).id) cnt[l[i].id] = cnt[(*iti).id] + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">77</span>                 <span style=\"color: #0000ff;\">else</span> cnt[l[i].id] = max(cnt[(*iti).id], cnt[(*<span style=\"color: #000000;\">itn).id]);\n</span><span style=\"color: #008080;\">78</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">79</span>             ans =<span style=\"color: #000000;\"> max(ans, cnt[l[i].id]);\n</span><span style=\"color: #008080;\">80</span>             s.insert(Node(l[i].id, <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">81</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">82</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">83</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">84</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">85</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">86</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">87</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;n) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">88</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">89</span> <span style=\"color: #000000;\">        ReadData(n);\n</span><span style=\"color: #008080;\">90</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, MakeAns());\n</span><span style=\"color: #008080;\">91</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">92</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">93</span> }</pre>\n</div>"
			}, {
				"title": "\u795d\u8d3aswm8023\u5237HDU-Steps\u767b\u9876+\u7a81\u7834\u65b0Section\uff0c14.2\u4e0d\u662f\u4f20\u8bf4\u4e2d\u7684\u9ad8\u7ea7\u8ba1\u7b97\u51e0\u4f55\uff0c\u800c\u662f\u6570\u5b66~~",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/10/2679490.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 10 Sep 2012 14:50:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/10/2679490.html",
				"description": "<p>\u795d\u8d3aswm8023\u5237HDU-Steps\u767b\u9876+\u7a81\u7834\u65b0Section\uff0c14.2\u4e0d\u662f\u4f20\u8bf4\u4e2d\u7684\u9ad8\u7ea7\u8ba1\u7b97\u51e0\u4f55\uff0c\u800c\u662f\u6570\u5b66~~</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091022485493.png\" alt=\"\" /></p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091022463510.png\" alt=\"\" /></p>"
			}, {
				"title": "HDU2468 Experiment on a \u2026 \u201cCable\u201d",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/10/2679452.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 10 Sep 2012 14:29:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/10/2679452.html",
				"description": "<p><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091022215951.png\" alt=\"\" /></p>\n<p>\u5982\u56fe\uff0c\u6a2a\u5750\u6807\u4e3a\u65f6\u95f4\u8f74\uff0c\u7eb5\u5750\u6807\u4e3a\u76f8\u5bf9\u8d77\u70b9\u7684\u4f4d\u79fb\uff0c\u659c\u7387\u4e3a\u901f\u5ea6\u3002</p>\n<p>\u8bbeC\u4e3a\u8d77\u70b9\u53d1\u51fa\u7684\u5305\uff0c\u53d1\u51fa\u65f6\u95f4\u4e3a1\uff0c\u901f\u5ea6\u4e3a1~2\u3002</p>\n<p>\u8bbeD\u4e3a\u7ec8\u70b9\u53d1\u51fa\u7684\u5305\uff0c\u53d1\u51fa\u65f6\u95f4\u4e3a2\uff0c\u901f\u5ea6\u4e3a1~2\u3002</p>\n<p>A\u3001B\u4e3a\u63a2\u6d4b\u5668\u53d1\u51fa\u65f6\u95f4\u8303\u56f42~5\uff0c\u901f\u5ea6\u4e3a4\u3002</p>\n<p>\u7531\u56fe\u53ef\u770b\u51fa\uff0c\u53d1\u5305\u7684\u65f6\u95f4-\u4f4d\u79fb\u76f8\u53e0\u7684\u8303\u56f4\u4e3a\u53ef\u80fd\u5168\u90e8\u6293\u5305\u7684\u8303\u56f4\uff0c\u79f0\u6709\u6548\u8303\u56f4\u3002</p>\n<p>\u5728\u63a2\u6d4b\u5668\u7684\u65f6\u95f4-\u4f4d\u79fb\u8303\u56f4\u5185\u7684\u6709\u6548\u8303\u56f4/\u63a2\u6d4b\u5668\u65f6\u95f4-\u4f4d\u79fb\u8303\u56f4\u5373\u63a2\u6d4b\u5668\u5168\u90e8\u6293\u5305\u7684\u5e73\u5747\u5de5\u4f5c\u6548\u7387\u3002</p>\n<p>\u5bf9\u6240\u6709\u901f\u5ea6\u533a\u95f4\u3001\u63a2\u6d4b\u5668\u65f6\u95f4-\u4f4d\u79fb\u533a\u95f4\u3001\u8d77\u70b9\u7ec8\u70b9\u533a\u95f4 \u505a\u534a\u5e73\u9762\u4ea4\uff0c\u5f97\u5230\u51f8\u5305\u9762\u79ef\u9664\u4ee5\u63a2\u6d4b\u5668\u65f6\u95f4-\u4f4d\u79fb\u533a\u95f4\u9762\u79ef\u53ef\u5f97\u89e3\u3002</p>\n<p>\u7cbe\u5ea6\u8981\u6c42\u633a\u9ad8\u7684\uff0ceps\u6ce8\u610f\u4e00\u4e0b\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\">  6</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">5111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">12</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 10</span> typedef <span style=\"color: #0000ff;\">struct</span>{<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;}Point;\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> (x &gt; eps) - (x &lt; -<span style=\"color: #000000;\">eps);}\n</span><span style=\"color: #008080;\"> 12</span> inline <span style=\"color: #0000ff;\">double</span> det(<span style=\"color: #0000ff;\">double</span> x1, <span style=\"color: #0000ff;\">double</span> y1, <span style=\"color: #0000ff;\">double</span> x2, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> y2)\n</span><span style=\"color: #008080;\"> 13</span> {<span style=\"color: #0000ff;\">return</span> x1 * y2 - x2 *<span style=\"color: #000000;\"> y1;}\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> cross(Point a, Point b, Point c)\n</span><span style=\"color: #008080;\"> 15</span> {<span style=\"color: #0000ff;\">return</span> det(b.x -a.x, b.y - a.y, c.x - a.x, c.y -<span style=\"color: #000000;\"> a.y);}\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> EqualPoint(Point a, Point b)\n</span><span style=\"color: #008080;\"> 17</span> {<span style=\"color: #0000ff;\">return</span> dcmp(a.x - b.x) == <span style=\"color: #800080;\">0</span> &amp;&amp; dcmp(a.y - b.y) == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 18</span> typedef <span style=\"color: #0000ff;\">struct</span>{Point s, e;<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> ang, d;}Line;\n</span><span style=\"color: #008080;\"> 19</span> Point MakePoint(<span style=\"color: #0000ff;\">double</span> xx, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> yy)\n</span><span style=\"color: #008080;\"> 20</span> {Point res;res.x = xx, res.y = yy;<span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;}\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #0000ff;\">void</span> SetLine(Point a, Point b, Line &amp;<span style=\"color: #000000;\">l)\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 23</span>     l.s =<span style=\"color: #000000;\"> a;\n</span><span style=\"color: #008080;\"> 24</span>     l.e =<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\"> 25</span>     l.ang = atan2(b.y - a.y, b.x -<span style=\"color: #000000;\"> a.x);\n</span><span style=\"color: #008080;\"> 26</span>     <span style=\"color: #0000ff;\">if</span>(dcmp(a.x - b.x)) l.d = (a.x * b.y - b.x * a.y) / fabs(a.x -<span style=\"color: #000000;\"> b.x);\n</span><span style=\"color: #008080;\"> 27</span>     <span style=\"color: #0000ff;\">else</span> l.d = (a.x * b.y - b.x * a.y) / fabs(a.y -<span style=\"color: #000000;\"> b.y);\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 29</span> <span style=\"color: #0000ff;\">bool</span> Parallel(<span style=\"color: #0000ff;\">const</span> Line &amp;la, <span style=\"color: #0000ff;\">const</span> Line &amp;<span style=\"color: #000000;\">lb)\n</span><span style=\"color: #008080;\"> 30</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 31</span>     <span style=\"color: #0000ff;\">return</span> !dcmp( (la.e.x - la.s.x) * (lb.e.y - lb.s.y) -\n<span style=\"color: #008080;\"> 32</span>             (la.e.y - la.s.y) * (lb.e.x -<span style=\"color: #000000;\"> lb.s.x) );\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 34</span> Point CrossPoint(<span style=\"color: #0000ff;\">const</span> Line &amp;la, <span style=\"color: #0000ff;\">const</span> Line &amp;<span style=\"color: #000000;\">lb)\n</span><span style=\"color: #008080;\"> 35</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 36</span> <span style=\"color: #000000;\">    Point res;\n</span><span style=\"color: #008080;\"> 37</span>     <span style=\"color: #0000ff;\">double</span> u = cross(la.s, la.e, lb.s), v =<span style=\"color: #000000;\"> cross(la.e, la.s, lb.e);\n</span><span style=\"color: #008080;\"> 38</span>     res.x = (lb.s.x * v + lb.e.x * u) / (u +<span style=\"color: #000000;\"> v);\n</span><span style=\"color: #008080;\"> 39</span>     res.y = (lb.s.y * v + lb.e.y * u) / (u +<span style=\"color: #000000;\"> v);\n</span><span style=\"color: #008080;\"> 40</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #0000ff;\">int</span> CompL(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *a, <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 44</span>     Line la = *(Line*)a, lb = *(Line*<span style=\"color: #000000;\">)b;\n</span><span style=\"color: #008080;\"> 45</span>     <span style=\"color: #0000ff;\">if</span>(dcmp(la.ang - lb.ang)) <span style=\"color: #0000ff;\">return</span> la.ang &gt; lb.ang ? <span style=\"color: #800080;\">1</span> : -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 46</span>     <span style=\"color: #0000ff;\">return</span> la.d &gt; lb.d ? <span style=\"color: #800080;\">1</span> : -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 47</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 48</span> \n<span style=\"color: #008080;\"> 49</span> <span style=\"color: #000000;\">Line deq[maxn];\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #0000ff;\">bool</span> HalfPanelCross(Line l[], <span style=\"color: #0000ff;\">int</span> n, Point cp[], <span style=\"color: #0000ff;\">int</span> &amp;<span style=\"color: #000000;\">m)\n</span><span style=\"color: #008080;\"> 51</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 52</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, tn;\n</span><span style=\"color: #008080;\"> 53</span>     m = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 54</span>     qsort(l, n, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(Line), CompL);\n</span><span style=\"color: #008080;\"> 55</span>     <span style=\"color: #0000ff;\">for</span>(i = tn = <span style=\"color: #800080;\">1</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 56</span>         <span style=\"color: #0000ff;\">if</span>(dcmp(l[i].ang - l[i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].ang))\n</span><span style=\"color: #008080;\"> 57</span>             l[tn ++] =<span style=\"color: #000000;\"> l[i];\n</span><span style=\"color: #008080;\"> 58</span>     n =<span style=\"color: #000000;\"> tn;\n</span><span style=\"color: #008080;\"> 59</span>     <span style=\"color: #0000ff;\">int</span> front = <span style=\"color: #800080;\">0</span>, rear = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 60</span>     deq[<span style=\"color: #800080;\">0</span>] = l[<span style=\"color: #800080;\">0</span>], deq[<span style=\"color: #800080;\">1</span>] = l[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 61</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">2</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 63</span>         <span style=\"color: #0000ff;\">if</span>(Parallel(deq[rear], deq[rear - <span style=\"color: #800080;\">1</span>]) ||\n<span style=\"color: #008080;\"> 64</span>             Parallel(deq[front], deq[front + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\"> 65</span>             <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 66</span>         <span style=\"color: #0000ff;\">while</span>(front &lt; rear &amp;&amp;<span style=\"color: #000000;\"> dcmp( cross(l[i].s, l[i].e,\n</span><span style=\"color: #008080;\"> 67</span>             CrossPoint(deq[rear], deq[rear - <span style=\"color: #800080;\">1</span>])) ) &lt; <span style=\"color: #800080;\">0</span>) --<span style=\"color: #000000;\"> rear;\n</span><span style=\"color: #008080;\"> 68</span>         <span style=\"color: #0000ff;\">while</span>(front &lt; rear &amp;&amp;<span style=\"color: #000000;\"> dcmp( cross(l[i].s, l[i].e,\n</span><span style=\"color: #008080;\"> 69</span>             CrossPoint(deq[front], deq[front + <span style=\"color: #800080;\">1</span>])) ) &lt; <span style=\"color: #800080;\">0</span>) ++<span style=\"color: #000000;\"> front;\n</span><span style=\"color: #008080;\"> 70</span>         deq[++ rear] =<span style=\"color: #000000;\"> l[i];\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 72</span>     <span style=\"color: #0000ff;\">while</span>(front &lt; rear &amp;&amp;<span style=\"color: #000000;\"> dcmp( cross(deq[front].s, deq[front].e,\n</span><span style=\"color: #008080;\"> 73</span>         CrossPoint(deq[rear], deq[rear - <span style=\"color: #800080;\">1</span>])) ) &lt; <span style=\"color: #800080;\">0</span>) --<span style=\"color: #000000;\"> rear;\n</span><span style=\"color: #008080;\"> 74</span>     <span style=\"color: #0000ff;\">while</span>(front &lt; rear &amp;&amp;<span style=\"color: #000000;\"> dcmp( cross(deq[rear].s, deq[rear].e,\n</span><span style=\"color: #008080;\"> 75</span>         CrossPoint(deq[front], deq[front + <span style=\"color: #800080;\">1</span>])) ) &lt; <span style=\"color: #800080;\">0</span>) ++<span style=\"color: #000000;\"> front;\n</span><span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">if</span>(rear &lt;= front + <span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 77</span>     <span style=\"color: #0000ff;\">for</span>(i = front; i &lt; rear; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 78</span>         cp[m ++] = CrossPoint(deq[i], deq[i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\"> 79</span>     <span style=\"color: #0000ff;\">if</span>(front &lt; rear + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 80</span>         cp[m ++] =<span style=\"color: #000000;\"> CrossPoint(deq[front], deq[rear]);\n</span><span style=\"color: #008080;\"> 81</span>     m = unique(cp, cp + m, EqualPoint) -<span style=\"color: #000000;\"> cp;\n</span><span style=\"color: #008080;\"> 82</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; m; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 83</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 84</span>         <span style=\"color: #0000ff;\">if</span>(dcmp(cp[i].x) == <span style=\"color: #800080;\">0</span>) cp[i].x = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 85</span>         <span style=\"color: #0000ff;\">if</span>(dcmp(cp[i].y) == <span style=\"color: #800080;\">0</span>) cp[i].y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 86</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 87</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 88</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 89</span> <span style=\"color: #0000ff;\">double</span> PolygonArea(Point p[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 90</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 91</span>     <span style=\"color: #0000ff;\">if</span>(n &lt; <span style=\"color: #800080;\">3</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0.0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 92</span>     <span style=\"color: #0000ff;\">double</span> s = p[<span style=\"color: #800080;\">0</span>].y * (p[n - <span style=\"color: #800080;\">1</span>].x - p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].x);\n</span><span style=\"color: #008080;\"> 93</span>     p[n] = p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 94</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 95</span>         s += p[i].y * (p[i - <span style=\"color: #800080;\">1</span>].x - p[i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].x);\n</span><span style=\"color: #008080;\"> 96</span>     <span style=\"color: #0000ff;\">return</span> fabs(s * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 97</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 98</span> Line l[maxn &lt;&lt; <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 99</span> Point p[maxn &lt;&lt; <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">100</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> len;\n</span><span style=\"color: #008080;\">101</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, m, ltp;\n</span><span style=\"color: #008080;\">102</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> maxv, minv, ti;\n</span><span style=\"color: #008080;\">103</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> start, end, v;\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">106</span>     <span style=\"color: #0000ff;\">int</span> ca = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">107</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">len), dcmp(len))\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">109</span>         ltp = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">110</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">n);\n</span><span style=\"color: #008080;\">111</span>         <span style=\"color: #0000ff;\">while</span>(n --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">112</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">113</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;minv, &amp;maxv, &amp;<span style=\"color: #000000;\">ti);\n</span><span style=\"color: #008080;\">114</span>             SetLine(MakePoint(ti, <span style=\"color: #800080;\">0</span>), MakePoint(ti + <span style=\"color: #800080;\">1</span>, minv), l[ltp ++<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">115</span>             SetLine(MakePoint(ti + <span style=\"color: #800080;\">1</span>, maxv), MakePoint(ti, <span style=\"color: #800080;\">0</span>), l[ltp ++<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">116</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">117</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">m);\n</span><span style=\"color: #008080;\">118</span>         <span style=\"color: #0000ff;\">while</span>(m --<span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">119</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">120</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;minv, &amp;maxv, &amp;<span style=\"color: #000000;\">ti);\n</span><span style=\"color: #008080;\">121</span>             SetLine(MakePoint(ti + <span style=\"color: #800080;\">1</span>, len - minv), MakePoint(ti, len), l[ltp ++<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">122</span>             SetLine(MakePoint(ti, len), MakePoint(ti + <span style=\"color: #800080;\">1</span>, len - maxv), l[ltp ++<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">123</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">124</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;start, &amp;end, &amp;<span style=\"color: #000000;\">v);\n</span><span style=\"color: #008080;\">125</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Case #%d: </span><span style=\"color: #800000;\">\"</span>, ++<span style=\"color: #000000;\"> ca);\n</span><span style=\"color: #008080;\">126</span>         SetLine(MakePoint(<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>), MakePoint(<span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">0</span>), l[ltp ++<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">127</span>         SetLine(MakePoint(<span style=\"color: #800080;\">1</span>, len), MakePoint(<span style=\"color: #800080;\">0</span>, len), l[ltp ++<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">128</span>         SetLine(MakePoint(start + <span style=\"color: #800080;\">1</span>, v), MakePoint(start, <span style=\"color: #800080;\">0</span>), l[ltp ++<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">129</span>         SetLine(MakePoint(end, <span style=\"color: #800080;\">0</span>), MakePoint(end + <span style=\"color: #800080;\">1</span>, v), l[ltp ++<span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">130</span>         <span style=\"color: #0000ff;\">if</span>(!HalfPanelCross(l, ltp, p, n)){printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">0.00000\\n</span><span style=\"color: #800000;\">\"</span>); <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\">131</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.5f\\n</span><span style=\"color: #800000;\">\"</span>, PolygonArea(p, n) / (end - start) / len +<span style=\"color: #000000;\"> eps);\n</span><span style=\"color: #008080;\">132</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">133</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">134</span> }</pre>\n</div>"
			}, {
				"title": "HDU1883 Phone Cell",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/10/2678682.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 10 Sep 2012 06:10:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/10/2678682.html",
				"description": "<p><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091013574114.jpg\" alt=\"\" width=\"500\" /></p>\n<p>\u5982\u4e0a\u56fe\uff0c\u8bbeA\u3001B\u4e3a\u70b9\u96c6\u4e2d\u7684\u4e24\u4e2a\u70b9\uff0c \u5206\u522b\u4ee5A\u3001B\u4e3a\u5706\u5fc3\u4f5c\u5355\u4f4d\u5706\uff0c\u5219\u76f8\u4ea4\u8303\u56f4\u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u4f5c\u65b0\u7684\u5355\u4f4d\u5706\uff0c\u90fd\u53ef\u4ee5\u540c\u65f6\u5305\u542bA\u4e0eB\uff0c\u5982\u5706C\uff0c\u5982\u679c\u628aC\u653e\u5728\u4e00\u4e2a\u5176\u4e2d\u4e00\u4e2a\u5706A\u7684\u5706\u5468\u4e0a\uff0c\u5219\u5706C\u7684\u5706\u5468\u4f1a\u7a7f\u8fc7\u70b9A\u3002</p>\n<p>\u5047\u8bbe\u5df2\u5f97\u5230\u9898\u76ee\u7684\u4e00\u4e2a\u89e3\u5706O\uff0c\u5219\u628a\u5f97\u5230\u7684\u5706O\u901a\u8fc7\u79fb\u52a8\uff0c\u603b\u53ef\u4ee5\u8ba9\u5706\u5185\u7684\u67d0\u4e2a\u70b9X\u9760\u5728\u5706\u5468\u4e0a\uff0c\u6362\u8a00\u4e4b\uff0cO\u4e5f\u5728X\u6240\u4f5c\u5355\u4f4d\u5706\u7684\u5706\u5468\u4e0a\u3002</p>\n<p>\u7531\u6b64\uff0c\u53ef\u679a\u4e3e\u5728\u6700\u7ec8\u7ed3\u679c\u7684\u5706\u5468\u4e0a\u7684\u70b9X\uff0c\u76ee\u6807\u5706\u5fc3O\u5728X\u7684\u5706\u5468\u4e0a\u3002</p>\n<p>\u6bcf\u679a\u4e3e\u4e00\u4e2aX\u4f5c\u4e3a\u56fe\u4e2d\u7684\u70b9A\uff0c\u679a\u4e3e\u5176\u4ed6\u6240\u6709\u70b9\u4f5c\u4e3a\u70b9B\uff0c\u53ef\u5f97\u5230C\u5bf9\u5e94\u70b9A\u3001B\u7684\u5728A\u5706\u5468\u4e0a\u7684\u4e00\u4e2a\u8303\u56f4\uff0c\u8986\u76d6\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u8303\u56f4\u5c31\u662f\u5f53X\u4f5c\u4e3a\u70b9O\u5706\u5468\u4e0a\u7684\u70b9\u6240\u80fd\u5f97\u5230\u7684\u6700\u4f18\u89e3O\u7684\u8303\u56f4\uff0c\u8fd9\u4e2a\u6b21\u6570\u52a01\uff08\u70b9X\uff09\u5c31\u662f\u5bf9\u5e94X\u7684\u6700\u4f18\u89e3\u3002</p>\n<p>\u901a\u8fc7\u679a\u4e3e\u6240\u6709X\uff0c\u66f4\u65b0\u51fa\u6700\u4f18\u89e3\u3002</p>\n<p>\u8986\u76d6\u8303\u56f4\u53ef\u4ee5\u7528\u5706\u5468\u89d2\u8868\u793a\uff0c\u5219\u4e3a\u533a\u95f4\u8986\u76d6\u95ee\u9898\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\"> 5</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">2111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, R, ctp;\n</span><span style=\"color: #008080;\">10</span> inline <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span> x) {<span style=\"color: #0000ff;\">return</span> (x &gt; eps) - (x &lt; -<span style=\"color: #000000;\">eps);}\n</span><span style=\"color: #008080;\">11</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span> x){<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #0000ff;\">struct</span> Point {<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> x, y;} p[maxn];\n</span><span style=\"color: #008080;\">13</span> inline <span style=\"color: #0000ff;\">double</span> CalDis(<span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\">14</span> {<span style=\"color: #0000ff;\">return</span> sqrt(Sqr(a.x - b.x) + Sqr(a.y -<span style=\"color: #000000;\"> b.y));}\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #0000ff;\">struct</span> Cov { <span style=\"color: #0000ff;\">double</span> site; <span style=\"color: #0000ff;\">int</span> se;}cover[maxn &lt;&lt;<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #0000ff;\">int</span> AScomp(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *a, <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *b)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u89d2\u5ea6\u533a\u95f4\u6392\u5e8f</span>\n<span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">18</span>     <span style=\"color: #0000ff;\">if</span>(!dcmp((*(Cov*)a).site - (*(Cov*<span style=\"color: #000000;\">)b).site))\n</span><span style=\"color: #008080;\">19</span>         <span style=\"color: #0000ff;\">return</span> -((*(Cov*)a).se - (*(Cov*<span style=\"color: #000000;\">)b).se);\n</span><span style=\"color: #008080;\">20</span>     <span style=\"color: #0000ff;\">return</span> dcmp((*(Cov*)a).site - (*(Cov*<span style=\"color: #000000;\">)b).site);\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #0000ff;\">void</span> AngManage(<span style=\"color: #0000ff;\">double</span> &amp;x)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u89d2\u5ea6\u533a\u95f4\u4fee\u6b63\uff0c(-pi, pi]</span>\n<span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">24</span>     <span style=\"color: #0000ff;\">while</span>(x + pi &lt; eps) x += <span style=\"color: #800080;\">2</span> *<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\">25</span>     <span style=\"color: #0000ff;\">while</span>(x - pi &gt; eps) x -= <span style=\"color: #800080;\">2</span> *<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #0000ff;\">void</span> AddAnSeg(<span style=\"color: #0000ff;\">double</span> start, <span style=\"color: #0000ff;\">double</span> end)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5706\u5fc3\u89d2\u8f6c\u533a\u95f4</span>\n<span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">    AngManage(start), AngManage(end);\n</span><span style=\"color: #008080;\">30</span>     <span style=\"color: #0000ff;\">if</span>(start - end &gt; eps) AddAnSeg(start, pi), AddAnSeg(-pi + eps * <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">, end);\n</span><span style=\"color: #008080;\">31</span>     <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">33</span>         cover[ctp].site = start, cover[ctp].se = <span style=\"color: #800080;\">1</span>;++<span style=\"color: #000000;\"> ctp;\n</span><span style=\"color: #008080;\">34</span>         cover[ctp].site = end, cover[ctp].se = -<span style=\"color: #800080;\">1</span>;++<span style=\"color: #000000;\"> ctp;\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> MakeAns()\n</span><span style=\"color: #008080;\">38</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">39</span>     <span style=\"color: #0000ff;\">int</span> i, j, ans = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, cnt;\n</span><span style=\"color: #008080;\">40</span>     <span style=\"color: #0000ff;\">double</span> dis, ang, ac, RR = <span style=\"color: #800080;\">2</span> * (R + <span style=\"color: #800080;\">0.001</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">41</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span> ; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">43</span>         <span style=\"color: #0000ff;\">for</span>(j = ctp = <span style=\"color: #800080;\">0</span>; j &lt; n; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">44</span>             <span style=\"color: #0000ff;\">if</span>(j != i &amp;&amp; (dis = CalDis(p[i], p[j])) &lt;<span style=\"color: #000000;\"> RR)\n</span><span style=\"color: #008080;\">45</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">46</span>                 ang = atan2((<span style=\"color: #0000ff;\">double</span>)p[j].y - p[i].y, (<span style=\"color: #0000ff;\">double</span>)p[j].x -<span style=\"color: #000000;\"> p[i].x);\n</span><span style=\"color: #008080;\">47</span>                 ac = acos(dis * <span style=\"color: #800080;\">0.5</span> /<span style=\"color: #000000;\"> R);\n</span><span style=\"color: #008080;\">48</span>                 AddAnSeg(ang - ac, ang +<span style=\"color: #000000;\"> ac);\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">50</span>         qsort(cover, ctp, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(Cov), AScomp);\n</span><span style=\"color: #008080;\">51</span>         <span style=\"color: #0000ff;\">for</span>(j = cnt = <span style=\"color: #800080;\">0</span>; j &lt; ctp; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">52</span>             ans = std::max(ans, cnt +=<span style=\"color: #000000;\"> cover[j].se);\n</span><span style=\"color: #008080;\">53</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">54</span>     <span style=\"color: #0000ff;\">return</span> ans + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">55</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">56</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">57</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">58</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;R), n |<span style=\"color: #000000;\"> R)\n</span><span style=\"color: #008080;\">59</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">60</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">61</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;p[i].x, &amp;<span style=\"color: #000000;\">p[i].y);\n</span><span style=\"color: #008080;\">62</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">It is possible to cover %d points.\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, MakeAns());\n</span><span style=\"color: #008080;\">63</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">64</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">65</span> }</pre>\n</div>"
			}, {
				"title": "HDU2297 Run",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/10/2678154.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Sun, 09 Sep 2012 16:56:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/10/2678154.html",
				"description": "<p><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012091000504192.png\" alt=\"\" /></p>\n<p>\u4ee5\u4f4d\u7f6e\u4e3a\u6a2a\u5750\u6807\uff0c\u901f\u5ea6\u4e3a\u7eb5\u5750\u6807\uff0c\u5219\u9ad8\u5904\u7684\u70b9\u603b\u4f1a\u8dd1\u5230\u4f4e\u5904\u7684\u70b9\u524d\u9762\u3002</p>\n<p>\u5982\u56feB\u8ffd\u4e0aA\u7684\u65f6\u95f4\u5c31\u662f\u6a2a\u5750\u6807\u5dee\u9664\u4ee5\u7eb5\u5750\u6807\u5dee\uff0c\u4e5f\u5c31\u662f\u8bf4\u659c\u7387\u7684\u7edd\u5bf9\u503c\u8d8a\u5927\uff0c\u8ffd\u4e0a\u7684\u8d8a\u5feb\u3002</p>\n<p>\u90a3\u4e48C\u5c31\u4e0d\u4f1a\u6bd4B\u5148\u8ffd\u4e0aA\uff0cB\u6709\u673a\u4f1a\u4fdd\u6301\u4e00\u6bb5\u65f6\u95f4\u7684\u7b2c\u4e00\u3002\u540c\u7406C\u4f1a\u5728\u672a\u6765\u8ffd\u4e0aB\uff0c\u800c\u4fdd\u6301\u4e00\u6bb5\u65f6\u95f4\u7b2c\u4e00\u3002</p>\n<p>\u7531\u6b64\u770b\u6765\uff0c\u7edf\u8ba1\u51f8\u5305\u4e0ax\u6700\u5927\u70b9\u548cy\u6700\u5927\u70b9\u4e4b\u95f4\u70b9\u7684\u4e2a\u6570\u5373\u5f97\u7b54\u6848\u3002\u5bf9\u4e8e\u591a\u70b9\u5171\u7ebf\u7684\u60c5\u51b5\uff0c\u53ea\u8ba1\u4e00\u6b21\uff0c\u5728\u6c42\u51f8\u5305\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5904\u7406\u6389\u4e86\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\"> 5</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">typedef __int64 LL;\n</span><span style=\"color: #008080;\"> 8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">111111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span> typedef <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\">{LL x, y;}Point;\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">inline LL det(LL x1, LL y1, LL x2, LL y2)\n</span><span style=\"color: #008080;\">11</span> {<span style=\"color: #0000ff;\">return</span> x1 * y2 - x2 *<span style=\"color: #000000;\"> y1;}\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">LL cross(Point a, Point b, Point c)\n</span><span style=\"color: #008080;\">13</span> {<span style=\"color: #0000ff;\">return</span> det(b.x -a.x, b.y - a.y, c.x - a.x, c.y -<span style=\"color: #000000;\"> a.y);}\n</span><span style=\"color: #008080;\">14</span> <span style=\"color: #0000ff;\">int</span> CompG(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *a, <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">16</span>     <span style=\"color: #0000ff;\">if</span>((*(Point*)a).y - (*(Point*<span style=\"color: #000000;\">)b).y)\n</span><span style=\"color: #008080;\">17</span>         <span style=\"color: #0000ff;\">return</span> (*(Point*)a).x - (*(Point*<span style=\"color: #000000;\">)b).x;\n</span><span style=\"color: #008080;\">18</span>     <span style=\"color: #0000ff;\">return</span> (*(Point*)a).y - (*(Point*<span style=\"color: #000000;\">)b).y;\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">20</span> LL Graham(Point p[], Point res[], LL n, LL &amp;<span style=\"color: #000000;\">top)\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    LL len, i;\n</span><span style=\"color: #008080;\">23</span>     top = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">24</span>     qsort(p, n, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(Point), CompG);\n</span><span style=\"color: #008080;\">25</span>     res[<span style=\"color: #800080;\">0</span>] = p[<span style=\"color: #800080;\">0</span>], res[<span style=\"color: #800080;\">1</span>] = p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">26</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">2</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">28</span>         <span style=\"color: #0000ff;\">while</span>(top &amp;&amp; cross(res[top], res[top - <span style=\"color: #800080;\">1</span>], p[i]) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">29</span>             --<span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">30</span>         res[++ top] =<span style=\"color: #000000;\"> p[i];\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">32</span>     len =<span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">33</span>     res[++ top] = p[n - <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">34</span>     <span style=\"color: #0000ff;\">for</span>(i = n - <span style=\"color: #800080;\">3</span>; i &gt;= <span style=\"color: #800080;\">0</span>; --<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">35</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">36</span>         <span style=\"color: #0000ff;\">while</span>(top != len &amp;&amp; cross(res[top], res[top - <span style=\"color: #800080;\">1</span>], p[i]) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">37</span>             --<span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">38</span>         res[++ top] =<span style=\"color: #000000;\"> p[i];\n</span><span style=\"color: #008080;\">39</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">40</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> top;\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">42</span> <span style=\"color: #000000;\">Point p[maxn], res[maxn];\n</span><span style=\"color: #008080;\">43</span> <span style=\"color: #000000;\">LL n, m;\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">45</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">46</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> t, i, j, k, cnt;\n</span><span style=\"color: #008080;\">47</span> <span style=\"color: #000000;\">    LL maxx, maxy;\n</span><span style=\"color: #008080;\">48</span>     <span style=\"color: #0000ff;\">for</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;t); t --<span style=\"color: #000000;\"> ; )\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">50</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%I64d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">n);\n</span><span style=\"color: #008080;\">51</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">52</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%I64d%I64d</span><span style=\"color: #800000;\">\"</span>, &amp;p[i].x, &amp;<span style=\"color: #000000;\">p[i].y);\n</span><span style=\"color: #008080;\">53</span>         p[n] = p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">54</span> <span style=\"color: #000000;\">        Graham(p, res, n, m);\n</span><span style=\"color: #008080;\">55</span>         <span style=\"color: #0000ff;\">for</span>(i = maxx = maxy = <span style=\"color: #800080;\">0</span>; i &lt; m; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">56</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">57</span>             <span style=\"color: #0000ff;\">if</span>(res[i].x &gt; res[maxx].x) maxx =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">58</span>             <span style=\"color: #0000ff;\">if</span>(res[i].y &gt; res[maxy].y) maxy =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">59</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">60</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%I64d\\n</span><span style=\"color: #800000;\">\"</span>, (maxx - maxy + n) % n + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">61</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">62</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">63</span> }</pre>\n</div>"
			}, {
				"title": "HDU2892 area \u7b80\u5355\u591a\u8fb9\u5f62\u4e0e\u5706\u9762\u79ef\u4ea4",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/08/2677124.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Sat, 08 Sep 2012 15:35:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/08/2677124.html",
				"description": "<p>\u4ee5\u5706\u5fc3\u4e3a\u4e2d\u5fc3\u5c06\u7b80\u5355\u591a\u8fb9\u5f62\u5212\u5206\u4e3an\u4e2a\u77e2\u91cf\u4e09\u89d2\u5f62\uff0c\u5bf9\u6bcf\u4e2a\u4e09\u89d2\u5f62\u4e0e\u5706\u6c42\u4ea4\uff0c\u6839\u636e\u6709\u5411\u8fb9\u5224\u65ad\u76f8\u4ea4\u9762\u79ef\u6b63\u8d1f\uff0c\u6700\u540e\u76f8\u52a0\u53d6\u7edd\u5bf9\u503c\u3002</p>\n<p>\u4e00\u4e2a\u9876\u70b9\u5728\u5706\u5fc3\u7684\u4e09\u89d2\u5f62\u4e0e\u5706\u7684\u4ea4\u9700\u8981\u8ba8\u8bba\u7684\u60c5\u51b5\u6bd4\u8f83\u5c11\uff0c\u5bb9\u6613\u8ba1\u7b97\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\">  6</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">111111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxisn = <span style=\"color: #800080;\">21</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 12</span>     <span style=\"color: #0000ff;\">if</span>(x &gt; eps) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 13</span>     <span style=\"color: #0000ff;\">return</span> x &lt; -eps ? -<span style=\"color: #800080;\">1</span> : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 17</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;\n</span><span style=\"color: #008080;\"> 18</span>     Point(){x = y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 19</span>     Point(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 20</span>     {x = a, y =<span style=\"color: #000000;\"> b;}\n</span><span style=\"color: #008080;\"> 21</span>     inline Point <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 22</span>     {<span style=\"color: #0000ff;\">return</span> Point(x - b.x, y -<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 23</span>     inline Point <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 24</span>     {<span style=\"color: #0000ff;\">return</span> Point(x + b.x, y +<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 25</span>     inline Point <span style=\"color: #0000ff;\">operator</span>*(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 26</span>     {<span style=\"color: #0000ff;\">return</span> Point(x * b, y *<span style=\"color: #000000;\"> b);}\n</span><span style=\"color: #008080;\"> 27</span>     inline <span style=\"color: #0000ff;\">double</span> dot(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 28</span>     {<span style=\"color: #0000ff;\">return</span> x * b.x + y *<span style=\"color: #000000;\"> b.y;}\n</span><span style=\"color: #008080;\"> 29</span>     inline <span style=\"color: #0000ff;\">double</span> cross(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 30</span>     {<span style=\"color: #0000ff;\">return</span> (b.x - x) * (c.y - y) - (c.x - x) * (b.y -<span style=\"color: #000000;\"> y);}\n</span><span style=\"color: #008080;\"> 31</span>     inline <span style=\"color: #0000ff;\">double</span> Dis(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 32</span>     {<span style=\"color: #0000ff;\">return</span> sqrt((*<span style=\"color: #0000ff;\">this</span> - b).dot(*<span style=\"color: #0000ff;\">this</span> -<span style=\"color: #000000;\"> b));}\n</span><span style=\"color: #008080;\"> 33</span>     inline <span style=\"color: #0000ff;\">bool</span> InLine(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4e09\u70b9\u5171\u7ebf</span>\n<span style=\"color: #008080;\"> 34</span>     {<span style=\"color: #0000ff;\">return</span> !<span style=\"color: #000000;\">dcmp(cross(b, c));}\n</span><span style=\"color: #008080;\"> 35</span>     inline <span style=\"color: #0000ff;\">bool</span> OnSeg(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u5728\u7ebf\u6bb5\u4e0a\uff0c\u5305\u62ec\u7aef\u70b9</span>\n<span style=\"color: #008080;\"> 36</span>     {<span style=\"color: #0000ff;\">return</span> InLine(b, c) &amp;&amp; (*<span style=\"color: #0000ff;\">this</span> - c).dot(*<span style=\"color: #0000ff;\">this</span> - b) &lt;<span style=\"color: #000000;\"> eps;}\n</span><span style=\"color: #008080;\"> 37</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 38</span> inline <span style=\"color: #0000ff;\">double</span> min(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 39</span> {<span style=\"color: #0000ff;\">return</span> a &lt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 40</span> inline <span style=\"color: #0000ff;\">double</span> max(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 41</span> {<span style=\"color: #0000ff;\">return</span> a &gt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 42</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 43</span> {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\"> 44</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">p)\n</span><span style=\"color: #008080;\"> 45</span> {<span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> p.dot(p);}\n</span><span style=\"color: #008080;\"> 46</span> Point LineCross(<span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">d)\n</span><span style=\"color: #008080;\"> 47</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 48</span>     <span style=\"color: #0000ff;\">double</span> u = a.cross(b, c), v =<span style=\"color: #000000;\"> b.cross(a, d);\n</span><span style=\"color: #008080;\"> 49</span>     <span style=\"color: #0000ff;\">return</span> Point((c.x * v + d.x * u) / (u + v), (c.y * v + d.y * u) / (u +<span style=\"color: #000000;\"> v));\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 51</span> <span style=\"color: #0000ff;\">double</span> LineCrossCircle(<span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">r, \n</span><span style=\"color: #008080;\"> 52</span>             <span style=\"color: #0000ff;\">double</span> R, Point &amp;p1, Point &amp;<span style=\"color: #000000;\">p2)\n</span><span style=\"color: #008080;\"> 53</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 54</span>     Point fp = LineCross(r, Point(r.x + a.y - b.y, r.y + b.x -<span style=\"color: #000000;\"> a.x), a, b);\n</span><span style=\"color: #008080;\"> 55</span>     <span style=\"color: #0000ff;\">double</span> rtol =<span style=\"color: #000000;\"> r.Dis(fp);\n</span><span style=\"color: #008080;\"> 56</span>     <span style=\"color: #0000ff;\">double</span> rtos = fp.OnSeg(a, b) ?<span style=\"color: #000000;\"> rtol : min(r.Dis(a), r.Dis(b));\n</span><span style=\"color: #008080;\"> 57</span>     <span style=\"color: #0000ff;\">double</span> atob =<span style=\"color: #000000;\"> a.Dis(b);\n</span><span style=\"color: #008080;\"> 58</span>     <span style=\"color: #0000ff;\">double</span> fptoe = sqrt(R * R - rtol * rtol) /<span style=\"color: #000000;\"> atob;\n</span><span style=\"color: #008080;\"> 59</span>     <span style=\"color: #0000ff;\">if</span>(rtos &gt; R - eps) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> rtos;\n</span><span style=\"color: #008080;\"> 60</span>     p1 = fp + (a - b) *<span style=\"color: #000000;\"> fptoe;\n</span><span style=\"color: #008080;\"> 61</span>     p2 = fp + (b - a) *<span style=\"color: #000000;\"> fptoe;\n</span><span style=\"color: #008080;\"> 62</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> rtos;\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #0000ff;\">double</span> SectorArea(<span style=\"color: #0000ff;\">const</span> Point &amp;r, <span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> R)\n</span><span style=\"color: #008080;\"> 65</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4e0d\u5927\u4e8e180\u5ea6\u6247\u5f62\u9762\u79ef\uff0cr-&gt;a-&gt;b\u9006\u65f6\u9488</span>\n<span style=\"color: #008080;\"> 66</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 67</span>     <span style=\"color: #0000ff;\">double</span> A2 = Sqr(r - a), B2 = Sqr(r - b), C2 = Sqr(a -<span style=\"color: #000000;\"> b);\n</span><span style=\"color: #008080;\"> 68</span>     <span style=\"color: #0000ff;\">return</span> R * R * acos((A2 + B2 - C2) * <span style=\"color: #800080;\">0.5</span> / sqrt(A2) / sqrt(B2)) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 69</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #0000ff;\">double</span> TACIA(<span style=\"color: #0000ff;\">const</span> Point &amp;r, <span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> R)\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">TriangleAndCircleIntersectArea\uff0c\u9006\u65f6\u9488\uff0cr\u4e3a\u5706\u5fc3</span>\n<span style=\"color: #008080;\"> 72</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 73</span>     <span style=\"color: #0000ff;\">double</span> adis = r.Dis(a), bdis =<span style=\"color: #000000;\"> r.Dis(b);\n</span><span style=\"color: #008080;\"> 74</span>     <span style=\"color: #0000ff;\">if</span>(adis &lt; R + eps &amp;&amp; bdis &lt; R + eps) <span style=\"color: #0000ff;\">return</span> r.cross(a, b) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 75</span> <span style=\"color: #000000;\">    Point ta, tb;\n</span><span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">if</span>(r.InLine(a, b)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0.0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 77</span>     <span style=\"color: #0000ff;\">double</span> rtos =<span style=\"color: #000000;\"> LineCrossCircle(a, b, r, R, ta, tb);\n</span><span style=\"color: #008080;\"> 78</span>     <span style=\"color: #0000ff;\">if</span>(rtos &gt; R - eps) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> SectorArea(r, a, b, R);\n</span><span style=\"color: #008080;\"> 79</span>     <span style=\"color: #0000ff;\">if</span>(adis &lt; R + eps) <span style=\"color: #0000ff;\">return</span> r.cross(a, tb) * <span style=\"color: #800080;\">0.5</span> +<span style=\"color: #000000;\"> SectorArea(r, tb, b, R);\n</span><span style=\"color: #008080;\"> 80</span>     <span style=\"color: #0000ff;\">if</span>(bdis &lt; R + eps) <span style=\"color: #0000ff;\">return</span> r.cross(ta, b) * <span style=\"color: #800080;\">0.5</span> +<span style=\"color: #000000;\"> SectorArea(r, a, ta, R);\n</span><span style=\"color: #008080;\"> 81</span>     <span style=\"color: #0000ff;\">return</span> r.cross(ta, tb) * <span style=\"color: #800080;\">0.5</span> + \n<span style=\"color: #008080;\"> 82</span>         SectorArea(r, a, ta, R) +<span style=\"color: #000000;\"> SectorArea(r, tb, b, R);\n</span><span style=\"color: #008080;\"> 83</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 84</span> <span style=\"color: #0000ff;\">double</span> SPICA(<span style=\"color: #0000ff;\">int</span> n, Point r, <span style=\"color: #0000ff;\">double</span> R)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">SimplePolygonIntersectCircleArea</span>\n<span style=\"color: #008080;\"> 85</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 86</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\"> 87</span>     Point ori, p[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 88</span>     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;ori.x, &amp;<span style=\"color: #000000;\">ori.y);\n</span><span style=\"color: #008080;\"> 89</span>     p[<span style=\"color: #800080;\">0</span>] =<span style=\"color: #000000;\"> ori;\n</span><span style=\"color: #008080;\"> 90</span>     <span style=\"color: #0000ff;\">double</span> res = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, if_clock_t;\n</span><span style=\"color: #008080;\"> 91</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt;= n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 92</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 93</span>         <span style=\"color: #0000ff;\">if</span>(i == n) p[i &amp; <span style=\"color: #800080;\">1</span>] =<span style=\"color: #000000;\"> ori;\n</span><span style=\"color: #008080;\"> 94</span>         <span style=\"color: #0000ff;\">else</span> scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;p[i &amp; <span style=\"color: #800080;\">1</span>].x, &amp;p[i &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].y);\n</span><span style=\"color: #008080;\"> 95</span>         if_clock_t = dcmp(r.cross(p[~i &amp; <span style=\"color: #800080;\">1</span>], p[i &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\"> 96</span>         <span style=\"color: #0000ff;\">if</span>(if_clock_t &lt; <span style=\"color: #800080;\">0</span>) res -= TACIA(r, p[i &amp; <span style=\"color: #800080;\">1</span>], p[~i &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">], R);\n</span><span style=\"color: #008080;\"> 97</span>         <span style=\"color: #0000ff;\">else</span> res += TACIA(r, p[~i &amp; <span style=\"color: #800080;\">1</span>], p[i &amp; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">], R);\n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 99</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> fabs(res);\n</span><span style=\"color: #008080;\">100</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">101</span> <span style=\"color: #000000;\">Point boom;\n</span><span style=\"color: #008080;\">102</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\">103</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> R;\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">106</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> sx, sy, h, vx, vy;\n</span><span style=\"color: #008080;\">107</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;sx, &amp;sy, &amp;h) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">109</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;vx, &amp;vy, &amp;<span style=\"color: #000000;\">R);\n</span><span style=\"color: #008080;\">110</span>         h = sqrt(<span style=\"color: #800080;\">2</span> * h / <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">111</span>         boom = Point(h * vx + sx, h * vy +<span style=\"color: #000000;\"> sy);\n</span><span style=\"color: #008080;\">112</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">n);\n</span><span style=\"color: #008080;\">113</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.2f\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, SPICA(n, boom, R));\n</span><span style=\"color: #008080;\">114</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">115</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">116</span> }</pre>\n</div>"
			}, {
				"title": "HDU3060 Area2 \u7b80\u5355\u591a\u8fb9\u5f62\u9762\u79ef\u5e76",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/07/2675237.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Fri, 07 Sep 2012 08:24:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/07/2675237.html",
				"description": "<p>\u4e0d\u9700\u8981\u6b63\u89c4\u7684\u4e09\u89d2\u5256\u5206\uff0c\u7528\u6c42\u591a\u8fb9\u5f62\u9762\u79ef\u7684\u601d\u60f3\uff0c\u4ece\u4e00\u70b9\u51fa\u53d1\u8fde\u63a5\u591a\u8fb9\u5f62\u7684\u8fb9\u5f97\u5230\u5f88\u591a\u4e09<br />\u89d2\u5f62\uff0c\u4e09\u89d2\u5f62\u6709\u5411\u8fb9\u65b9\u5411\u51b3\u5b9a\u6709\u5411\u9762\u79ef\u6709\u6b63\u6709\u8d1f\uff0c\u76f8\u52a0\u5f97\u5230\u591a\u8fb9\u5f62\u9762\u79ef\u7684\u6b63\u503c\u6216\u8d1f\u503c\u3002<br />\u628a\u4e24\u4e2a\u591a\u8fb9\u5f62\u90fd\u5206\u6210\u82e5\u5e72\u8fd9\u6837\u7684\u4e09\u89d2\u5f62\uff0c\u6c42\u6bcf\u5bf9\u4e09\u89d2\u5f62\u7684\u4ea4\uff0c\u6839\u636e\u4e24\u4e09\u89d2\u5f62\u6709\u5411\u8fb9\u987a\u9006\u65f6<br />\u9488\u5173\u7cfb\u786e\u5b9a\u76f8\u4ea4\u9762\u79ef\u7684\u6b63\u8d1f\u53f7\uff0c\u6700\u540e\u4e24\u591a\u8fb9\u5f62\u9762\u79ef\u548c\u51cf\u53bb\u76f8\u4ea4\u9762\u79ef\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\">  6</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">555</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxisn = <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 12</span>     <span style=\"color: #0000ff;\">if</span>(x &gt; eps) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 13</span>     <span style=\"color: #0000ff;\">return</span> x &lt; -eps ? -<span style=\"color: #800080;\">1</span> : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 15</span> inline <span style=\"color: #0000ff;\">double</span> min(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 16</span> {<span style=\"color: #0000ff;\">return</span> a &lt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 17</span> inline <span style=\"color: #0000ff;\">double</span> max(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 18</span> {<span style=\"color: #0000ff;\">return</span> a &gt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 19</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 20</span> {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 23</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;\n</span><span style=\"color: #008080;\"> 24</span>     Point(){x = y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 25</span>     Point(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 26</span>     {x = a, y =<span style=\"color: #000000;\"> b;}\n</span><span style=\"color: #008080;\"> 27</span>     inline Point <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 28</span>     {<span style=\"color: #0000ff;\">return</span> Point(x - b.x, y -<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 29</span>     inline Point <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 30</span>     {<span style=\"color: #0000ff;\">return</span> Point(x + b.x, y +<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 31</span>     inline <span style=\"color: #0000ff;\">double</span> dot(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 32</span>     {<span style=\"color: #0000ff;\">return</span> x * b.x + y *<span style=\"color: #000000;\"> b.y;}\n</span><span style=\"color: #008080;\"> 33</span>     inline <span style=\"color: #0000ff;\">double</span> cross(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 34</span>     {<span style=\"color: #0000ff;\">return</span> (b.x - x) * (c.y - y) - (c.x - x) * (b.y -<span style=\"color: #000000;\"> y);}\n</span><span style=\"color: #008080;\"> 35</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 36</span> Point LineCross(<span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">d)\n</span><span style=\"color: #008080;\"> 37</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 38</span>     <span style=\"color: #0000ff;\">double</span> u = a.cross(b, c), v =<span style=\"color: #000000;\"> b.cross(a, d);\n</span><span style=\"color: #008080;\"> 39</span>     <span style=\"color: #0000ff;\">return</span> Point((c.x * v + d.x * u) / (u + v), (c.y * v + d.y * u) / (u +<span style=\"color: #000000;\"> v));\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #0000ff;\">double</span> PolygonArea(Point p[], <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 43</span>     <span style=\"color: #0000ff;\">if</span>(n &lt; <span style=\"color: #800080;\">3</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0.0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 44</span>     <span style=\"color: #0000ff;\">double</span> s = p[<span style=\"color: #800080;\">0</span>].y * (p[n - <span style=\"color: #800080;\">1</span>].x - p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].x);\n</span><span style=\"color: #008080;\"> 45</span>     p[n] = p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 46</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 47</span>         s += p[i].y * (p[i - <span style=\"color: #800080;\">1</span>].x - p[i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].x);\n</span><span style=\"color: #008080;\"> 48</span>     <span style=\"color: #0000ff;\">return</span> fabs(s * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 49</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #0000ff;\">double</span> CPIA(Point a[], Point b[], <span style=\"color: #0000ff;\">int</span> na, <span style=\"color: #0000ff;\">int</span> nb)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">ConvexPolygonIntersectArea</span>\n<span style=\"color: #008080;\"> 51</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 52</span> <span style=\"color: #000000;\">    Point p[maxisn], tmp[maxisn];\n</span><span style=\"color: #008080;\"> 53</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, tn, sflag, eflag;\n</span><span style=\"color: #008080;\"> 54</span>     a[na] = a[<span style=\"color: #800080;\">0</span>], b[nb] = b[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 55</span>     memcpy(p, b, <span style=\"color: #0000ff;\">sizeof</span>(Point) * (nb + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 56</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; na &amp;&amp; nb &gt; <span style=\"color: #800080;\">2</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 57</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 58</span>         sflag = dcmp(a[i].cross(a[i + <span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\"> 59</span>         <span style=\"color: #0000ff;\">for</span>(j = tn = <span style=\"color: #800080;\">0</span>; j &lt; nb; ++ j, sflag =<span style=\"color: #000000;\"> eflag)\n</span><span style=\"color: #008080;\"> 60</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 61</span>             <span style=\"color: #0000ff;\">if</span>(sflag &gt;= <span style=\"color: #800080;\">0</span>) tmp[tn ++] =<span style=\"color: #000000;\"> p[j];\n</span><span style=\"color: #008080;\"> 62</span>             eflag = dcmp(a[i].cross(a[i + <span style=\"color: #800080;\">1</span>], p[j + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\"> 63</span>             <span style=\"color: #0000ff;\">if</span>((sflag ^ eflag) == -<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 64</span>                 tmp[tn ++] = LineCross(a[i], a[i + <span style=\"color: #800080;\">1</span>], p[j], p[j + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\"> 65</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 66</span>         memcpy(p, tmp, <span style=\"color: #0000ff;\">sizeof</span>(Point) *<span style=\"color: #000000;\"> tn);\n</span><span style=\"color: #008080;\"> 67</span>         nb = tn, p[nb] = p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 69</span>     <span style=\"color: #0000ff;\">if</span>(nb &lt; <span style=\"color: #800080;\">3</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0.0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 70</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> PolygonArea(p, nb);\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #0000ff;\">double</span> SPIA(Point a[], Point b[], <span style=\"color: #0000ff;\">int</span> na, <span style=\"color: #0000ff;\">int</span> nb)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">SimplePolygonIntersectArea</span>\n<span style=\"color: #008080;\"> 73</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 74</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\"> 75</span>     Point t1[<span style=\"color: #800080;\">4</span>], t2[<span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">double</span> res = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, if_clock_t1, if_clock_t2;\n</span><span style=\"color: #008080;\"> 77</span>     a[na] = t1[<span style=\"color: #800080;\">0</span>] = a[<span style=\"color: #800080;\">0</span>], b[nb] = t2[<span style=\"color: #800080;\">0</span>] = b[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 78</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">2</span>; i &lt; na; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 80</span>         t1[<span style=\"color: #800080;\">1</span>] = a[i - <span style=\"color: #800080;\">1</span>], t1[<span style=\"color: #800080;\">2</span>] =<span style=\"color: #000000;\"> a[i];\n</span><span style=\"color: #008080;\"> 81</span>         if_clock_t1 = dcmp(t1[<span style=\"color: #800080;\">0</span>].cross(t1[<span style=\"color: #800080;\">1</span>], t1[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\"> 82</span>         <span style=\"color: #0000ff;\">if</span>(if_clock_t1 &lt; <span style=\"color: #800080;\">0</span>) std::swap(t1[<span style=\"color: #800080;\">1</span>], t1[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\"> 83</span>         <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">2</span>; j &lt; nb; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 84</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 85</span>             t2[<span style=\"color: #800080;\">1</span>] = b[j - <span style=\"color: #800080;\">1</span>], t2[<span style=\"color: #800080;\">2</span>] =<span style=\"color: #000000;\"> b[j];\n</span><span style=\"color: #008080;\"> 86</span>             if_clock_t2 = dcmp(t2[<span style=\"color: #800080;\">0</span>].cross(t2[<span style=\"color: #800080;\">1</span>], t2[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\"> 87</span>             <span style=\"color: #0000ff;\">if</span>(if_clock_t2 &lt; <span style=\"color: #800080;\">0</span>) std::swap(t2[<span style=\"color: #800080;\">1</span>], t2[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\"> 88</span>             res += CPIA(t1, t2, <span style=\"color: #800080;\">3</span>, <span style=\"color: #800080;\">3</span>) * if_clock_t1 *<span style=\"color: #000000;\"> if_clock_t2;\n</span><span style=\"color: #008080;\"> 89</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 90</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 91</span>     <span style=\"color: #0000ff;\">return</span> PolygonArea(a, na) + PolygonArea(b, nb) -<span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 92</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 93</span> <span style=\"color: #000000;\">Point p1[maxn], p2[maxn];\n</span><span style=\"color: #008080;\"> 94</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n1, n2;\n</span><span style=\"color: #008080;\"> 95</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\"> 96</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 97</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\"> 98</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n1, &amp;n2) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\"> 99</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">100</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n1; ++ i) scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;p1[i].x, &amp;<span style=\"color: #000000;\">p1[i].y);\n</span><span style=\"color: #008080;\">101</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n2; ++ i) scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;p2[i].x, &amp;<span style=\"color: #000000;\">p2[i].y);\n</span><span style=\"color: #008080;\">102</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.2f\\n</span><span style=\"color: #800000;\">\"</span>, SPIA(p1, p2, n1, n2) +<span style=\"color: #000000;\"> eps);\n</span><span style=\"color: #008080;\">103</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">104</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">105</span> }</pre>\n</div>"
			}, {
				"title": "HDU3644 2010 Asia Regional Hangzhou Site Online Contest D A Chocolate Manufacturer's Problem",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/06/2673873.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Thu, 06 Sep 2012 09:28:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/06/2673873.html",
				"description": "<p>1\u3001\u5224\u65ad\u591a\u8fb9\u5f62\u6709\u5411\u8fb9\u987a\u3001\u9006\u65f6\u9488\uff1a</p>\n<p>\u53d6\u6700\u53f3\u70b9p[i]\uff0cp[i-1]-&gt;p[i]\u4e0ep[i]-&gt;p[i+1]\u6210\u53f3\u624b\u5173\u7cfb\u5219\u4e3a\u9006\u65f6\u9488\u3002</p>\n<p>2\u3001\u5224\u65ad\u70b9\u4e0e\u7b80\u5355\u591a\u8fb9\u5f62\u4f4d\u7f6e\u5173\u7cfb\uff1a</p>\n<p>\u53c2\u8003\u6587\u732e\uff1a<span>\u738b\u5b66\u519b,\u6c88\u8fde\u5a60,\u6731\u7ecd\u6e90\u7b49.\u57fa\u4e8e\u5de6\u8fb9\u7684\u70b9\u5728\u7b80\u5355\u591a\u8fb9\u5f62\u5185\u7684\u5224\u522b\u7b97\u6cd5[J].\u673a\u68b0\u5de5\u7a0b\u5e08,2006,(2):53-54.</span></p>\n<div>\u7ed9\u5b9a\u4e00\u4e2a\u7b80\u5355\u591a\u8fb9\u5f62\uff0c\u5224\u522b\u70b9u\u5728\u591a\u8fb9\u5f62G\u5185\u5916\u7684\u5224\u65ad\u7b97\u6cd5\u6b65\u9aa4\uff1a<br />Step1\uff1a\u8fc7u\u4f5c\u4e00\u6c34\u5e73\u5c04\u7ebf\uff1b</div>\n<div>Step2\uff1a\u6c42\u51fa\u5c04\u7ebf\u4e0e\u7b80\u5355\u591a\u8fb9\u5f62G\u7684\u4ea4\u70b9\uff1b</div>\n<div>Step3\uff1a\u82e5\u4ea4\u70b9\u4e3a0\uff0c\u5219u\u5728G\u5916\uff0c\u7ed3\u675f\uff1b</div>\n<div>Step4\uff1a\u82e5\u4ea4\u70b9\u6570\u5927\u4e8e0\uff0c\u6c42\u51fa\u4e0eu\u70b9\u8ddd\u79bb\u6700\u8fd1\u4ea4\u70b9v\uff1b</div>\n<div>Step5\uff1a\u627e\u5230\u4ea4\u70b9v\u6240\u5728\u8fb9\u7684\u4e24\u9876\u70b9\uff0c\u8bb0p1\u4e3ap[i]\uff0cp2\u4e3ap[i+1]\uff1b</div>\n<div>Step6\uff1a\u5224\u65ad\u4ea4\u70b9v\u662f\u5426\u662f\u9876\u70b9\uff0c\u82e5v\u4e0ep[i]\u91cd\u5408\uff0c\u5219p1\u4e3ap[i-1]\uff0c\u82e5v\u4e0ep[i+1]\u91cd\u5408\uff0c\u5219p2\u4e3ap[i+2]\uff1b</div>\n<div>Step7\uff1a\u5224\u65ad vu \u5230 vp1 \u6cbf\u9006\u65f6\u9488\u65b9\u5411\u7684\u89d2\u5ea6\u662f\u5426\u5c0f\u4e8e vp2\u5230vp1\u6cbf\u9006\u65f6\u9488\u65b9\u5411\u7684\u89d2\u5ea6\uff0c\u82e5\u662f\uff0c\u5219u\u5728G\u5185\uff0c\u5426\u5219\u5728\u5916\uff0c\u7ed3\u675f\u3002</div>\n<div>&nbsp;</div>\n<div>3\u3001\u6a21\u62df\u9000\u706b\uff0c\u5728\u8fb9\u4e0a\u9009\u91c7\u6837\u70b9\u53ef\u907f\u514d\u76f4\u63a5\u91c7\u6837\u5230\u591a\u8fb9\u5f62\u5916\uff0c\u5176\u4ed6\u65b9\u9762\u5728\u65b9\u6cd5\u4e0a\u6ca1\u6709\u7279\u522b\u4e4b\u5904\u3002\u53c2\u6570\u8c03\u6574\u6bd4\u8f83\u7ea0\u7ed3\uff0c\u6539\u5929\u7f16\u8bd1\u5668\u53d8\u4e86\u6216\u8005HDU\u6570\u636e\u53d8\u4e86\u8fd9\u4ee3\u7801\u5c31\u4e0d\u4e00\u5b9a\u80fdAC\u4e86\u3002</div>\n<div>&nbsp;</div>\n<div>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;time.h&gt;\n<span style=\"color: #008080;\">  6</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">55</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 11</span>     <span style=\"color: #0000ff;\">if</span>(x &gt; eps) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 12</span>     <span style=\"color: #0000ff;\">return</span> x &lt; -eps ? -<span style=\"color: #800080;\">1</span> : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 14</span> inline <span style=\"color: #0000ff;\">double</span> min(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 15</span> {<span style=\"color: #0000ff;\">return</span> a &lt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 16</span> inline <span style=\"color: #0000ff;\">double</span> max(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 17</span> {<span style=\"color: #0000ff;\">return</span> a &gt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 18</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 19</span> {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 21</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u53ca\u5173\u4e8e\u70b9\u3001\u7ebf\u7684\u64cd\u4f5c </span>\n<span style=\"color: #008080;\"> 22</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 23</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 24</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;\n</span><span style=\"color: #008080;\"> 25</span>     Point(){x = y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 26</span>     Point(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 27</span>     {x = a, y =<span style=\"color: #000000;\"> b;}\n</span><span style=\"color: #008080;\"> 28</span>     inline Point <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 29</span>     {<span style=\"color: #0000ff;\">return</span> Point(x - b.x, y -<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 30</span>     inline Point <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 31</span>     {<span style=\"color: #0000ff;\">return</span> Point(x + b.x, y +<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 32</span>     inline Point <span style=\"color: #0000ff;\">operator</span>-<span style=\"color: #000000;\">()\n</span><span style=\"color: #008080;\"> 33</span>     {<span style=\"color: #0000ff;\">return</span> Point(-x, -<span style=\"color: #000000;\">y);}\n</span><span style=\"color: #008080;\"> 34</span>     inline Point <span style=\"color: #0000ff;\">operator</span>*(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 35</span>     {<span style=\"color: #0000ff;\">return</span> Point(x * b, y *<span style=\"color: #000000;\"> b);}\n</span><span style=\"color: #008080;\"> 36</span>     inline <span style=\"color: #0000ff;\">double</span> dot(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 37</span>     {<span style=\"color: #0000ff;\">return</span> x * b.x + y *<span style=\"color: #000000;\"> b.y;}\n</span><span style=\"color: #008080;\"> 38</span>     inline <span style=\"color: #0000ff;\">double</span> cross(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 39</span>     {<span style=\"color: #0000ff;\">return</span> (b.x - x) * (c.y - y) - (c.x - x) * (b.y -<span style=\"color: #000000;\"> y);}\n</span><span style=\"color: #008080;\"> 40</span>     inline <span style=\"color: #0000ff;\">double</span> Dis(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 41</span>     {<span style=\"color: #0000ff;\">return</span> sqrt((*<span style=\"color: #0000ff;\">this</span> - b).dot(*<span style=\"color: #0000ff;\">this</span> -<span style=\"color: #000000;\"> b));}\n</span><span style=\"color: #008080;\"> 42</span>     inline <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 43</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 44</span>         <span style=\"color: #0000ff;\">if</span>(!dcmp(x - b.x)) <span style=\"color: #0000ff;\">return</span> y &lt;<span style=\"color: #000000;\"> b.y;\n</span><span style=\"color: #008080;\"> 45</span>         <span style=\"color: #0000ff;\">return</span> x &lt;<span style=\"color: #000000;\"> b.x;\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 47</span>     inline <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&gt;(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 48</span>     {<span style=\"color: #0000ff;\">return</span> b &lt; *<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 49</span>     inline <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>==(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 50</span>     {<span style=\"color: #0000ff;\">return</span> !dcmp(x - b.x) &amp;&amp; !dcmp(y -<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 51</span>     inline <span style=\"color: #0000ff;\">bool</span> InLine(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 52</span>     {<span style=\"color: #0000ff;\">return</span> !<span style=\"color: #000000;\">dcmp(cross(b, c));}\n</span><span style=\"color: #008080;\"> 53</span>     inline <span style=\"color: #0000ff;\">bool</span> OnSeg(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5305\u62ec\u7aef\u70b9</span>\n<span style=\"color: #008080;\"> 54</span>     {<span style=\"color: #0000ff;\">return</span> InLine(b, c) &amp;&amp; (*<span style=\"color: #0000ff;\">this</span> - c).dot(*<span style=\"color: #0000ff;\">this</span> - b) &lt;<span style=\"color: #000000;\"> eps;}\n</span><span style=\"color: #008080;\"> 55</span>     inline <span style=\"color: #0000ff;\">bool</span> InSeg(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4e0d\u5305\u62ec\u7aef\u70b9</span>\n<span style=\"color: #008080;\"> 56</span>     {<span style=\"color: #0000ff;\">return</span> InLine(b, c) &amp;&amp; (*<span style=\"color: #0000ff;\">this</span> - c).dot(*<span style=\"color: #0000ff;\">this</span> - b) &lt; -<span style=\"color: #000000;\">eps;}\n</span><span style=\"color: #008080;\"> 57</span>     <span style=\"color: #0000ff;\">double</span> ToSeg(<span style=\"color: #0000ff;\">const</span> Point&amp;, <span style=\"color: #0000ff;\">const</span> Point&amp;)<span style=\"color: #0000ff;\">const</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 59</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 60</span> <span style=\"color: #0000ff;\">bool</span> Parallel(<span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">d)\n</span><span style=\"color: #008080;\"> 61</span> {<span style=\"color: #0000ff;\">return</span> !dcmp(a.cross(b, a + d -<span style=\"color: #000000;\"> c));}\n</span><span style=\"color: #008080;\"> 62</span> Point LineCross(<span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">d)\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 64</span>     <span style=\"color: #0000ff;\">double</span> u = a.cross(b, c), v =<span style=\"color: #000000;\"> b.cross(a, d);\n</span><span style=\"color: #008080;\"> 65</span>     <span style=\"color: #0000ff;\">return</span> Point((c.x * v + d.x * u) / (u + v), (c.y * v + d.y * u) / (u +<span style=\"color: #000000;\"> v));\n</span><span style=\"color: #008080;\"> 66</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 67</span> <span style=\"color: #0000ff;\">double</span> Point::ToSeg(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 68</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 69</span>     Point t(x + b.y - c.y, y + c.x -<span style=\"color: #000000;\"> b.x);\n</span><span style=\"color: #008080;\"> 70</span>     <span style=\"color: #0000ff;\">if</span>(cross(t, b) * cross(t, c) &gt;<span style=\"color: #000000;\"> eps)\n</span><span style=\"color: #008080;\"> 71</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> min(Dis(b), Dis(c));\n</span><span style=\"color: #008080;\"> 72</span>     <span style=\"color: #0000ff;\">return</span> Dis(LineCross(*<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">, t, b, c));\n</span><span style=\"color: #008080;\"> 73</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #0000ff;\">bool</span> SegCross(<span style=\"color: #0000ff;\">const</span> Point &amp;a, <span style=\"color: #0000ff;\">const</span> Point &amp;<span style=\"color: #000000;\">b, \n</span><span style=\"color: #008080;\"> 75</span>         <span style=\"color: #0000ff;\">const</span> Point &amp;c, <span style=\"color: #0000ff;\">const</span> Point &amp;d, Point &amp;p)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5305\u62ec\u7aef\u70b9</span>\n<span style=\"color: #008080;\"> 76</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 77</span>     <span style=\"color: #0000ff;\">if</span>(Parallel(a, b, c, d)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 78</span>     <span style=\"color: #0000ff;\">if</span>(a.cross(b, c) * a.cross(b, d) &lt;= <span style=\"color: #800080;\">0</span> &amp;&amp; c.cross(d, a) * c.cross(d, b) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 80</span>         p =<span style=\"color: #000000;\"> LineCross(a, b, c, d);\n</span><span style=\"color: #008080;\"> 81</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 82</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 83</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 84</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 85</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 86</span> <span style=\"color: #000000;\">Point p[maxn];\n</span><span style=\"color: #008080;\"> 87</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\"> 88</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> r;\n</span><span style=\"color: #008080;\"> 89</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 90</span> <span style=\"color: #0000ff;\">double</span> AngCounterClock(<span style=\"color: #0000ff;\">double</span> start, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> end)\n</span><span style=\"color: #008080;\"> 91</span> {<span style=\"color: #0000ff;\">return</span> end - start + (end &gt; start - eps ? <span style=\"color: #800080;\">2</span> * pi : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);}\n</span><span style=\"color: #008080;\"> 92</span> <span style=\"color: #0000ff;\">bool</span> InSimplePolygon(Point u, Point p[], <span style=\"color: #0000ff;\">int</span> n<span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">double neg_inf</span><span style=\"color: #008000;\">*/</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 93</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5224\u65ad\u70b9\u5728\u7b80\u5355\u591a\u8fb9\u5f62\u5185\uff0c\u4e0d\u5305\u62ec\u8fb9\u754c\uff0c\u591a\u8fb9\u5f62\u70b9\u4e3a\u9006\u65f6\u9488</span>\n<span style=\"color: #008080;\"> 94</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 95</span>     <span style=\"color: #0000ff;\">double</span> neg_inf = -<span style=\"color: #000000;\">1e20, angvu, angvp1, angvp2;\n</span><span style=\"color: #008080;\"> 96</span>     Point v(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, u.y), p1, p2, tmp;\n</span><span style=\"color: #008080;\"> 97</span>     <span style=\"color: #0000ff;\">int</span> i, id;<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8ddd\u79bbu\u6700\u8fd1\u4ea4\u70b9\u5bf9\u5e94\u7ebf\u6bb5\u8d77\u59cb\u70b9id</span>\n<span style=\"color: #008080;\"> 98</span>     <span style=\"color: #0000ff;\">bool</span> flag = <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 99</span>     p[n] = p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">100</span>     <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8bbeu-&gt;v\u4e3a\u6c34\u5e73\u8d1f\u5411\u5c04\u7ebf</span>\n<span style=\"color: #008080;\">101</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">    for(i = 0, neg_inf = 0; i &lt; n; ++ i) neg_inf = min(neg_inf, p[i].x);\n</span><span style=\"color: #008080;\">102</span> <span style=\"color: #008000;\">    neg_inf -= 100.0;    </span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">103</span>     v.x =<span style=\"color: #000000;\"> neg_inf;\n</span><span style=\"color: #008080;\">104</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">106</span>         <span style=\"color: #0000ff;\">if</span>(u.OnSeg(p[i], p[i + <span style=\"color: #800080;\">1</span>])) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">107</span>         <span style=\"color: #0000ff;\">if</span>(!SegCross(u, v, p[i], p[i + <span style=\"color: #800080;\">1</span>], tmp)) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">108</span>         flag = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">109</span>         <span style=\"color: #0000ff;\">if</span>(tmp.x - v.x &gt; eps) v.x = tmp.x, id =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">110</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">111</span>     <span style=\"color: #0000ff;\">if</span>(!flag) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">112</span>     p1 = v == p[id] ? p[(id + n - <span style=\"color: #800080;\">1</span>) %<span style=\"color: #000000;\"> n] : p[id];\n</span><span style=\"color: #008080;\">113</span>     p2 = v == p[id + <span style=\"color: #800080;\">1</span>] ? p[(id + <span style=\"color: #800080;\">2</span>) % n] : p[id + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">114</span>     angvu = atan2(u.y - v.y, u.x -<span style=\"color: #000000;\"> v.x);\n</span><span style=\"color: #008080;\">115</span>     angvp1 = atan2(p1.y - v.y, p1.x -<span style=\"color: #000000;\"> v.x);\n</span><span style=\"color: #008080;\">116</span>     angvp2 = atan2(p2.y - v.y, p2.x -<span style=\"color: #000000;\"> v.x);\n</span><span style=\"color: #008080;\">117</span>     <span style=\"color: #0000ff;\">return</span> AngCounterClock(angvu, angvp1) &lt; \n<span style=\"color: #008080;\">118</span>         AngCounterClock(angvp2, angvp1) -<span style=\"color: #000000;\"> eps;\n</span><span style=\"color: #008080;\">119</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">120</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">121</span> <span style=\"color: #0000ff;\">double</span> PtoPolygon(Point u, Point p[], <span style=\"color: #0000ff;\">int</span> n)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u5230\u591a\u8fb9\u5f62\u8fb9\u3001\u70b9\u7684\u6700\u8fd1\u8ddd\u79bb </span>\n<span style=\"color: #008080;\">122</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">123</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">124</span>     <span style=\"color: #0000ff;\">double</span> res =<span style=\"color: #000000;\"> 1e120;\n</span><span style=\"color: #008080;\">125</span>     p[n] = p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">126</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">127</span>         res = min(res, u.ToSeg(p[i], p[i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\">128</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\">129</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">130</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">131</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u6a21\u62df\u9000\u706b</span>\n<span style=\"color: #008080;\">132</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxsam = <span style=\"color: #800080;\">20</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">133</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> pacelen = <span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">134</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> depace = <span style=\"color: #800080;\">0.57</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">135</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> endeps = 1e-<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">Point sam[maxsam];\n</span><span style=\"color: #008080;\">137</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> mindis[maxsam];\n</span><span style=\"color: #008080;\">138</span> <span style=\"color: #0000ff;\">bool</span> SA(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> r)\n</span><span style=\"color: #008080;\">139</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">140</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, samnum;\n</span><span style=\"color: #008080;\">141</span> <span style=\"color: #000000;\">    Point tmp;\n</span><span style=\"color: #008080;\">142</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> tmpdis;\n</span><span style=\"color: #008080;\">143</span>     <span style=\"color: #0000ff;\">double</span> maxx = -1e30, maxy = -1e30, minx = 1e30, miny =<span style=\"color: #000000;\"> 1e30;\n</span><span style=\"color: #008080;\">144</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">145</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">146</span>         maxx =<span style=\"color: #000000;\"> max(p[i].x, maxx);\n</span><span style=\"color: #008080;\">147</span>         maxy =<span style=\"color: #000000;\"> max(p[i].y, maxy);\n</span><span style=\"color: #008080;\">148</span>         minx =<span style=\"color: #000000;\"> min(p[i].x, minx);\n</span><span style=\"color: #008080;\">149</span>         miny =<span style=\"color: #000000;\"> min(p[i].y, miny);\n</span><span style=\"color: #008080;\">150</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">151</span>     samnum = maxsam &lt; n ?<span style=\"color: #000000;\"> maxsam : n;\n</span><span style=\"color: #008080;\">152</span>     <span style=\"color: #0000ff;\">double</span> pace = sqrt(Sqr(maxx - minx) + Sqr(maxy -<span style=\"color: #000000;\"> miny));\n</span><span style=\"color: #008080;\">153</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; samnum; ++ i)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u968f\u673a\u9009\u8fb9\uff0c\u968f\u673a\u6bd4\u4f8b\u9009\u62e9\u8fb9\u4e0a\u7684\u70b9\u4f5c\u4e3a\u91c7\u6837\u70b9 </span>\n<span style=\"color: #008080;\">154</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">155</span>         j = rand() %<span style=\"color: #000000;\"> n;\n</span><span style=\"color: #008080;\">156</span>         sam[i] = p[j] + (p[j + <span style=\"color: #800080;\">1</span>] - p[j]) * (rand() / <span style=\"color: #800080;\">32767.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">157</span>         mindis[i] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">158</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">159</span>     <span style=\"color: #0000ff;\">for</span>(; pace &gt; endeps; pace *=<span style=\"color: #000000;\"> depace)\n</span><span style=\"color: #008080;\">160</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; samnum; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">161</span>             <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt; pacelen; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">162</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">163</span>                 tmp.x = sam[i].x + cos((<span style=\"color: #0000ff;\">double</span>)rand()) *<span style=\"color: #000000;\"> pace;\n</span><span style=\"color: #008080;\">164</span>                 tmp.y = sam[i].y + cos((<span style=\"color: #0000ff;\">double</span>)rand()) *<span style=\"color: #000000;\"> pace;\n</span><span style=\"color: #008080;\">165</span>                 <span style=\"color: #0000ff;\">if</span>(!InSimplePolygon(tmp, p, n)) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">166</span>                 tmpdis =<span style=\"color: #000000;\"> PtoPolygon(tmp, p, n);\n</span><span style=\"color: #008080;\">167</span>                 <span style=\"color: #0000ff;\">if</span>(tmpdis &gt; r - endeps) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">168</span>                 <span style=\"color: #0000ff;\">if</span>(tmpdis &gt;<span style=\"color: #000000;\"> mindis[i])\n</span><span style=\"color: #008080;\">169</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">170</span>                     sam[i] =<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">171</span>                     mindis[i] =<span style=\"color: #000000;\"> tmpdis;\n</span><span style=\"color: #008080;\">172</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">173</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">174</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">175</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">176</span> <span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">************************************************</span><span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\">177</span> <span style=\"color: #0000ff;\">void</span> MakeCounterClock(Point p[], <span style=\"color: #0000ff;\">int</span> n)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u987a\u65f6\u9488\u5219\u53cd\u8f6c\u591a\u8fb9\u5f62\u7684\u6709\u5411\u8fb9 </span>\n<span style=\"color: #008080;\">178</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">179</span>     <span style=\"color: #0000ff;\">int</span> i, id = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">180</span>     p[n] = p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">181</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++ i) <span style=\"color: #0000ff;\">if</span>(p[i].x &gt; p[id].x) id =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">182</span>     <span style=\"color: #0000ff;\">if</span>(p[id].cross(p[id + <span style=\"color: #800080;\">1</span>], p[(id + n - <span style=\"color: #800080;\">1</span>) % n]) &gt; eps) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">183</span> <span style=\"color: #000000;\">    Point tmp;\n</span><span style=\"color: #008080;\">184</span>     <span style=\"color: #0000ff;\">for</span>(i = n - <span style=\"color: #800080;\">1</span> &gt;&gt; <span style=\"color: #800080;\">1</span>; i &gt;= <span style=\"color: #800080;\">0</span>; --<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">185</span>         tmp = p[i], p[i] = p[n - i - <span style=\"color: #800080;\">1</span>], p[n - i - <span style=\"color: #800080;\">1</span>] =<span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">186</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">187</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">188</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">189</span>     srand(<span style=\"color: #800080;\">419</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">190</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;n) &amp;&amp;<span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">191</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">192</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">193</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;p[i].x, &amp;<span style=\"color: #000000;\">p[i].y);\n</span><span style=\"color: #008080;\">194</span> <span style=\"color: #000000;\">        MakeCounterClock(p, n);\n</span><span style=\"color: #008080;\">195</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">r);\n</span><span style=\"color: #008080;\">196</span>         printf(SA(r) ? <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Yes\\n</span><span style=\"color: #800000;\">\"</span> : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">No\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">197</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">198</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">199</span> }</pre>\n</div>\n<p>&nbsp;</p>\n</div>"
			}, {
				"title": "UVA12304_2D Geometry 110 in 1!",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/03/2668532.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 03 Sep 2012 03:36:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/03/2668532.html",
				"description": "<p>\u5404\u79cd\u70b9\u7ebf\u4e0e\u5706\u7684\u5173\u7cfb\u3002</p>\n<p>1\u3001\u4e09\u89d2\u5f62\u5916\u63a5\u5706\uff1a\u6c42\u5404\u8fb9\u4e2d\u5782\u7ebf\u4ea4\u70b9\uff1b</p>\n<p>2\u3001\u4e09\u89d2\u5f62\u5185\u5207\u5706\uff1a\u5b9a\u6bd4\u5206\u70b9\u6784\u9020\u7b49\u8170\u4e09\u89d2\u5f62\u6c42\u89d2\u5e73\u5206\u7ebf\uff0c\u6c42\u4e24\u89d2\u5e73\u5206\u7ebf\u4ea4\u70b9\uff1b</p>\n<p>3\u3001\u5b9a\u70b9\u5230\u5706\u5207\u7ebf\uff1a\u70b9\u5230\u5706\u5fc3\u659c\u7387\u52a0\u51cf\u5207\u7ebf\u5939\u89d2\uff0c\u5904\u7406\u7ed3\u679c\u7684\u8868\u793a\u8303\u56f4\uff1b</p>\n<p>4\u3001\u5207\u76f4\u7ebf\u3001\u8fc7\u5b9a\u70b9\u7684\u5706\uff1a\u70b9\u5728\u7ebf\u4e0a\u662f\u4e24\u4e2a\u5bf9\u79f0\u7684\u5706\uff0c\u5426\u5219\u5706\u5728\u70b9\u7ebf\u786e\u5b9a\u7684\u53cc\u66f2\u7ebf\u4e0a\uff0c\u5229\u7528\u53cc\u66f2\u7ebf\u6027\u8d28\u6784\u9020\u76f4\u89d2\u68af\u5f62\uff0c\u7136\u540e\u5229\u7528\u5411\u91cf\u4e0e\u5b9a\u6bd4\u5206\u70b9\u6c42\uff1b</p>\n<p>5\u3001\u4e0e\u4e24\u76f8\u4ea4\u76f4\u7ebf\u76f8\u5207\u7684\u5706\uff1a\u5206\u522b\u5c06\u76f4\u7ebf\u671d\u4e0d\u540c\u65b9\u5411\u5e73\u79fb\u534a\u5f84\u8ddd\u79bb\u6c42\u4ea4\u70b9\uff1b</p>\n<p>6\u3001\u4e24\u76f8\u79bb\u5706\u7684\u516c\u5171\u5916\u5207\u5706\uff1a\u4e09\u5706\u5fc3\u8fde\u7ebf\u6784\u6210\u4e09\u89d2\u5f62\uff0c\u6240\u6c42\u5706\u5fc3\u505a\u4e09\u89d2\u5f62\u7684\u9ad8\uff0c\u4f59\u5f26\u5b9a\u7406+\u5b9a\u6bd4\u5206\u70b9\u6c42\u51fa\u5404\u9879\u6570\u636e\u3002</p>\n<p>\u7279\u6b8a\u60c5\u51b5\u8fdb\u884c\u7279\u5224\u6c42\u503c\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\">  6</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">char</span> buf[<span style=\"color: #800080;\">100</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #0000ff;\">char</span> task[<span style=\"color: #800080;\">6</span>][<span style=\"color: #800080;\">100</span>] =<span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 11</span>     <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CircumscribedCircle</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 12</span>     <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">InscribedCircle</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 13</span>     <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">TangentLineThroughPoint</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 14</span>     <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CircleThroughAPointAndTangentToALineWithRadius</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 15</span>     <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CircleTangentToTwoLinesWithRadius</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\n</span><span style=\"color: #008080;\"> 16</span>     <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">CircleTangentToTwoDisjointCirclesWithRadius</span><span style=\"color: #800000;\">\"</span>\n<span style=\"color: #008080;\"> 17</span> <span style=\"color: #000000;\">    };\n</span><span style=\"color: #008080;\"> 18</span> inline <span style=\"color: #0000ff;\">double</span> Sqr(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 19</span> {<span style=\"color: #0000ff;\">return</span> x *<span style=\"color: #000000;\"> x;}\n</span><span style=\"color: #008080;\"> 20</span> inline <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 22</span>     <span style=\"color: #0000ff;\">if</span>(x &gt; eps) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 23</span>     <span style=\"color: #0000ff;\">return</span> x &lt; -eps ? -<span style=\"color: #800080;\">1</span> : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 24</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 25</span> inline <span style=\"color: #0000ff;\">double</span> pz(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 26</span> {<span style=\"color: #0000ff;\">return</span> dcmp(x) ? x : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 27</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 29</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;\n</span><span style=\"color: #008080;\"> 30</span>     Point(){x = y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 31</span>     Point(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 32</span>     {x = a, y =<span style=\"color: #000000;\"> b;}\n</span><span style=\"color: #008080;\"> 33</span>     Point <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 34</span>     {<span style=\"color: #0000ff;\">return</span> Point(x - b.x, y -<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 35</span>     Point <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 36</span>     {<span style=\"color: #0000ff;\">return</span> Point(x + b.x, y +<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\"> 37</span>     Point <span style=\"color: #0000ff;\">operator</span>-<span style=\"color: #000000;\">()\n</span><span style=\"color: #008080;\"> 38</span>     {<span style=\"color: #0000ff;\">return</span> Point(-x, -<span style=\"color: #000000;\">y);}\n</span><span style=\"color: #008080;\"> 39</span>     Point <span style=\"color: #0000ff;\">operator</span>*(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 40</span>     {<span style=\"color: #0000ff;\">return</span> Point(x * b, y *<span style=\"color: #000000;\"> b);}\n</span><span style=\"color: #008080;\"> 41</span>     <span style=\"color: #0000ff;\">double</span> dot(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 42</span>     {<span style=\"color: #0000ff;\">return</span> x * b.x + y *<span style=\"color: #000000;\"> b.y;}\n</span><span style=\"color: #008080;\"> 43</span>     <span style=\"color: #0000ff;\">double</span> cross(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 44</span>     {<span style=\"color: #0000ff;\">return</span> (b.x - x) * (c.y - y) - (c.x - x) * (b.y -<span style=\"color: #000000;\"> y);}\n</span><span style=\"color: #008080;\"> 45</span>     <span style=\"color: #0000ff;\">double</span> Dis(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 46</span>     {<span style=\"color: #0000ff;\">return</span> sqrt((*<span style=\"color: #0000ff;\">this</span> - b).dot(*<span style=\"color: #0000ff;\">this</span> -<span style=\"color: #000000;\"> b));}\n</span><span style=\"color: #008080;\"> 47</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 48</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 49</span>         <span style=\"color: #0000ff;\">if</span>(!dcmp(x - b.x)) <span style=\"color: #0000ff;\">return</span> y &lt;<span style=\"color: #000000;\"> b.y;\n</span><span style=\"color: #008080;\"> 50</span>         <span style=\"color: #0000ff;\">return</span> x &lt;<span style=\"color: #000000;\"> b.x;\n</span><span style=\"color: #008080;\"> 51</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 52</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&gt;(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 53</span>     {<span style=\"color: #0000ff;\">return</span> b &lt; *<span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 54</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 55</span> inline <span style=\"color: #0000ff;\">double</span> min(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 56</span> {<span style=\"color: #0000ff;\">return</span> a &lt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 57</span> inline <span style=\"color: #0000ff;\">double</span> max(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 58</span> {<span style=\"color: #0000ff;\">return</span> a &gt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 59</span> <span style=\"color: #000000;\">inline Point min(Point a, Point b)\n</span><span style=\"color: #008080;\"> 60</span> {<span style=\"color: #0000ff;\">return</span> a &lt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 61</span> <span style=\"color: #000000;\">inline Point max(Point a, Point b)\n</span><span style=\"color: #008080;\"> 62</span> {<span style=\"color: #0000ff;\">return</span> a &gt; b ?<span style=\"color: #000000;\"> a : b;}\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #000000;\">Point CrossPoint(Point a, Point b, Point c, Point d)\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 65</span>     <span style=\"color: #0000ff;\">double</span> u = a.cross(b, c), v =<span style=\"color: #000000;\"> b.cross(a, d);\n</span><span style=\"color: #008080;\"> 66</span>     <span style=\"color: #0000ff;\">return</span> Point((c.x * v + d.x * u) / (u + v), (c.y * v + d.y * u) / (u +<span style=\"color: #000000;\"> v));\n</span><span style=\"color: #008080;\"> 67</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #0000ff;\">int</span> Task(<span style=\"color: #0000ff;\">char</span> *<span style=\"color: #000000;\">s)\n</span><span style=\"color: #008080;\"> 69</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 70</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">6</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 71</span>         <span style=\"color: #0000ff;\">if</span>(!strcmp(s, task[i])) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 73</span> \n<span style=\"color: #008080;\"> 74</span> <span style=\"color: #0000ff;\">void</span> CC()   <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5916\u63a5\u5706</span>\n<span style=\"color: #008080;\"> 75</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 76</span> <span style=\"color: #000000;\">    Point a, b, c, ab, ac, r;\n</span><span style=\"color: #008080;\"> 77</span>     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;a.x, &amp;a.y, &amp;b.x, &amp;b.y, &amp;c.x, &amp;<span style=\"color: #000000;\">c.y);\n</span><span style=\"color: #008080;\"> 78</span>     ab = (a + b) * <span style=\"color: #800080;\">0.5</span>, ac = (a + c) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 79</span>     r = CrossPoint(ab, Point(ab.x + a.y - b.y, ab.y + b.x -<span style=\"color: #000000;\"> a.x), \n</span><span style=\"color: #008080;\"> 80</span>         ac, Point(ac.x + a.y - c.y, ac.y + c.x -<span style=\"color: #000000;\"> a.x));\n</span><span style=\"color: #008080;\"> 81</span>     printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">(%.6f,%.6f,%.6f)\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, \n</span><span style=\"color: #008080;\"> 82</span>         eps + pz(r.x), eps + pz(r.y), eps +<span style=\"color: #000000;\"> pz(r.Dis(a)));\n</span><span style=\"color: #008080;\"> 83</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 84</span> <span style=\"color: #0000ff;\">void</span> IC()   <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5185\u5207\u5706</span>\n<span style=\"color: #008080;\"> 85</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 86</span> <span style=\"color: #000000;\">    Point a, b, c, apf, bpf, r;\n</span><span style=\"color: #008080;\"> 87</span>     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;a.x, &amp;a.y, &amp;b.x, &amp;b.y, &amp;c.x, &amp;<span style=\"color: #000000;\">c.y);\n</span><span style=\"color: #008080;\"> 88</span>     <span style=\"color: #0000ff;\">double</span> la = b.Dis(c), lb = a.Dis(c), lc = a.Dis(b), p = (la + lb + lc) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 89</span>     apf = (c + a + (b - a) * (lb / lc)) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 90</span>     bpf = (c + b + (a - b) * (la / lc)) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 91</span>     r =<span style=\"color: #000000;\"> CrossPoint(a, apf, b, bpf);\n</span><span style=\"color: #008080;\"> 92</span>     printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">(%.6f,%.6f,%.6f)\\n</span><span style=\"color: #800000;\">\"</span>, eps + pz(r.x), eps +<span style=\"color: #000000;\"> pz(r.y), \n</span><span style=\"color: #008080;\"> 93</span>         eps + pz(sqrt(p * (p - la) * (p - lb) * (p - lc)) * <span style=\"color: #800080;\">2</span> / (la + lb +<span style=\"color: #000000;\"> lc)));\n</span><span style=\"color: #008080;\"> 94</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 95</span> <span style=\"color: #0000ff;\">double</span> ManageDeg(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 96</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 97</span>     <span style=\"color: #0000ff;\">while</span>(x &lt; -eps) x +=<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\"> 98</span>     <span style=\"color: #0000ff;\">while</span>(x &gt; pi - eps) x -=<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\"> 99</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">100</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">101</span> <span style=\"color: #0000ff;\">void</span> TLTP() <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u70b9\u5230\u5706\u5207\u7ebf</span>\n<span style=\"color: #008080;\">102</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">103</span> <span style=\"color: #000000;\">    Point a, r;\n</span><span style=\"color: #008080;\">104</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> R, ang, ang1, ang2;\n</span><span style=\"color: #008080;\">105</span>     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;r.x, &amp;r.y, &amp;R, &amp;a.x, &amp;<span style=\"color: #000000;\">a.y);\n</span><span style=\"color: #008080;\">106</span>     ang = atan2(r.y - a.y, r.x -<span style=\"color: #000000;\"> a.x);\n</span><span style=\"color: #008080;\">107</span>     <span style=\"color: #0000ff;\">switch</span>(dcmp(a.Dis(r) -<span style=\"color: #000000;\"> R))\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">109</span>         <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">110</span>             printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[%.6f]\\n</span><span style=\"color: #800000;\">\"</span>, eps + pz(ManageDeg(ang + pi * <span style=\"color: #800080;\">0.5</span>) / pi * <span style=\"color: #800080;\">180</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">111</span>             <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">112</span>         <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">113</span>             ang1 = ManageDeg(ang + asin(R / a.Dis(r))) / pi * <span style=\"color: #800080;\">180</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">114</span>             ang2 = ManageDeg(ang - asin(R / a.Dis(r))) / pi * <span style=\"color: #800080;\">180</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">115</span>             printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[%.6f,%.6f]\\n</span><span style=\"color: #800000;\">\"</span>, eps +<span style=\"color: #000000;\"> pz(min(ang1, ang2)), \n</span><span style=\"color: #008080;\">116</span>                 eps +<span style=\"color: #000000;\"> pz(max(ang1, ang2)));\n</span><span style=\"color: #008080;\">117</span>             <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">118</span>         <span style=\"color: #0000ff;\">default</span><span style=\"color: #000000;\">:\n</span><span style=\"color: #008080;\">119</span>             printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[]\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">120</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">121</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">122</span> <span style=\"color: #0000ff;\">void</span> CTAPATTAWR()<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5207\u76f4\u7ebf\u4e14\u7ecf\u5b9a\u70b9\u3001\u534a\u5f84\u5b9a\u503c\u7684\u5706</span>\n<span style=\"color: #008080;\">123</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">124</span> <span style=\"color: #000000;\">    Point p, a, b, pcl, pcz, r1, r2, xl;\n</span><span style=\"color: #008080;\">125</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> R, rcp;\n</span><span style=\"color: #008080;\">126</span>     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;p.x, &amp;p.y, &amp;a.x, &amp;a.y, &amp;b.x, &amp;b.y, &amp;<span style=\"color: #000000;\">R);\n</span><span style=\"color: #008080;\">127</span>     pcl = Point(p.x + a.y - b.y, p.y + b.x - a.x);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">pcl-p \u5782\u7ebf\u5411\u91cf</span>\n<span style=\"color: #008080;\">128</span>     pcz = CrossPoint(p, pcl, a, b);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5782\u8db3</span>\n<span style=\"color: #008080;\">129</span>     <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">dcmp(p.cross(a, b)))\n</span><span style=\"color: #008080;\">130</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">131</span>         r1 = p + (pcl - p) * (R /<span style=\"color: #000000;\"> p.Dis(pcl));\n</span><span style=\"color: #008080;\">132</span>         r2 = p - (pcl - p) * (R /<span style=\"color: #000000;\"> p.Dis(pcl));\n</span><span style=\"color: #008080;\">133</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[(%.6f,%.6f),</span><span style=\"color: #800000;\">\"</span>, eps + pz(min(r1, r2).x), eps +<span style=\"color: #000000;\"> pz(min(r1, r2).y));\n</span><span style=\"color: #008080;\">134</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">(%.6f,%.6f)]\\n</span><span style=\"color: #800000;\">\"</span>, eps + pz(max(r1, r2).x), eps +<span style=\"color: #000000;\"> pz(max(r1, r2).y));\n</span><span style=\"color: #008080;\">135</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">136</span>     <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(!dcmp(R - p.Dis(pcz) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\">137</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">138</span>         r1 = (p + pcz) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">139</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[(%.6f,%.6f)]\\n</span><span style=\"color: #800000;\">\"</span>, eps + pz(r1.x), eps +<span style=\"color: #000000;\"> pz(r1.y));\n</span><span style=\"color: #008080;\">140</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">141</span>     <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(dcmp(R - p.Dis(pcz) * <span style=\"color: #800080;\">0.5</span>) &gt; <span style=\"color: #800080;\">0</span>)<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5229\u7528\u53cc\u66f2\u7ebf\u6027\u8d28\uff0c\u6784\u9020\u76f4\u89d2\u68af\u5f62\u6c42\u89e3\u3002</span>\n<span style=\"color: #008080;\">142</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">143</span>         rcp = sqrt(R * R - Sqr(R - p.Dis(pcz)));<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u76f4\u89d2\u68af\u5f62\u7684\u9ad8\u3002\u3002\u3002</span>\n<span style=\"color: #008080;\">144</span>         r1 = pcz + (a - b) * (rcp / (a.Dis(b))) + (p - pcz) * (R /<span style=\"color: #000000;\"> p.Dis(pcz));\n</span><span style=\"color: #008080;\">145</span>         r2 = pcz - (a - b) * (rcp / (a.Dis(b))) + (p - pcz) * (R /<span style=\"color: #000000;\"> p.Dis(pcz));\n</span><span style=\"color: #008080;\">146</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[(%.6f,%.6f),</span><span style=\"color: #800000;\">\"</span>, eps + pz(min(r1, r2).x), eps +<span style=\"color: #000000;\"> pz(min(r1, r2).y));\n</span><span style=\"color: #008080;\">147</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">(%.6f,%.6f)]\\n</span><span style=\"color: #800000;\">\"</span>, eps + pz(max(r1, r2).x), eps +<span style=\"color: #000000;\"> pz(max(r1, r2).y));\n</span><span style=\"color: #008080;\">148</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">149</span>     <span style=\"color: #0000ff;\">else</span> printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[]\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">150</span> \n<span style=\"color: #008080;\">151</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">152</span> <span style=\"color: #0000ff;\">void</span> CTTTLWR()<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4e0e\u4e24\u76f8\u4ea4\u76f4\u7ebf\u76f8\u5207\u7684\u5706</span>\n<span style=\"color: #008080;\">153</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">154</span>     Point a, b, c, d, A, B, C, D, jd, xl1, xl2, r[<span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\">155</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> R, R_, ang, l1, l2;\n</span><span style=\"color: #008080;\">156</span>     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf%lf%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, \n</span><span style=\"color: #008080;\">157</span>         &amp;a.x, &amp;a.y, &amp;b.x, &amp;b.y, &amp;c.x, &amp;c.y, &amp;d.x, &amp;d.y, &amp;<span style=\"color: #000000;\">R);\n</span><span style=\"color: #008080;\">158</span>     xl1 = Point(a.y - b.y, b.x - a.x); xl1 = xl1 * (R /<span style=\"color: #000000;\"> sqrt(xl1.dot(xl1)));\n</span><span style=\"color: #008080;\">159</span>     xl2 = Point(c.y - d.y, d.x - c.x); xl2 = xl2 * (R /<span style=\"color: #000000;\"> sqrt(xl2.dot(xl2)));\n</span><span style=\"color: #008080;\">160</span>     r[<span style=\"color: #800080;\">0</span>] = CrossPoint(a + xl1, b + xl1, c + xl2, d +<span style=\"color: #000000;\"> xl2);\n</span><span style=\"color: #008080;\">161</span>     r[<span style=\"color: #800080;\">1</span>] = CrossPoint(a + xl1, b + xl1, c - xl2, d -<span style=\"color: #000000;\"> xl2);\n</span><span style=\"color: #008080;\">162</span>     r[<span style=\"color: #800080;\">2</span>] = CrossPoint(a - xl1, b - xl1, c + xl2, d +<span style=\"color: #000000;\"> xl2);\n</span><span style=\"color: #008080;\">163</span>     r[<span style=\"color: #800080;\">3</span>] = CrossPoint(a - xl1, b - xl1, c - xl2, d -<span style=\"color: #000000;\"> xl2);\n</span><span style=\"color: #008080;\">164</span>     sort(r, r + <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">165</span>     printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">166</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">4</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">167</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">168</span>         <span style=\"color: #0000ff;\">if</span>(i)printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">,</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">169</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">(%.6f,%.6f)</span><span style=\"color: #800000;\">\"</span>, eps + pz(r[i].x), eps +<span style=\"color: #000000;\"> pz(r[i].y));\n</span><span style=\"color: #008080;\">170</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">171</span>     printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">]\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">172</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">173</span> <span style=\"color: #0000ff;\">void</span> CTTTDCWR()<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4e24\u76f8\u79bb\u5706\u7684\u516c\u5171\u5916\u5207\u5706</span>\n<span style=\"color: #008080;\">174</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">175</span>     Point r1, r2, r[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">], zd, xl;\n</span><span style=\"color: #008080;\">176</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> R1, R2, R, len;\n</span><span style=\"color: #008080;\">177</span>     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;r1.x, &amp;r1.y, &amp;R1, &amp;r2.x, &amp;r2.y, &amp;R2, &amp;<span style=\"color: #000000;\">R);\n</span><span style=\"color: #008080;\">178</span>     <span style=\"color: #0000ff;\">if</span>(!dcmp(R + R1 + R + R2 -<span style=\"color: #000000;\"> r1.Dis(r2)))\n</span><span style=\"color: #008080;\">179</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">180</span>         r[<span style=\"color: #800080;\">0</span>] = r1 + (r2 - r1) * ((R + R1) / (R + R1 + R +<span style=\"color: #000000;\"> R2));\n</span><span style=\"color: #008080;\">181</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[(%.6f,%.6f)]\\n</span><span style=\"color: #800000;\">\"</span>, eps + pz(r[<span style=\"color: #800080;\">0</span>].x), eps + pz(r[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].y));\n</span><span style=\"color: #008080;\">182</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">183</span>     <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(dcmp(R + R1 + R + R2 - r1.Dis(r2)) &gt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">184</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">185</span>         zd = r1 + (r2 - r1) * (((R + R1) * (Sqr(R + R1) + Sqr(r1.Dis(r2)) - Sqr(R + R2)) * \n<span style=\"color: #008080;\">186</span>             <span style=\"color: #800080;\">0.5</span> / (R + R1) / r1.Dis(r2)) / r1.Dis(r2));<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5bf9\u79f0\u5706\u5fc3\u7684\u4e2d\u70b9</span>\n<span style=\"color: #008080;\">187</span>         len = sqrt(Sqr(R + R1) - Sqr(zd.Dis(r1)));<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">zd\u5230\u6240\u6c42\u5706\u5fc3\u8ddd\u79bb</span>\n<span style=\"color: #008080;\">188</span>         xl = Point(r1.y - r2.y, r2.x - r1.x);<span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">zd\u5230\u6240\u6c42\u5706\u5fc3\u7684\u5411\u91cf</span>\n<span style=\"color: #008080;\">189</span>         r[<span style=\"color: #800080;\">0</span>] = zd + xl * (len /<span style=\"color: #000000;\"> sqrt(xl.dot(xl)));\n</span><span style=\"color: #008080;\">190</span>         r[<span style=\"color: #800080;\">1</span>] = zd - xl * (len /<span style=\"color: #000000;\"> sqrt(xl.dot(xl)));\n</span><span style=\"color: #008080;\">191</span>         sort(r, r + <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">192</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[(%.6f,%.6f),(%.6f,%.6f)]\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, \n</span><span style=\"color: #008080;\">193</span>             eps + pz(r[<span style=\"color: #800080;\">0</span>].x), eps + pz(r[<span style=\"color: #800080;\">0</span>].y), eps + pz(r[<span style=\"color: #800080;\">1</span>].x), eps + pz(r[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].y));\n</span><span style=\"color: #008080;\">194</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">195</span>     <span style=\"color: #0000ff;\">else</span> printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">[]\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">196</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">197</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">198</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">199</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s</span><span style=\"color: #800000;\">\"</span>, buf) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">200</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">201</span>         <span style=\"color: #0000ff;\">switch</span><span style=\"color: #000000;\">(Task(buf))\n</span><span style=\"color: #008080;\">202</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">203</span>             <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">0</span>: CC();<span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">204</span>             <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">1</span>: IC();<span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">205</span>             <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">2</span>: TLTP();<span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">206</span>             <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">3</span>: CTAPATTAWR();<span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">207</span>             <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">4</span>: CTTTLWR();<span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">208</span>             <span style=\"color: #0000ff;\">case</span> <span style=\"color: #800080;\">5</span>: CTTTDCWR();<span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">209</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">210</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">211</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">212</span> }</pre>\n</div>\n<p>&nbsp;</p>"
			}, {
				"title": "UVA12302 Nine-Point Circle",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/02/2667671.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Sun, 02 Sep 2012 08:49:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/09/02/2667671.html",
				"description": "<p>\u4e5d\u70b9\u5706\u8fc7 \u4e09\u8fb9\u4e2d\u70b9\u3001\u4e09\u8fb9\u5782\u8db3\u3001\u4e09\u70b9\u81f3\u5782\u5fc3\u7ebf\u6bb5\u7684\u4e2d\u70b9\u3002<br />\u4e5d\u70b9\u5706\u5706\u5fc3\u4e3a\u5916\u5fc3\u4e0e\u5782\u5fc3\u4e2d\u70b9\uff0c\u534a\u5f84\u4e3a\u5916\u5fc3\u7684\u4e00\u534a\u3002</p>\n<p>\u4e5f\u8bb8\u662f\u7cbe\u5ea6\u95ee\u9898\uff0c\u6c42\u4e09\u8fb9\u4e2d\u70b9\u4e09\u89d2\u5f62\u5916\u5fc3\u518d\u6c42\u8ddd\u79bb\u7b97\u534a\u5f84\u5c31WA\u4e86\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span>  #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span>  #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 3</span>  #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 4</span>  #include&lt;math.h&gt;\n<span style=\"color: #008080;\"> 5</span>  <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\"> 7</span>      <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y;\n</span><span style=\"color: #008080;\"> 8</span>      Point(){x = y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;}\n</span><span style=\"color: #008080;\"> 9</span>      Point(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\">10</span>      {x = a, y =<span style=\"color: #000000;\"> b;}\n</span><span style=\"color: #008080;\">11</span>      Point <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">12</span>      {<span style=\"color: #0000ff;\">return</span> Point(x - b.x, y -<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\">13</span>      Point <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">14</span>      {<span style=\"color: #0000ff;\">return</span> Point(x + b.x, y +<span style=\"color: #000000;\"> b.y);}\n</span><span style=\"color: #008080;\">15</span>      Point <span style=\"color: #0000ff;\">operator</span>-<span style=\"color: #000000;\">()\n</span><span style=\"color: #008080;\">16</span>      {<span style=\"color: #0000ff;\">return</span> Point(-x, -<span style=\"color: #000000;\">y);}\n</span><span style=\"color: #008080;\">17</span>      Point <span style=\"color: #0000ff;\">operator</span>*(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">18</span>      {<span style=\"color: #0000ff;\">return</span> Point(x * b, y *<span style=\"color: #000000;\"> b);}\n</span><span style=\"color: #008080;\">19</span>      <span style=\"color: #0000ff;\">double</span> dot(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">20</span>      {<span style=\"color: #0000ff;\">return</span> x * b.x + y *<span style=\"color: #000000;\"> b.y;}\n</span><span style=\"color: #008080;\">21</span>      <span style=\"color: #0000ff;\">double</span> cross(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">22</span>      {<span style=\"color: #0000ff;\">return</span> (b.x - x) * (c.y - y) - (c.x - x) * (b.y -<span style=\"color: #000000;\"> y);}\n</span><span style=\"color: #008080;\">23</span>      <span style=\"color: #0000ff;\">double</span> Dis(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\">24</span>      {<span style=\"color: #0000ff;\">return</span> sqrt((*<span style=\"color: #0000ff;\">this</span> - b).dot(*<span style=\"color: #0000ff;\">this</span> -<span style=\"color: #000000;\"> b));}\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\"> };\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\"> Point CrossPoint(Point a, Point b, Point c, Point d)\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\">28</span>      <span style=\"color: #0000ff;\">double</span> u = a.cross(b, c), v =<span style=\"color: #000000;\"> b.cross(a, d);\n</span><span style=\"color: #008080;\">29</span>      <span style=\"color: #0000ff;\">return</span> Point((c.x * v + d.x * u) / (u + v), (c.y * v + d.y * u) / (u +<span style=\"color: #000000;\"> v));\n</span><span style=\"color: #008080;\">30</span> <span style=\"color: #000000;\"> }\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\"> Point A, B, C, ab, ac, Rcx, Rwx, r;\n</span><span style=\"color: #008080;\">32</span>  <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">33</span> <span style=\"color: #000000;\"> {\n</span><span style=\"color: #008080;\">34</span>      <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;A.x, &amp;A.y, &amp;B.x, &amp;B.y, &amp;C.x, &amp;<span style=\"color: #000000;\">C.y), \n</span><span style=\"color: #008080;\">35</span>         fabs(A.x + <span style=\"color: #800080;\">1</span>) &gt; 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">36</span> <span style=\"color: #000000;\">     {\n</span><span style=\"color: #008080;\">37</span>          Rcx = CrossPoint(A, Point(A.x + B.y - C.y, A.y + C.x -<span style=\"color: #000000;\"> B.x), \n</span><span style=\"color: #008080;\">38</span>                          B, Point(B.x + C.y - A.y, B.y + A.x -<span style=\"color: #000000;\"> C.x));\n</span><span style=\"color: #008080;\">39</span>          ab = (A + B) * <span style=\"color: #800080;\">0.5</span>, ac = (A + C) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">40</span>          Rwx = CrossPoint(ab, Point(ab.x + B.y - A.y, ab.y + A.x -<span style=\"color: #000000;\"> B.x), \n</span><span style=\"color: #008080;\">41</span>                          ac, Point(ac.x + C.y - A.y, ac.y + A.x -<span style=\"color: #000000;\"> C.x));\n</span><span style=\"color: #008080;\">42</span>          r = (Rcx + Rwx) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">43</span>          printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.6f %.6f %.6f\\n</span><span style=\"color: #800000;\">\"</span>, r.x, r.y, Rwx.Dis(A) * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">     }\n</span><span style=\"color: #008080;\">45</span>      <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">46</span>  }</pre>\n</div>"
			}, {
				"title": "HDU2471 2008 Asia Regional Hangzhou History of Languages",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/28/2659445.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 17:08:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/28/2659445.html",
				"description": "<p>\u7ed9\u51fa\u4e24\u4e2aDFA\u7684\u72b6\u6001\u8f6c\u6362\u8868\uff0c\u5224\u65ad\u4e24\u4e2aDFA\u662f\u5426\u76f8\u540c\u3002</p>\n<p>\u9700\u8981\u5148\u5904\u7406\u5faa\u73af\u8def\u5f84\uff0c\u5373\u901a\u8fc7\u67d0\u8def\u5f84\u540e\u65e0\u6cd5\u8fbe\u5230AC\u72b6\u6001\uff0c\u4f46\u53ef\u80fd\u901a\u8fc7\u8be5\u8def\u5f84\u540e\u4e24\u4e2aDFA\u7684\u72b6\u6001\u8f6c\u6362\u4e0d\u76f8\u540c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e24\u4e2aDFA\u4f9d\u7136\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u8981\u628a\u8fd9\u6837\u7684\u8def\u5f84\u5c01\u6b7b\u3002</p>\n<p>\u4eceAC\u72b6\u6001\u53cd\u5411\u5efa\u56fe\uff0cBFS\u5c01\u6b7b\u4e0a\u8ff0\u8def\u5f84\uff0c\u518d\u4ece0\u72b6\u6001BFS\u540c\u6b65\u5bf9\u6bd4\u4e24DFA\u72b6\u6001\u8f6c\u6362\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\"> 2</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 3</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 4</span> #include&lt;queue&gt;\n<span style=\"color: #008080;\"> 5</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">2011</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxm = <span style=\"color: #800080;\">27</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span> \n<span style=\"color: #008080;\"> 9</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> vis[maxn][maxn], ac1[maxn], ac2[maxn];\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> f1[maxn][maxm], f2[maxn][maxm];\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> t, n1, n2;\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> qu\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">14</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> s1, s2;\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">    qu()\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">17</span>         s1 = s2 = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">19</span>     qu(<span style=\"color: #0000ff;\">int</span> a, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">21</span>         s1 = a, s2 =<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\">24</span> queue&lt;qu&gt;<span style=\"color: #000000;\"> q;\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> BFS()\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">    qu lin;\n</span><span style=\"color: #008080;\">28</span>     memset(vis, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(vis));\n</span><span style=\"color: #008080;\">29</span>     <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">q.empty()) q.pop();\n</span><span style=\"color: #008080;\">30</span>     q.push(qu()), vis[<span style=\"color: #800080;\">0</span>][<span style=\"color: #800080;\">0</span>] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">31</span>     <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">q.empty())\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">33</span>         lin =<span style=\"color: #000000;\"> q.front(), q.pop();\n</span><span style=\"color: #008080;\">34</span>         <span style=\"color: #0000ff;\">if</span>(lin.s1 &gt;= n1 || lin.s2 &gt;= n2) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">35</span>         <span style=\"color: #0000ff;\">if</span>(ac1[lin.s1] != ac2[lin.s2]) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">36</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; t; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">37</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">38</span>             <span style=\"color: #0000ff;\">if</span>(!!(f1[lin.s1][i] + <span style=\"color: #800080;\">1</span>) != !!(f2[lin.s2][i] + <span style=\"color: #800080;\">1</span>)) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">39</span>             <span style=\"color: #0000ff;\">if</span>(f1[lin.s1][i] == -<span style=\"color: #800080;\">1</span>)<span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">40</span>             <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">vis[f1[lin.s1][i]][f2[lin.s2][i]])\n</span><span style=\"color: #008080;\">41</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">42</span>                 vis[f1[lin.s1][i]][f2[lin.s2][i]] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">43</span> <span style=\"color: #000000;\">                q.push(qu(f1[lin.s1][i], f2[lin.s2][i]));\n</span><span style=\"color: #008080;\">44</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">45</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">46</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">47</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">48</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">49</span> <span style=\"color: #0000ff;\">int</span> fst[maxn], nex[maxn *maxn], v[maxn *<span style=\"color: #000000;\">maxn], wnum;\n</span><span style=\"color: #008080;\">50</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> ok[maxn];\n</span><span style=\"color: #008080;\">51</span> <span style=\"color: #0000ff;\">void</span> BFSCUT(<span style=\"color: #0000ff;\">bool</span> *ac, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n)\n</span><span style=\"color: #008080;\">52</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">53</span>     queue&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> q;\n</span><span style=\"color: #008080;\">54</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">55</span>     memset(ok, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(ok));\n</span><span style=\"color: #008080;\">56</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++ i) <span style=\"color: #0000ff;\">if</span>(ac[i]) q.push(i), ok[i] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">57</span>     <span style=\"color: #0000ff;\">while</span>(!<span style=\"color: #000000;\">q.empty())\n</span><span style=\"color: #008080;\">58</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">59</span>         <span style=\"color: #0000ff;\">for</span>(i = fst[q.front()], q.pop(); i != -<span style=\"color: #800080;\">1</span>; i =<span style=\"color: #000000;\"> nex[i])\n</span><span style=\"color: #008080;\">60</span>             <span style=\"color: #0000ff;\">if</span>(!ok[v[i]]) ok[v[i]] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">, q.push(v[i]);\n</span><span style=\"color: #008080;\">61</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">62</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">63</span> <span style=\"color: #0000ff;\">void</span> ReadData(<span style=\"color: #0000ff;\">bool</span> *ac, <span style=\"color: #0000ff;\">int</span> f[][maxm], <span style=\"color: #0000ff;\">int</span> *<span style=\"color: #000000;\">n)\n</span><span style=\"color: #008080;\">64</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">65</span>     scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, n);\n</span><span style=\"color: #008080;\">66</span>     memset(fst, -<span style=\"color: #800080;\">1</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(fst));\n</span><span style=\"color: #008080;\">67</span>     wnum = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">68</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>, x; i &lt; *n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">69</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">70</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;x), ac[i] =<span style=\"color: #000000;\"> x;\n</span><span style=\"color: #008080;\">71</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; t; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">72</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">73</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">f[i][j]);\n</span><span style=\"color: #008080;\">74</span>             <span style=\"color: #0000ff;\">if</span>(f[i][j] != -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">75</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">76</span>                 nex[wnum] =<span style=\"color: #000000;\"> fst[f[i][j]];\n</span><span style=\"color: #008080;\">77</span>                 fst[f[i][j]] =<span style=\"color: #000000;\"> wnum;\n</span><span style=\"color: #008080;\">78</span>                 v[wnum] =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">79</span>                 ++<span style=\"color: #000000;\"> wnum;\n</span><span style=\"color: #008080;\">80</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">81</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">82</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">83</span>     BFSCUT(ac, *<span style=\"color: #000000;\">n);\n</span><span style=\"color: #008080;\">84</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">0</span>; i &lt; *n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">85</span>         <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> j = <span style=\"color: #800080;\">0</span>; j &lt; t; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">86</span>             <span style=\"color: #0000ff;\">if</span>(f[i][j] != -<span style=\"color: #800080;\">1</span> &amp;&amp; !ok[f[i][j]]) f[i][j] = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">87</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">88</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">89</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">90</span>     <span style=\"color: #0000ff;\">int</span> ca = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">91</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">t), t)\n</span><span style=\"color: #008080;\">92</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">93</span>         ReadData(ac1, f1, &amp;<span style=\"color: #000000;\">n1);\n</span><span style=\"color: #008080;\">94</span>         ReadData(ac2, f2, &amp;<span style=\"color: #000000;\">n2);\n</span><span style=\"color: #008080;\">95</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Case #%d: </span><span style=\"color: #800000;\">\"</span>, ++<span style=\"color: #000000;\"> ca);\n</span><span style=\"color: #008080;\">96</span>         printf(BFS() ? <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Yes\\n</span><span style=\"color: #800000;\">\"</span> : <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">No\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">97</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">98</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">99</span> }</pre>\n</div>"
			}, {
				"title": "UVALive4974 CERC2010B Beasts",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659147.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 13:00:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659147.html",
				"description": "<p>\u601d\u60f3\u662f\u534a\u5e73\u9762\u4ea4+\u65cb\u8f6c\u5361\u58f3\uff0c\u5173\u4e8eX\u8f74\u53d6\u4e00\u6b21\u5bf9\u79f0\u518d\u6c42\u5305\u56f4(0, -10^10)\u70b9\u7684\u90e8\u5206\u540e\u518d\u5bf9\u79f0\u56de\u6765\u53ef\u4ee5\u5c11\u5199\u70b9\u9488\u5bf9\u6027\u4ee3\u7801\u3002\u5de6\u53f3\u7684\u5c04\u7ebf\u5355\u72ec\u5904\u7406\u4e86\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;iostream&gt;\n<span style=\"color: #008080;\">  6</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">211111</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">9</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 10</span> typedef <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> PELEM;\n</span><span style=\"color: #008080;\"> 11</span> typedef <span style=\"color: #0000ff;\">long</span> <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> LL;\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #000000;\">    PELEM x, y;\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #000000;\">    Point()\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 17</span>         x = y = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #000000;\">    Point(PELEM a, PELEM b)\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 21</span>         x = a, y =<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 23</span>     PELEM cross(<span style=\"color: #0000ff;\">const</span> Point &amp;b, <span style=\"color: #0000ff;\">const</span> Point &amp;c)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 24</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 25</span>         <span style=\"color: #0000ff;\">return</span> (b.x - x) * (c.y -<span style=\"color: #000000;\"> y)\n</span><span style=\"color: #008080;\"> 26</span>                - (c.x - x) * (b.y -<span style=\"color: #000000;\"> y);\n</span><span style=\"color: #008080;\"> 27</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 28</span>     PELEM dot(<span style=\"color: #0000ff;\">const</span> Point &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 29</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 30</span>         <span style=\"color: #0000ff;\">return</span> x * p.x + y *<span style=\"color: #000000;\"> p.y;\n</span><span style=\"color: #008080;\"> 31</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 32</span>     Point <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 33</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 34</span>         <span style=\"color: #0000ff;\">return</span> Point(x - p.x, y -<span style=\"color: #000000;\"> p.y);\n</span><span style=\"color: #008080;\"> 35</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 36</span>     Point <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 37</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 38</span>         <span style=\"color: #0000ff;\">return</span> Point(x + p.x, y +<span style=\"color: #000000;\"> p.y);\n</span><span style=\"color: #008080;\"> 39</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 40</span>     Point <span style=\"color: #0000ff;\">operator</span>-()<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 41</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 42</span>         <span style=\"color: #0000ff;\">return</span> Point(-x, -<span style=\"color: #000000;\">y);\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 44</span> } p[<span style=\"color: #800080;\">2</span>][maxn &lt;&lt; <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 45</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Line\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 47</span> <span style=\"color: #000000;\">    LL a, b, c;\n</span><span style=\"color: #008080;\"> 48</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Line &amp;l)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 49</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 50</span>         <span style=\"color: #0000ff;\">if</span>(a *l.b == b *<span style=\"color: #000000;\"> l.a)\n</span><span style=\"color: #008080;\"> 51</span>             <span style=\"color: #0000ff;\">return</span> l.c * b &lt; c *<span style=\"color: #000000;\"> l.b;\n</span><span style=\"color: #008080;\"> 52</span>         <span style=\"color: #0000ff;\">return</span> a * l.b &gt; b *<span style=\"color: #000000;\"> l.a;\n</span><span style=\"color: #008080;\"> 53</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 54</span>     <span style=\"color: #0000ff;\">int</span> CmXL(<span style=\"color: #0000ff;\">const</span> Line &amp;l)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 55</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 56</span>         <span style=\"color: #0000ff;\">if</span>(a * l.b &lt; b * l.a) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 57</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(a * l.b &gt; b * l.a) <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 58</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 59</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 60</span>     <span style=\"color: #0000ff;\">bool</span> paral(<span style=\"color: #0000ff;\">const</span> Line &amp;l)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 61</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 62</span>         <span style=\"color: #0000ff;\">return</span> a * l.b == b *<span style=\"color: #000000;\"> l.a;\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 64</span>     <span style=\"color: #0000ff;\">bool</span> high(<span style=\"color: #0000ff;\">const</span> Point &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 65</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 66</span>         <span style=\"color: #0000ff;\">return</span> p.x * a + p.y * b - c &gt;<span style=\"color: #000000;\"> eps;\n</span><span style=\"color: #008080;\"> 67</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 68</span>     Point CrossP(<span style=\"color: #0000ff;\">const</span> Line &amp;l)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 69</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 70</span>         <span style=\"color: #0000ff;\">return</span> Point((<span style=\"color: #0000ff;\">double</span>)(c * l.b - l.c * b) / (a * l.b - l.a *<span style=\"color: #000000;\"> b),\n</span><span style=\"color: #008080;\"> 71</span>                      (<span style=\"color: #0000ff;\">double</span>)(c * l.a - l.c * a) / (b * l.a - l.b *<span style=\"color: #000000;\"> a));\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 73</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #0000ff;\">void</span> HPC(Line l[], <span style=\"color: #0000ff;\">int</span> n, Point p[], Line nl[], <span style=\"color: #0000ff;\">int</span> &amp;pm, <span style=\"color: #0000ff;\">int</span> &amp;<span style=\"color: #000000;\">lm)\n</span><span style=\"color: #008080;\"> 75</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, tn;\n</span><span style=\"color: #008080;\"> 77</span>     sort(l, l +<span style=\"color: #000000;\"> n);\n</span><span style=\"color: #008080;\"> 78</span>     pm = lm = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 79</span>     nl[lm ++] = l[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 80</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 81</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 82</span>         <span style=\"color: #0000ff;\">if</span>(lm &amp;&amp; nl[lm - <span style=\"color: #800080;\">1</span>].paral(l[i])) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 83</span>         <span style=\"color: #0000ff;\">while</span>(pm &amp;&amp; !l[i].high(p[pm - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\"> 84</span>             -- pm, --<span style=\"color: #000000;\"> lm;\n</span><span style=\"color: #008080;\"> 85</span>         p[pm ++] = nl[lm - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">].CrossP(l[i]);\n</span><span style=\"color: #008080;\"> 86</span>         nl[lm ++] =<span style=\"color: #000000;\"> l[i];\n</span><span style=\"color: #008080;\"> 87</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 88</span>     <span style=\"color: #0000ff;\">if</span>(pm == <span style=\"color: #800080;\">0</span>) p[pm ++] = Point(<span style=\"color: #800080;\">0</span>, (<span style=\"color: #0000ff;\">double</span>)nl[<span style=\"color: #800080;\">0</span>].c / nl[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].b);\n</span><span style=\"color: #008080;\"> 89</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 90</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, pn1, pn2, ln1, ln2;\n</span><span style=\"color: #008080;\"> 91</span> <span style=\"color: #000000;\">Line l[maxn], l1[maxn], l2[maxn];\n</span><span style=\"color: #008080;\"> 92</span> <span style=\"color: #000000;\">Point p1[maxn], p2[maxn];\n</span><span style=\"color: #008080;\"> 93</span> <span style=\"color: #000000;\">Point CrossPoint(Point a, Point b, Point c, Point d)\n</span><span style=\"color: #008080;\"> 94</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 95</span>     <span style=\"color: #0000ff;\">double</span> u = a.cross(b, c), v =<span style=\"color: #000000;\"> b.cross(a, d);\n</span><span style=\"color: #008080;\"> 96</span>     <span style=\"color: #0000ff;\">return</span> Point((c.x * v + d.x * u) / (u + v), (c.y * v + d.y * u) / (u +<span style=\"color: #000000;\"> v));\n</span><span style=\"color: #008080;\"> 97</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> DisPtoP(Point a, Point b)\n</span><span style=\"color: #008080;\"> 99</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">100</span>     <span style=\"color: #0000ff;\">return</span> (a - b).dot(a -<span style=\"color: #000000;\"> b);\n</span><span style=\"color: #008080;\">101</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">102</span> \n<span style=\"color: #008080;\">103</span> <span style=\"color: #0000ff;\">double</span> DisPtoS(Point p, Point a, Point b, <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> mk)\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">105</span>     Point t = Point(p.x + a.y - b.y, p.y + b.x -<span style=\"color: #000000;\"> a.x);\n</span><span style=\"color: #008080;\">106</span>     <span style=\"color: #0000ff;\">if</span>(mk &amp;&amp; (t - a).dot(b - a) &gt; eps || t.cross(a, p) * t.cross(b, p) &lt; -<span style=\"color: #000000;\">eps)\n</span><span style=\"color: #008080;\">107</span>         <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> DisPtoP(p, CrossPoint(t, p, a, b));\n</span><span style=\"color: #008080;\">108</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> min(DisPtoP(p, a), DisPtoP(p, b));\n</span><span style=\"color: #008080;\">109</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">110</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> DisStoS(Point a, Point b, Point c, Point d)\n</span><span style=\"color: #008080;\">111</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">112</span>     <span style=\"color: #0000ff;\">double</span> ans =<span style=\"color: #000000;\"> 1e30;\n</span><span style=\"color: #008080;\">113</span>     ans = min(ans, DisPtoS(a, c, d, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">114</span>     ans = min(ans, DisPtoS(b, c, d, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">115</span>     ans = min(ans, DisPtoS(c, a, b, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">116</span>     ans = min(ans, DisPtoS(d, a, b, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">117</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">118</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">119</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">120</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">121</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> t, i, j, k;\n</span><span style=\"color: #008080;\">122</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> ans;\n</span><span style=\"color: #008080;\">123</span> <span style=\"color: #000000;\">    Point ts, te;\n</span><span style=\"color: #008080;\">124</span>     <span style=\"color: #0000ff;\">for</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;t); t --<span style=\"color: #000000;\">; )\n</span><span style=\"color: #008080;\">125</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">126</span>         ans =<span style=\"color: #000000;\"> 1e30;\n</span><span style=\"color: #008080;\">127</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">n);\n</span><span style=\"color: #008080;\">128</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">129</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">130</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lld%lld%lld</span><span style=\"color: #800000;\">\"</span>, &amp;l[i].a, &amp;l[i].b, &amp;l[i].c), l[i].c = -<span style=\"color: #000000;\">l[i].c;\n</span><span style=\"color: #008080;\">131</span>             <span style=\"color: #0000ff;\">if</span>(l[i].b &lt; <span style=\"color: #800080;\">0</span>) l[i].a = -l[i].a, l[i].b = -l[i].b, l[i].c = -<span style=\"color: #000000;\">l[i].c;\n</span><span style=\"color: #008080;\">132</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">133</span> <span style=\"color: #000000;\">        HPC(l, n, p1, l1, pn1, ln1);\n</span><span style=\"color: #008080;\">134</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">135</span>             l[i].a = -l[i].a, l[i].c = -<span style=\"color: #000000;\">l[i].c;\n</span><span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">        HPC(l, n, p2, l2, pn2, ln2);\n</span><span style=\"color: #008080;\">137</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; ln2; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">138</span>             l2[i].a = -l2[i].a, l2[i].c = -<span style=\"color: #000000;\">l2[i].c;\n</span><span style=\"color: #008080;\">139</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; pn2; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">140</span>             p2[i].y = -<span style=\"color: #000000;\">p2[i].y;\n</span><span style=\"color: #008080;\">141</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>, j = pn2 - <span style=\"color: #800080;\">1</span>; i + <span style=\"color: #800080;\">1</span> &lt; pn1 ||<span style=\"color: #000000;\"> j;)\n</span><span style=\"color: #008080;\">142</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">143</span>             <span style=\"color: #0000ff;\">if</span>(j &amp;&amp; (i == pn1 - <span style=\"color: #800080;\">1</span> || l1[i + <span style=\"color: #800080;\">1</span>].CmXL(l2[j]) == <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\">144</span>                 ans = min(ans, DisPtoS(p1[i], p2[j - <span style=\"color: #800080;\">1</span>], p2[j], <span style=\"color: #800080;\">0</span>)), --<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">145</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(i &lt; pn1 - <span style=\"color: #800080;\">1</span> &amp;&amp; (!j || l1[i + <span style=\"color: #800080;\">1</span>].CmXL(l2[j]) == -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\">146</span>                 ans = min(ans, DisPtoS(p2[j], p1[i], p1[i + <span style=\"color: #800080;\">1</span>], <span style=\"color: #800080;\">0</span>)), ++<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">147</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">148</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">149</span>                 ans = min(ans, DisStoS(p1[i], p1[i + <span style=\"color: #800080;\">1</span>], p2[j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">], p2[j]));\n</span><span style=\"color: #008080;\">150</span>                 ++ i, --<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\">151</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">152</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">153</span>         ts = Point(p2[<span style=\"color: #800080;\">0</span>].x - <span style=\"color: #800080;\">1</span>, (l2[<span style=\"color: #800080;\">0</span>].c - l2[<span style=\"color: #800080;\">0</span>].a * (p2[<span style=\"color: #800080;\">0</span>].x - <span style=\"color: #800080;\">1</span>)) / l2[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].b);\n</span><span style=\"color: #008080;\">154</span>         te = Point(p2[pn2 - <span style=\"color: #800080;\">1</span>].x + <span style=\"color: #800080;\">1</span>, (l2[pn2].c - l2[pn2].a * (p2[pn2 - <span style=\"color: #800080;\">1</span>].x + <span style=\"color: #800080;\">1</span>)) /<span style=\"color: #000000;\"> l2[pn2].b);\n</span><span style=\"color: #008080;\">155</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; pn1; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">156</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">157</span>             ans = min(ans, DisPtoS(p1[i], p2[<span style=\"color: #800080;\">0</span>], ts, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">158</span>             ans = min(ans, DisPtoS(p1[i], p2[pn2 - <span style=\"color: #800080;\">1</span>], te, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">159</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">160</span>         ts = Point(p1[<span style=\"color: #800080;\">0</span>].x - <span style=\"color: #800080;\">1</span>, (l1[<span style=\"color: #800080;\">0</span>].c - l1[<span style=\"color: #800080;\">0</span>].a * (p1[<span style=\"color: #800080;\">0</span>].x - <span style=\"color: #800080;\">1</span>)) / l1[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">].b);\n</span><span style=\"color: #008080;\">161</span>         te = Point(p1[pn1 - <span style=\"color: #800080;\">1</span>].x + <span style=\"color: #800080;\">1</span>, (l1[pn1].c - l1[pn1].a * (p1[pn1 - <span style=\"color: #800080;\">1</span>].x + <span style=\"color: #800080;\">1</span>)) /<span style=\"color: #000000;\"> l1[pn1].b);\n</span><span style=\"color: #008080;\">162</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; pn2; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">163</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">164</span>             ans = min(ans, DisPtoS(p2[i], p1[<span style=\"color: #800080;\">0</span>], ts, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">165</span>             ans = min(ans, DisPtoS(p2[i], p1[pn1 - <span style=\"color: #800080;\">1</span>], te, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\">166</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">167</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%.6f\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans);\n</span><span style=\"color: #008080;\">168</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">169</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">170</span> }</pre>\n</div>"
			}, {
				"title": "UVALive4973 CERC2010A Ardenia",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659143.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:55:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659143.html",
				"description": "<p>\u5206\u7c7b\u8ba8\u8bba\u7684\u60c5\u51b5\u4e0d\u96be\u60f3\uff0c\u96be\u70b9\u5728\u4e8e\u5224\u65ad\u5404\u79cd\u5782\u7ebf\u5782\u8db3\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a\u3002\u8bbebl1\u3001bl2\u4e3a\u4e24\u4e2a\u7ebf\u6bb5\u4e0a\u516c\u5782\u7ebf\u5782\u8db3\u4f4d\u7f6e\u7684\u6bd4\u4f8b\u503c\uff0cx\u4e3ap0\u7684\u516c\u5782\u7ebf\u5782\u8db3X\u5750\u6807\uff0c\u5219\uff1a</p>\n<p>x = (p1.x - p0.x) * bl1 + p0.x</p>\n<p>\u540c\u7406\u53ef\u5f97\u5176\u4ed6\u5750\u6807\u3002\u516c\u5782\u7ebf\u5411\u91cf\u4e0e\u4e24\u7ebf\u6bb5\u5411\u91cf\u70b9\u79ef\u4e3a0\u53ef\u5f97\u4e24\u4e2a\u65b9\u7a0b\uff0c\u6c42\u5f97bl1\u548cbl2\u7686\u57280~1\u8303\u56f4\u5185\u5219\u516c\u5782\u7ebf\u5782\u8db3\u90fd\u5728\u7ebf\u6bb5\u4e0a\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  4</span> typedef <span style=\"color: #0000ff;\">long</span> <span style=\"color: #0000ff;\">long</span><span style=\"color: #000000;\"> LL;\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> d)\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">  8</span>     <span style=\"color: #0000ff;\">if</span>(d &lt; -eps) <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  9</span>     <span style=\"color: #0000ff;\">return</span> d &gt; eps ? <span style=\"color: #800080;\">1</span> : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point3\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #000000;\">    Point3()\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 15</span>         x = y = z = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 16</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 17</span> <span style=\"color: #000000;\">    Point3(LL a, LL b, LL c)\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 19</span>         x = a, y = b, z =<span style=\"color: #000000;\"> c;\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 21</span>     Point3 <span style=\"color: #0000ff;\">operator</span>*(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 22</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 23</span>         <span style=\"color: #0000ff;\">return</span> Point3(y * p.z - z *<span style=\"color: #000000;\"> p.y,\n</span><span style=\"color: #008080;\"> 24</span>                       z * p.x - x *<span style=\"color: #000000;\"> p.z,\n</span><span style=\"color: #008080;\"> 25</span>                       x * p.y - y *<span style=\"color: #000000;\"> p.x);\n</span><span style=\"color: #008080;\"> 26</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 27</span>     Point3 <span style=\"color: #0000ff;\">operator</span>-(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 28</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 29</span>         <span style=\"color: #0000ff;\">return</span> Point3(x - p.x, y - p.y, z -<span style=\"color: #000000;\"> p.z);\n</span><span style=\"color: #008080;\"> 30</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 31</span>     Point3 <span style=\"color: #0000ff;\">operator</span>+(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 32</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 33</span>         <span style=\"color: #0000ff;\">return</span> Point3(x + p.x, y + p.y, z +<span style=\"color: #000000;\"> p.z);\n</span><span style=\"color: #008080;\"> 34</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 35</span>     Point3 <span style=\"color: #0000ff;\">operator</span>-()<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 36</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 37</span>         <span style=\"color: #0000ff;\">return</span> Point3(-x, -y, -<span style=\"color: #000000;\">z);\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 39</span>     LL dot(<span style=\"color: #0000ff;\">const</span> Point3 &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 41</span>         <span style=\"color: #0000ff;\">return</span> x * p.x + y * p.y + z *<span style=\"color: #000000;\"> p.z;\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #000000;\">    LL x, y, z;\n</span><span style=\"color: #008080;\"> 44</span> } p[<span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 45</span> <span style=\"color: #000000;\">LL gcd(LL a, LL b)\n</span><span style=\"color: #008080;\"> 46</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 47</span>     <span style=\"color: #0000ff;\">return</span> b ? gcd(b, a %<span style=\"color: #000000;\"> b) : a;\n</span><span style=\"color: #008080;\"> 48</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 49</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Dis\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 51</span> <span style=\"color: #000000;\">    LL fz, fm;\n</span><span style=\"color: #008080;\"> 52</span>     <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> yf()\n</span><span style=\"color: #008080;\"> 53</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 54</span>         <span style=\"color: #0000ff;\">if</span>(fz == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 55</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 56</span>             fm = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 57</span>             <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 59</span>         LL t =<span style=\"color: #000000;\"> gcd(fz, fm);\n</span><span style=\"color: #008080;\"> 60</span>         fz /=<span style=\"color: #000000;\"> t;\n</span><span style=\"color: #008080;\"> 61</span>         fm /=<span style=\"color: #000000;\"> t;\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 63</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span>&lt;(<span style=\"color: #0000ff;\">const</span> Dis &amp;p)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 64</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 65</span>         <span style=\"color: #0000ff;\">return</span> fz * p.fm &lt; p.fz *<span style=\"color: #000000;\"> fm;\n</span><span style=\"color: #008080;\"> 66</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 67</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #000000;\">inline LL Sqr(LL a)\n</span><span style=\"color: #008080;\"> 69</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 70</span>     <span style=\"color: #0000ff;\">return</span> a *<span style=\"color: #000000;\"> a;\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> Paral(Point3 a, Point3 b, Point3 c, Point3 d)\n</span><span style=\"color: #008080;\"> 73</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 74</span>     Point3 tmp = (b - a) * (d -<span style=\"color: #000000;\"> c);\n</span><span style=\"color: #008080;\"> 75</span>     <span style=\"color: #0000ff;\">return</span> !<span style=\"color: #000000;\">tmp.dot(tmp);\n</span><span style=\"color: #008080;\"> 76</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 77</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> JudgeCZ(Point3 a, Point3 b, Point3 c, Point3 d)\n</span><span style=\"color: #008080;\"> 78</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #000000;\">    LL A1, B1, C1, A2, B2, C2;\n</span><span style=\"color: #008080;\"> 80</span>     A1 = (b - a).dot(b -<span style=\"color: #000000;\"> a);\n</span><span style=\"color: #008080;\"> 81</span>     B1 = -(d - c).dot(b -<span style=\"color: #000000;\"> a);\n</span><span style=\"color: #008080;\"> 82</span>     C1 = -(a - c).dot(b -<span style=\"color: #000000;\"> a);\n</span><span style=\"color: #008080;\"> 83</span>     A2 = (b - a).dot(d -<span style=\"color: #000000;\"> c);\n</span><span style=\"color: #008080;\"> 84</span>     B2 = -(d - c).dot(d -<span style=\"color: #000000;\"> c);\n</span><span style=\"color: #008080;\"> 85</span>     C2 = -(a - c).dot(d -<span style=\"color: #000000;\"> c);\n</span><span style=\"color: #008080;\"> 86</span>     <span style=\"color: #0000ff;\">double</span> bl1 = dcmp(A2 * B1 - A1 * B2) ? ((<span style=\"color: #0000ff;\">double</span>)C2 * B1 - C1 * B2) / (A2 * B1 - A1 * B2) : (A1 ? (<span style=\"color: #0000ff;\">double</span>)C1 / A1 : (A2 ? (<span style=\"color: #0000ff;\">double</span>)C2 / A2 : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 87</span>     <span style=\"color: #0000ff;\">double</span> bl2 = dcmp(B2 * A1 - B1 * A2) ? ((<span style=\"color: #0000ff;\">double</span>)C2 * A1 - C1 * A2) / (B2 * A1 - B1 * A2) : (B1 ? (<span style=\"color: #0000ff;\">double</span>)C1 / B1 : (B2 ? (<span style=\"color: #0000ff;\">double</span>)C2 / B2 : <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">));\n</span><span style=\"color: #008080;\"> 88</span>     <span style=\"color: #0000ff;\">return</span> bl1 &gt; -eps &amp;&amp; bl1 &lt; <span style=\"color: #800080;\">1</span> + eps &amp;&amp; bl2 &gt; -eps &amp;&amp; bl2 &lt; <span style=\"color: #800080;\">1</span> +<span style=\"color: #000000;\"> eps;\n</span><span style=\"color: #008080;\"> 89</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 90</span> <span style=\"color: #000000;\">Dis CalPtoL(Point3 p, Point3 a, Point3 b)\n</span><span style=\"color: #008080;\"> 91</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 92</span>     Point3 t = (a - p) * (b -<span style=\"color: #000000;\"> a);\n</span><span style=\"color: #008080;\"> 93</span> <span style=\"color: #000000;\">    Dis tmp;\n</span><span style=\"color: #008080;\"> 94</span>     tmp.fz =<span style=\"color: #000000;\"> t.dot(t);\n</span><span style=\"color: #008080;\"> 95</span>     tmp.fm = (b - a).dot(b -<span style=\"color: #000000;\"> a);\n</span><span style=\"color: #008080;\"> 96</span> <span style=\"color: #000000;\">    tmp.yf();\n</span><span style=\"color: #008080;\"> 97</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 99</span> <span style=\"color: #000000;\">Dis CalPtoP(Point3 a, Point3 b)\n</span><span style=\"color: #008080;\">100</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">101</span> <span style=\"color: #000000;\">    Dis tmp;\n</span><span style=\"color: #008080;\">102</span>     tmp.fz = (b - a).dot(b -<span style=\"color: #000000;\"> a);\n</span><span style=\"color: #008080;\">103</span>     tmp.fm = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #000000;\">    tmp.yf();\n</span><span style=\"color: #008080;\">105</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tmp;\n</span><span style=\"color: #008080;\">106</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">107</span> <span style=\"color: #000000;\">Dis min(Dis a, Dis b)\n</span><span style=\"color: #008080;\">108</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">109</span>     <span style=\"color: #0000ff;\">return</span> a &lt; b ?<span style=\"color: #000000;\"> a : b;\n</span><span style=\"color: #008080;\">110</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">111</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">112</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">113</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> t, i;\n</span><span style=\"color: #008080;\">114</span> <span style=\"color: #000000;\">    Dis ans;\n</span><span style=\"color: #008080;\">115</span>     <span style=\"color: #0000ff;\">for</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;t); t --<span style=\"color: #000000;\"> ;)\n</span><span style=\"color: #008080;\">116</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">117</span>         ans.fz = <span style=\"color: #800080;\">1</span>, ans.fm = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">118</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; <span style=\"color: #800080;\">4</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">119</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lld%lld%lld</span><span style=\"color: #800000;\">\"</span>, &amp;p[i].x, &amp;p[i].y, &amp;<span style=\"color: #000000;\">p[i].z);\n</span><span style=\"color: #008080;\">120</span>         <span style=\"color: #0000ff;\">if</span>(!Paral(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">2</span>], p[<span style=\"color: #800080;\">3</span>]) &amp;&amp; JudgeCZ(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">2</span>], p[<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\">121</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">122</span>             Point3 t = (p[<span style=\"color: #800080;\">1</span>] - p[<span style=\"color: #800080;\">0</span>]) * (p[<span style=\"color: #800080;\">3</span>] - p[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">123</span>             ans.fz = Sqr((p[<span style=\"color: #800080;\">2</span>] - p[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]).dot(t));\n</span><span style=\"color: #008080;\">124</span>             ans.fm =<span style=\"color: #000000;\"> t.dot(t);\n</span><span style=\"color: #008080;\">125</span> <span style=\"color: #000000;\">            ans.yf();\n</span><span style=\"color: #008080;\">126</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">127</span>         <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\">128</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">129</span>             <span style=\"color: #0000ff;\">if</span>(JudgeCZ(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">2</span>], p[<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\">130</span>                 ans = min(ans, CalPtoL(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">2</span>], p[<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\">131</span>             <span style=\"color: #0000ff;\">if</span>(JudgeCZ(p[<span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">2</span>], p[<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\">132</span>                 ans = min(ans, CalPtoL(p[<span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">2</span>], p[<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\">133</span>             <span style=\"color: #0000ff;\">if</span>(JudgeCZ(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">2</span>], p[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\">134</span>                 ans = min(ans, CalPtoL(p[<span style=\"color: #800080;\">2</span>], p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\">135</span>             <span style=\"color: #0000ff;\">if</span>(JudgeCZ(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">3</span>], p[<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\">136</span>                 ans = min(ans, CalPtoL(p[<span style=\"color: #800080;\">3</span>], p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\">137</span>             ans = min(ans, CalPtoP(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\">138</span>             ans = min(ans, CalPtoP(p[<span style=\"color: #800080;\">0</span>], p[<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\">139</span>             ans = min(ans, CalPtoP(p[<span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\">140</span>             ans = min(ans, CalPtoP(p[<span style=\"color: #800080;\">1</span>], p[<span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">]));\n</span><span style=\"color: #008080;\">141</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">142</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lld %lld\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans.fz, ans.fm);\n</span><span style=\"color: #008080;\">143</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">144</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">145</span> }</pre>\n</div>"
			}, {
				"title": "POJ1030 Rating",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659132.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:46:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659132.html",
				"description": "<p>\u9020\u798f\u540e\u4eba\uff0c\u5fc5\u987b\u7ffb\u8bd1\u4e00\u4e0b\u8fd9\u75db\u82e6\u7684\u63cf\u8ff0\u4e86\u3002</p>\n<p>&nbsp;</p>\n<p>\u6309\u7167AC\u540e\u7684\u7406\u89e3\u6765\u8bf4\uff0c\u9898\u76ee\u7ed9\u51fa\u4e24\u573a\u6bd4\u8d5b\u7f16\u53f71~100\u7684\u961f\u4f0d\u540d\u6b21\u60c5\u51b5\uff08\u6709\u4e9b\u961f\u4f0d\u6ca1\u6709\u51fa\u73b0\uff09\uff0c\u6bcf\u884c\u662f\u5e76\u5217\u540d\u6b21\uff0c\u4e0b\u4e00\u884c\u662f\u524d\u9762\u961f\u4f0d\u4e2a\u6570\u7d2f\u8ba1\u7684\u540d\u6b21\uff0c\u6c42\u4e24\u573a\u6bd4\u8d5b\u7684\u603b\u6392\u540d\u3002</p>\n<p>&nbsp;</p>\n<p>\u5bf9\u4e8e\u4e24\u573a\u90fd\u53c2\u52a0\u7684\u961f\u4f0d\uff0c\u4e24\u573a\u540d\u6b21\u4e4b\u548c\u8f83\u5c0f\u7684\u6392\u524d\u9762\u3002</p>\n<p>\u5bf9\u4e8e\u53ea\u53c2\u52a0\u4e00\u573a\u7684\u961f\u4f0d\uff0c\u5728\u4e0d\u51b2\u7a81\u7684\u60c5\u51b5\u4e0b\u548c\u4e0e\u5176\u8be5\u573a\u540c\u540d\u6b21\u7684\u4e14\u53c2\u52a0\u4e86\u4e24\u573a\u7684\u53e6\u4e00\u652f\u961f\u4f0d\u603b\u6392\u540d\u76f8\u540c\u3002</p>\n<p>\u5bf9\u4e8e\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u7684\u53ea\u53c2\u52a0\u4e00\u573a\u7684\u961f\u4f0d\uff0c\u770b\u662f\u5426\u53ef\u4ee5\u63d2\u5165\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u524d\u9762\u7684\u961f\u4f0d\u90fd\u662f\u8be5\u573a\u5728\u5176\u524d\u9762\u7684\u961f\u4f0d\uff0c\u540e\u9762\u7684\u961f\u4f0d\u4e5f\u90fd\u662f\u8be5\u573a\u5728\u5176\u540e\u9762\u7684\u961f\u4f0d\u3002\u591a\u4e2a\u80fd\u63d2\u5165\u540c\u4f4d\u7f6e\u7684\u961f\u4f0d\uff0c\u6309\u4ed6\u4eec\u5728\u81ea\u5df1\u90a3\u4e00\u573a\u7684\u6392\u540d\u6765\u6bd4\u8f83\u3002</p>\n<p>\u5bf9\u4e8e\u4ee5\u4e0a\u6761\u4ef6\u90fd\u4e0d\u6ee1\u8db3\u7684\u961f\u4f0d\uff0c\u5ffd\u7565\u6389\u3002</p>\n<p>&nbsp;</p>\n<p>\u8f93\u51fa\u7684\u65f6\u5019\u540c\u540d\u6b21\u961f\u4f0d\u8981\u5728\u4e00\u884c\u4e2d\u6309\u961f\u4f0dID\u5347\u5e8f\u8f93\u51fa\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u628a\u53ea\u53c2\u52a0\u4e00\u573a\u7684\u53e6\u4e00\u573a\u540d\u6b21\u8d4b\u503c\u4e3a\u540c\u4e00\u573a\u540c\u540d\u6b21\u961f\u4f0d\u53e6\u4e00\u573a\u7684\u540d\u6b21\uff0c\u4f46\u662f\u4e0d\u76f4\u63a5\u8d4b\u503c\uff0c\u800c\n</span><span style=\"color: #008080;\">  2</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5148\u7f13\u5b58\uff08nex\uff09\uff0c\u5e76\u7edf\u8ba1\u7f13\u5b58\u6b21\u6570\uff08cgcnt\uff09\uff0c\u5982\u679c\u7f13\u5b58\u4ec5\u4e00\u6b21\uff0c\u5373\u6ca1\u6709\u603b\u540d\u6b21\u4e0d\u540c\u961f\u4f0d\u7684\n</span><span style=\"color: #008080;\">  3</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u51b2\u7a81\uff0c\u5219\u771f\u6b63\u628a\u53e6\u4e00\u573a\u8d4b\u503c\u4e3anex\u3002\u4e4b\u540e\u8fdb\u884c\u7b2c\u4e00\u6b21\u6392\u5e8f\u3002\n</span><span style=\"color: #008080;\">  4</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5bf9\u4e8e\u53ea\u53c2\u52a0\u4e00\u573a\u800c\u65e0\u5176\u4ed6\u53c2\u52a0\u4e24\u573a\u7684\u540c\u540d\u6b21\u961f\u4f0d\u65f6\uff0c\u5224\u65ad\u662f\u5426\u53ef\u5408\u7406\u63d2\u5165\uff0c\u8bb0\u5f55\u63d2\u5165\u4f4d\u7f6e\n</span><span style=\"color: #008080;\">  5</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u4e4b\u540e\u8fdb\u884c\u7b2c\u4e8c\u6b21\u6392\u5e8f\uff0c\u9488\u5bf9\u8fd9\u6b21\u5904\u7406\u7684\u8fd9\u7c7b\u961f\u4f0d\u8fdb\u884c\u6bd4\u8f83\u3002\n</span><span style=\"color: #008080;\">  6</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u8f93\u51fa\uff0c\u7ec8\u540d\u6b21\u76f8\u540c\u8005\u8f93\u51fa\u5728\u540c\u4e00\u884c\u3002\n</span><span style=\"color: #008080;\">  7</span> <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">\u5355\u72ec\u5199\u4e86\u5b8c\u6574\u7684\u540d\u6b21\u6bd4\u8f83\u51fd\u6570Compab()\uff0c\u51fd\u6570\u4e2d\u987a\u5e26\u5904\u7406\u4e86\u524d\u4e24\u70b9\u6240\u9700\u6570\u636e\u3002</span>\n<span style=\"color: #008080;\">  8</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  9</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\"> 10</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\"> 11</span> #include&lt;ctype.h&gt;\n<span style=\"color: #008080;\"> 12</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">101</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 13</span> typedef <span style=\"color: #0000ff;\">struct</span>\n<span style=\"color: #008080;\"> 14</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 15</span>     <span style=\"color: #0000ff;\">int</span> rt[<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 16</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> num;\n</span><span style=\"color: #008080;\"> 17</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> nex;\n</span><span style=\"color: #008080;\"> 18</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cgcnt;\n</span><span style=\"color: #008080;\"> 19</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> share;\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #000000;\">} TEAM;\n</span><span style=\"color: #008080;\"> 21</span> <span style=\"color: #000000;\">TEAM te[maxn];\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, m;\n</span><span style=\"color: #008080;\"> 23</span> <span style=\"color: #0000ff;\">char</span> buf[<span style=\"color: #800080;\">10001</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 24</span> <span style=\"color: #0000ff;\">void</span> ReadData(<span style=\"color: #0000ff;\">int</span> n, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ith)\n</span><span style=\"color: #008080;\"> 25</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 26</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, rank, cnt, tnum;\n</span><span style=\"color: #008080;\"> 27</span>     <span style=\"color: #0000ff;\">for</span>(i = rank = <span style=\"color: #800080;\">1</span>; i &lt;= n; ++ i, rank +=<span style=\"color: #000000;\"> cnt)\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 29</span> <span style=\"color: #000000;\">        gets(buf);\n</span><span style=\"color: #008080;\"> 30</span>         <span style=\"color: #0000ff;\">for</span>(j = cnt = <span style=\"color: #800080;\">0</span>; buf[j]; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 31</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 32</span>             <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(isdigit(buf[j]))\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 34</span>                 sscanf(buf + j, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">tnum);\n</span><span style=\"color: #008080;\"> 35</span>                 te[tnum].rt[ith] = rank, ++<span style=\"color: #000000;\"> cnt;\n</span><span style=\"color: #008080;\"> 36</span>                 te[tnum].num =<span style=\"color: #000000;\"> tnum;\n</span><span style=\"color: #008080;\"> 37</span>                 <span style=\"color: #0000ff;\">while</span>(isdigit(buf[j])) ++<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\"> 38</span>                 --<span style=\"color: #000000;\"> j;\n</span><span style=\"color: #008080;\"> 39</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 41</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #0000ff;\">int</span> Compab(TEAM &amp;a, TEAM &amp;<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\"> 44</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 45</span>     <span style=\"color: #0000ff;\">if</span>((a.rt[<span style=\"color: #800080;\">0</span>] || a.rt[<span style=\"color: #800080;\">1</span>]) &amp;&amp; !(b.rt[<span style=\"color: #800080;\">0</span>] || b.rt[<span style=\"color: #800080;\">1</span>])) <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 46</span>     <span style=\"color: #0000ff;\">if</span>(!(a.rt[<span style=\"color: #800080;\">0</span>] || a.rt[<span style=\"color: #800080;\">1</span>]) &amp;&amp; (b.rt[<span style=\"color: #800080;\">0</span>] || b.rt[<span style=\"color: #800080;\">1</span>])) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 47</span>     <span style=\"color: #0000ff;\">if</span>(a.cgcnt == -<span style=\"color: #800080;\">1</span> &amp;&amp; b.cgcnt != -<span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> a.rt[<span style=\"color: #800080;\">0</span>] ? a.rt[<span style=\"color: #800080;\">0</span>] - b.rt[<span style=\"color: #800080;\">0</span>] : a.rt[<span style=\"color: #800080;\">1</span>] - b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 48</span>     <span style=\"color: #0000ff;\">if</span>(b.cgcnt == -<span style=\"color: #800080;\">1</span> &amp;&amp; a.cgcnt != -<span style=\"color: #800080;\">1</span>) <span style=\"color: #0000ff;\">return</span> b.rt[<span style=\"color: #800080;\">0</span>] ? a.rt[<span style=\"color: #800080;\">0</span>] - b.rt[<span style=\"color: #800080;\">0</span>] : a.rt[<span style=\"color: #800080;\">1</span>] - b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 49</span>     <span style=\"color: #0000ff;\">if</span>(a.cgcnt == -<span style=\"color: #800080;\">1</span> &amp;&amp; b.cgcnt == -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 50</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 51</span>         <span style=\"color: #0000ff;\">if</span>(a.share ==<span style=\"color: #000000;\"> b.share)\n</span><span style=\"color: #008080;\"> 52</span>             <span style=\"color: #0000ff;\">return</span> a.rt[<span style=\"color: #800080;\">0</span>] ? a.rt[<span style=\"color: #800080;\">0</span>] - (b.rt[<span style=\"color: #800080;\">0</span>] ? b.rt[<span style=\"color: #800080;\">0</span>] : b.rt[<span style=\"color: #800080;\">1</span>]) : a.rt[<span style=\"color: #800080;\">1</span>] - (b.rt[<span style=\"color: #800080;\">1</span>] ? b.rt[<span style=\"color: #800080;\">1</span>] : b.rt[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\"> 53</span>         <span style=\"color: #0000ff;\">return</span> a.share -<span style=\"color: #000000;\"> b.share;\n</span><span style=\"color: #008080;\"> 54</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 55</span>     <span style=\"color: #0000ff;\">if</span>(a.rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; a.rt[<span style=\"color: #800080;\">1</span>] &amp;&amp; !(b.rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\"> 56</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 57</span>         <span style=\"color: #0000ff;\">if</span>(b.rt[<span style=\"color: #800080;\">0</span>] == a.rt[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 59</span>             <span style=\"color: #0000ff;\">if</span>(!b.nex || b.nex + b.rt[<span style=\"color: #800080;\">0</span>] == a.rt[<span style=\"color: #800080;\">0</span>] + a.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 60</span>                 b.nex = a.rt[<span style=\"color: #800080;\">1</span>], b.share =<span style=\"color: #000000;\"> a.num;\n</span><span style=\"color: #008080;\"> 61</span>             <span style=\"color: #0000ff;\">else</span> ++<span style=\"color: #000000;\"> b.cgcnt;\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 63</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(b.rt[<span style=\"color: #800080;\">1</span>] == a.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 65</span>             <span style=\"color: #0000ff;\">if</span>(!b.nex || b.nex + b.rt[<span style=\"color: #800080;\">1</span>] == a.rt[<span style=\"color: #800080;\">0</span>] + a.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 66</span>                 b.nex = a.rt[<span style=\"color: #800080;\">0</span>], b.share =<span style=\"color: #000000;\"> a.num;\n</span><span style=\"color: #008080;\"> 67</span>             <span style=\"color: #0000ff;\">else</span> ++<span style=\"color: #000000;\"> b.cgcnt;\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 69</span>         <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 71</span>     <span style=\"color: #0000ff;\">if</span>(b.rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; b.rt[<span style=\"color: #800080;\">1</span>] &amp;&amp; !(a.rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; a.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 73</span>         <span style=\"color: #0000ff;\">if</span>(a.rt[<span style=\"color: #800080;\">0</span>] == b.rt[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 75</span>             <span style=\"color: #0000ff;\">if</span>(!a.nex || a.nex + a.rt[<span style=\"color: #800080;\">0</span>] == b.rt[<span style=\"color: #800080;\">0</span>] + b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 76</span>                 a.nex = b.rt[<span style=\"color: #800080;\">1</span>], a.share =<span style=\"color: #000000;\"> b.num;\n</span><span style=\"color: #008080;\"> 77</span>             <span style=\"color: #0000ff;\">else</span> ++<span style=\"color: #000000;\"> a.cgcnt;\n</span><span style=\"color: #008080;\"> 78</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 79</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(a.rt[<span style=\"color: #800080;\">1</span>] == b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 80</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 81</span>             <span style=\"color: #0000ff;\">if</span>(!a.nex || a.nex + a.rt[<span style=\"color: #800080;\">1</span>] == b.rt[<span style=\"color: #800080;\">0</span>] + b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\"> 82</span>                 a.nex = b.rt[<span style=\"color: #800080;\">0</span>], a.share =<span style=\"color: #000000;\"> b.num;\n</span><span style=\"color: #008080;\"> 83</span>             <span style=\"color: #0000ff;\">else</span> ++<span style=\"color: #000000;\"> a.cgcnt;\n</span><span style=\"color: #008080;\"> 84</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 85</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 86</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 87</span>     <span style=\"color: #0000ff;\">if</span>((a.rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; a.rt[<span style=\"color: #800080;\">1</span>]) &amp;&amp; (b.rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\"> 88</span>         <span style=\"color: #0000ff;\">return</span> a.rt[<span style=\"color: #800080;\">0</span>] + a.rt[<span style=\"color: #800080;\">1</span>] - b.rt[<span style=\"color: #800080;\">0</span>] - b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 89</span>     <span style=\"color: #0000ff;\">if</span>((a.rt[<span style=\"color: #800080;\">0</span>] || a.rt[<span style=\"color: #800080;\">1</span>]) &amp;&amp; (b.rt[<span style=\"color: #800080;\">0</span>] || b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\"> 90</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 91</span>         <span style=\"color: #0000ff;\">if</span>(a.rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; b.rt[<span style=\"color: #800080;\">0</span>]) <span style=\"color: #0000ff;\">return</span> a.rt[<span style=\"color: #800080;\">0</span>] - b.rt[<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 92</span>         <span style=\"color: #0000ff;\">if</span>(a.rt[<span style=\"color: #800080;\">1</span>] &amp;&amp; b.rt[<span style=\"color: #800080;\">1</span>]) <span style=\"color: #0000ff;\">return</span> a.rt[<span style=\"color: #800080;\">1</span>] - b.rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 93</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 94</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 95</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 96</span> <span style=\"color: #0000ff;\">int</span> comp(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *a, <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\"> 97</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 98</span>     <span style=\"color: #0000ff;\">return</span> Compab(*(TEAM *)a, *(TEAM *)b) ? Compab(*(TEAM *)a, *(TEAM *)b) : (*(TEAM *)a).num - (*(TEAM *<span style=\"color: #000000;\">)b).num;\n</span><span style=\"color: #008080;\"> 99</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">100</span> <span style=\"color: #0000ff;\">int</span> Judge(TEAM &amp;a, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ith)\n</span><span style=\"color: #008080;\">101</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">102</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j;\n</span><span style=\"color: #008080;\">103</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; te[i].rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; te[i].rt[<span style=\"color: #800080;\">1</span>] &amp;&amp; i &lt; maxn; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">104</span>         <span style=\"color: #0000ff;\">if</span>(te[i].rt[ith] &gt; a.rt[ith]) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">105</span>     j =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">106</span>     <span style=\"color: #0000ff;\">for</span>(; te[i].rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; te[i].rt[<span style=\"color: #800080;\">1</span>] &amp;&amp; i &lt; maxn; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">107</span>         <span style=\"color: #0000ff;\">if</span>(te[i].rt[ith] &lt;= a.rt[ith]) <span style=\"color: #0000ff;\">break</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">108</span>     <span style=\"color: #0000ff;\">if</span>(j &lt; maxn &amp;&amp; (Compab(te[j - <span style=\"color: #800080;\">1</span>], te[j]) == <span style=\"color: #800080;\">0</span> || te[i].rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; te[i].rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]))\n</span><span style=\"color: #008080;\">109</span>         <span style=\"color: #0000ff;\">return</span> a.rt[<span style=\"color: #800080;\">0</span>] = a.rt[<span style=\"color: #800080;\">1</span>] = a.cgcnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">110</span>     <span style=\"color: #0000ff;\">return</span> a.cgcnt = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, j;\n</span><span style=\"color: #008080;\">111</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">112</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">113</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">114</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, k;\n</span><span style=\"color: #008080;\">115</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">\"</span>, &amp;n) !=<span style=\"color: #000000;\"> EOF)\n</span><span style=\"color: #008080;\">116</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">117</span>         memset(te, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(te));\n</span><span style=\"color: #008080;\">118</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; maxn; ++ i) te[i].num =<span style=\"color: #000000;\"> i;\n</span><span style=\"color: #008080;\">119</span>         ReadData(n, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">120</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">m);\n</span><span style=\"color: #008080;\">121</span>         ReadData(m, <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">122</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt; maxn; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">123</span>             <span style=\"color: #0000ff;\">for</span>(j = i + <span style=\"color: #800080;\">1</span>; j &lt; maxn; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">124</span> <span style=\"color: #000000;\">                Compab(te[i], te[j]);\n</span><span style=\"color: #008080;\">125</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt; maxn; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">126</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">127</span>             <span style=\"color: #0000ff;\">if</span>(te[i].cgcnt) te[i].rt[<span style=\"color: #800080;\">0</span>] = te[i].rt[<span style=\"color: #800080;\">1</span>] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">128</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(te[i].nex)\n</span><span style=\"color: #008080;\">129</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">130</span>                 <span style=\"color: #0000ff;\">if</span>(te[i].rt[<span style=\"color: #800080;\">0</span>]) te[i].rt[<span style=\"color: #800080;\">1</span>] =<span style=\"color: #000000;\"> te[i].nex;\n</span><span style=\"color: #008080;\">131</span>                 <span style=\"color: #0000ff;\">else</span> te[i].rt[<span style=\"color: #800080;\">0</span>] =<span style=\"color: #000000;\"> te[i].nex;\n</span><span style=\"color: #008080;\">132</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">133</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">134</span>         qsort(te + <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">100</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(TEAM), comp);\n</span><span style=\"color: #008080;\">135</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; i &lt; maxn; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">136</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">137</span>             <span style=\"color: #0000ff;\">if</span>(te[i].rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; !te[i].rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\">138</span>                 te[i].share = Judge(te[i], <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">139</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(!te[i].rt[<span style=\"color: #800080;\">0</span>] &amp;&amp; te[i].rt[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">])\n</span><span style=\"color: #008080;\">140</span>                 te[i].share = Judge(te[i], <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">141</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">142</span>         qsort(te + <span style=\"color: #800080;\">1</span>, <span style=\"color: #800080;\">100</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(TEAM), comp);\n</span><span style=\"color: #008080;\">143</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">1</span>; (te[i].rt[<span style=\"color: #800080;\">0</span>] || te[i].rt[<span style=\"color: #800080;\">1</span>]) &amp;&amp; i &lt; maxn; i =<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">144</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">145</span>             printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, te[i].num);\n</span><span style=\"color: #008080;\">146</span>             <span style=\"color: #0000ff;\">for</span>(j = i + <span style=\"color: #800080;\">1</span>; (te[j].rt[<span style=\"color: #800080;\">0</span>] || te[j].rt[<span style=\"color: #800080;\">1</span>]) &amp;&amp; !Compab(te[i], te[j]); ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">147</span>                 printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\"> %d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, te[j].num);\n</span><span style=\"color: #008080;\">148</span>             printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">149</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">150</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">151</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">152</span> }</pre>\n</div>"
			}, {
				"title": "COJ1107 UVA12296 Pieces and Discs 2011\u6e56\u5357\u7701\u8d5bH\u9898",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659131.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:44:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659131.html",
				"description": "<p><span>\u628a\u6bcf\u4e2a\u4ea4\u70b9\u6620\u5c04\u4e3a\u5355\u72ec\u7684id\uff0cmap\u53bb\u91cd\u3002\u5bf9\u6bcf\u4e2a\u70b9\u5efa\u7acb\u76f8\u90bb\u70b9\u7684\u94fe\u8868\u3002\u679a\u4e3e\u70b9\uff0c\u7528\u76f8\u90bb\u70b9</span><span>\u94fe\u8868\u627e\u6700\u5de6\u70b9\uff0c</span><span>\u8fed\u4ee3</span><span>\u7ed5\u51fa\u51f8\u5305\uff0c\u679a\u4e3e\u5706\u5224\u51f8\u5305\u4e0e\u5706\u76f8\u4ea4\u3002</span></p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;vector&gt;\n<span style=\"color: #008080;\">  6</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\">  7</span> #include&lt;iostream&gt;\n<span style=\"color: #008080;\">  8</span> #include&lt;map&gt;\n<span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">41</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 11</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxm = maxn *<span style=\"color: #000000;\"> maxn;\n</span><span style=\"color: #008080;\"> 12</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 13</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #0000ff;\">int</span> dcmp(<span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x)\n</span><span style=\"color: #008080;\"> 15</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 16</span>     <span style=\"color: #0000ff;\">if</span>(x &lt; -eps) <span style=\"color: #0000ff;\">return</span> -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 17</span>     <span style=\"color: #0000ff;\">return</span> x &gt;<span style=\"color: #000000;\"> eps;\n</span><span style=\"color: #008080;\"> 18</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #0000ff;\">struct</span><span style=\"color: #000000;\"> Point\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 21</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y, r;\n</span><span style=\"color: #008080;\"> 22</span>     <span style=\"color: #0000ff;\">bool</span> <span style=\"color: #0000ff;\">operator</span> &lt;(<span style=\"color: #0000ff;\">const</span> Point &amp;b)<span style=\"color: #0000ff;\">const</span>\n<span style=\"color: #008080;\"> 23</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 24</span>         <span style=\"color: #0000ff;\">if</span>(dcmp(x - b.x) == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 25</span>             <span style=\"color: #0000ff;\">return</span> y &lt;<span style=\"color: #000000;\"> b.y;\n</span><span style=\"color: #008080;\"> 26</span>         <span style=\"color: #0000ff;\">return</span> x &lt;<span style=\"color: #000000;\"> b.x;\n</span><span style=\"color: #008080;\"> 27</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #000000;\">};\n</span><span style=\"color: #008080;\"> 29</span> typedef <span style=\"color: #0000ff;\">struct</span>\n<span style=\"color: #008080;\"> 30</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 31</span> <span style=\"color: #000000;\">    Point s, e;\n</span><span style=\"color: #008080;\"> 32</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> ang, d;\n</span><span style=\"color: #008080;\"> 33</span> <span style=\"color: #000000;\">} Line;\n</span><span style=\"color: #008080;\"> 34</span> \n<span style=\"color: #008080;\"> 35</span> inline <span style=\"color: #0000ff;\">double</span> det(<span style=\"color: #0000ff;\">double</span> x1, <span style=\"color: #0000ff;\">double</span> y1, <span style=\"color: #0000ff;\">double</span> x2, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> y2)\n</span><span style=\"color: #008080;\"> 36</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 37</span>     <span style=\"color: #0000ff;\">return</span> x1 * y2 - x2 *<span style=\"color: #000000;\"> y1;\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 39</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> cross(Point a, Point b, Point c)\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 41</span>     <span style=\"color: #0000ff;\">return</span> det(b.x - a.x, b.y - a.y, c.x - a.x, c.y -<span style=\"color: #000000;\"> a.y);\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 43</span> Point MakePoint(<span style=\"color: #0000ff;\">double</span> xx, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> yy)\n</span><span style=\"color: #008080;\"> 44</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 45</span> <span style=\"color: #000000;\">    Point res;\n</span><span style=\"color: #008080;\"> 46</span>     res.x = xx, res.y =<span style=\"color: #000000;\"> yy;\n</span><span style=\"color: #008080;\"> 47</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> res;\n</span><span style=\"color: #008080;\"> 48</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 49</span> \n<span style=\"color: #008080;\"> 50</span> \n<span style=\"color: #008080;\"> 51</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, m, L, W, pnum;\n</span><span style=\"color: #008080;\"> 52</span> vector&lt;Point&gt;<span style=\"color: #000000;\"> ap;\n</span><span style=\"color: #008080;\"> 53</span> vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> lp[maxn], adjp[maxm];\n</span><span style=\"color: #008080;\"> 54</span> vector&lt;Line&gt;<span style=\"color: #000000;\"> l;\n</span><span style=\"color: #008080;\"> 55</span> vector&lt;<span style=\"color: #0000ff;\">double</span>&gt;<span style=\"color: #000000;\"> ans[maxn];\n</span><span style=\"color: #008080;\"> 56</span> map&lt;Point, <span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> M;\n</span><span style=\"color: #008080;\"> 57</span> <span style=\"color: #000000;\">Point c[maxn];\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> visp[maxm];\n</span><span style=\"color: #008080;\"> 59</span> \n<span style=\"color: #008080;\"> 60</span> <span style=\"color: #000000;\">Line SetLine(Point a, Point b)\n</span><span style=\"color: #008080;\"> 61</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 62</span> <span style=\"color: #000000;\">    Line l;\n</span><span style=\"color: #008080;\"> 63</span>     l.s =<span style=\"color: #000000;\"> a;\n</span><span style=\"color: #008080;\"> 64</span>     l.e =<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\"> 65</span>     l.ang = atan2(b.y - a.y, b.x -<span style=\"color: #000000;\"> a.x);\n</span><span style=\"color: #008080;\"> 66</span>     <span style=\"color: #0000ff;\">if</span>(dcmp(a.x - b.x)) l.d = (a.x * b.y - b.x * a.y) / fabs(a.x -<span style=\"color: #000000;\"> b.x);\n</span><span style=\"color: #008080;\"> 67</span>     <span style=\"color: #0000ff;\">else</span> l.d = (a.x * b.y - b.x * a.y) / fabs(a.y -<span style=\"color: #000000;\"> b.y);\n</span><span style=\"color: #008080;\"> 68</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> l;\n</span><span style=\"color: #008080;\"> 69</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #0000ff;\">double</span> dotdet(<span style=\"color: #0000ff;\">double</span> x1, <span style=\"color: #0000ff;\">double</span> y1, <span style=\"color: #0000ff;\">double</span> x2, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> y2)\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 72</span>     <span style=\"color: #0000ff;\">return</span> x1 * x2 + y1 *<span style=\"color: #000000;\"> y2;\n</span><span style=\"color: #008080;\"> 73</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> dot(Point a, Point b, Point c)\n</span><span style=\"color: #008080;\"> 75</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">return</span> dotdet(b.x - a.x, b.y - a.y, c.x - a.x, c.y -<span style=\"color: #000000;\"> a.y);\n</span><span style=\"color: #008080;\"> 77</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 78</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> betweenCmp(Point a, Point b, Point c)\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 80</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> dcmp(dot(a, b, c));\n</span><span style=\"color: #008080;\"> 81</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 82</span> <span style=\"color: #0000ff;\">bool</span> segcross(Point a, Point b, Point c, Point d, Point &amp;<span style=\"color: #000000;\">p)\n</span><span style=\"color: #008080;\"> 83</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 84</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> s1, s2, s3, s4;\n</span><span style=\"color: #008080;\"> 85</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> d1, d2, d3, d4;\n</span><span style=\"color: #008080;\"> 86</span>     d1 = dcmp(s1 =<span style=\"color: #000000;\"> cross(a, b, c));\n</span><span style=\"color: #008080;\"> 87</span>     d2 = dcmp(s2 =<span style=\"color: #000000;\"> cross(a, b, d));\n</span><span style=\"color: #008080;\"> 88</span>     d3 = dcmp(s3 =<span style=\"color: #000000;\"> cross(c, d, a));\n</span><span style=\"color: #008080;\"> 89</span>     d4 = dcmp(s4 =<span style=\"color: #000000;\"> cross(c, d, b));\n</span><span style=\"color: #008080;\"> 90</span>     <span style=\"color: #0000ff;\">if</span>((d1 ^ d2) == -<span style=\"color: #800080;\">2</span> &amp;&amp; (d3 ^ d4 == -<span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">))\n</span><span style=\"color: #008080;\"> 91</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 92</span>         p.x = (c.x * s2 - d.x * s1) / (s2 -<span style=\"color: #000000;\"> s1);\n</span><span style=\"color: #008080;\"> 93</span>         p.y = (c.y * s2 - d.y * s1) / (s2 -<span style=\"color: #000000;\"> s1);\n</span><span style=\"color: #008080;\"> 94</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 95</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 96</span>     <span style=\"color: #0000ff;\">if</span>(d1 == <span style=\"color: #800080;\">0</span> &amp;&amp; betweenCmp(c, a, b) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\"> 97</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 98</span>         p =<span style=\"color: #000000;\"> c;\n</span><span style=\"color: #008080;\"> 99</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">100</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">101</span>     <span style=\"color: #0000ff;\">if</span>(d2 == <span style=\"color: #800080;\">0</span> &amp;&amp; betweenCmp(d, a, b) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">102</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">103</span>         p =<span style=\"color: #000000;\"> d;\n</span><span style=\"color: #008080;\">104</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">106</span>     <span style=\"color: #0000ff;\">if</span>(d3 == <span style=\"color: #800080;\">0</span> &amp;&amp; betweenCmp(a, c, d) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">107</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">108</span>         p =<span style=\"color: #000000;\"> a;\n</span><span style=\"color: #008080;\">109</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">110</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">111</span>     <span style=\"color: #0000ff;\">if</span>(d4 == <span style=\"color: #800080;\">0</span> &amp;&amp; betweenCmp(b, c, d) &lt;= <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">112</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">113</span>         p =<span style=\"color: #000000;\"> b;\n</span><span style=\"color: #008080;\">114</span>         <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">115</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">116</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">117</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">118</span> \n<span style=\"color: #008080;\">119</span> <span style=\"color: #0000ff;\">bool</span> CrossPoint(<span style=\"color: #0000ff;\">const</span> Line &amp;la, <span style=\"color: #0000ff;\">const</span> Line &amp;lb, Point &amp;<span style=\"color: #000000;\">p)\n</span><span style=\"color: #008080;\">120</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">121</span>     <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> segcross(la.s, la.e, lb.s, lb.e, p);\n</span><span style=\"color: #008080;\">122</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">123</span> <span style=\"color: #0000ff;\">bool</span> Parallel(<span style=\"color: #0000ff;\">const</span> Line &amp;la, <span style=\"color: #0000ff;\">const</span> Line &amp;<span style=\"color: #000000;\">lb)\n</span><span style=\"color: #008080;\">124</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">125</span>     <span style=\"color: #0000ff;\">return</span> !dcmp( (la.e.x - la.s.x) * (lb.e.y - lb.s.y) -\n<span style=\"color: #008080;\">126</span>                   (la.e.y - la.s.y) * (lb.e.x -<span style=\"color: #000000;\"> lb.s.x) );\n</span><span style=\"color: #008080;\">127</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">128</span> <span style=\"color: #0000ff;\">double</span> PolygonArea(vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> p)\n</span><span style=\"color: #008080;\">129</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">130</span>     <span style=\"color: #0000ff;\">if</span>(p.size() &lt; <span style=\"color: #800080;\">4</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0.0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">131</span>     <span style=\"color: #0000ff;\">double</span> s = ap[p[<span style=\"color: #800080;\">0</span>]].y * (ap[p[p.size() - <span style=\"color: #800080;\">2</span>]].x - ap[p[<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]].x);\n</span><span style=\"color: #008080;\">132</span>     <span style=\"color: #0000ff;\">for</span>(<span style=\"color: #0000ff;\">int</span> i = <span style=\"color: #800080;\">1</span>; i &lt; p.size() - <span style=\"color: #800080;\">1</span>; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">133</span>         s += ap[p[i]].y * (ap[p[i - <span style=\"color: #800080;\">1</span>]].x - ap[p[i + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]].x);\n</span><span style=\"color: #008080;\">134</span>     <span style=\"color: #0000ff;\">return</span> fabs(s * <span style=\"color: #800080;\">0.5</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">135</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">136</span> inline <span style=\"color: #0000ff;\">double</span> CalLen(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\">137</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">138</span>     <span style=\"color: #0000ff;\">return</span> sqrt(a * a + b *<span style=\"color: #000000;\"> b);\n</span><span style=\"color: #008080;\">139</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">140</span> inline <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> CalDis(Point a, Point b)\n</span><span style=\"color: #008080;\">141</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">142</span>     <span style=\"color: #0000ff;\">return</span> CalLen(a.x - b.x, a.y -<span style=\"color: #000000;\"> b.y);\n</span><span style=\"color: #008080;\">143</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">144</span> inline <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> InCir(Point a, Point b)\n</span><span style=\"color: #008080;\">145</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">146</span>     <span style=\"color: #0000ff;\">return</span> dcmp(CalDis(a, b) - b.r) &lt; <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">147</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">148</span> inline <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> OnCir(Point a, Point b)\n</span><span style=\"color: #008080;\">149</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">150</span>     <span style=\"color: #0000ff;\">return</span> dcmp(CalDis(a, b) - b.r) == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">151</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">152</span> <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> DisPtoL(Point p, Point a, Point b)\n</span><span style=\"color: #008080;\">153</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">154</span>     <span style=\"color: #0000ff;\">return</span> fabs(cross(p, a, b)) /<span style=\"color: #000000;\"> CalDis(a, b);\n</span><span style=\"color: #008080;\">155</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">156</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> EqualPoint(Point a, Point b)\n</span><span style=\"color: #008080;\">157</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">158</span>     <span style=\"color: #0000ff;\">return</span> dcmp(a.x - b.x) == <span style=\"color: #800080;\">0</span> &amp;&amp; dcmp(a.y - b.y) == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">159</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">160</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> SegIntersCircle(Point a, Point b, Point c)\n</span><span style=\"color: #008080;\">161</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">162</span>     Point t =<span style=\"color: #000000;\"> c;\n</span><span style=\"color: #008080;\">163</span>     t.x += a.y -<span style=\"color: #000000;\"> b.y;\n</span><span style=\"color: #008080;\">164</span>     t.y += b.x -<span style=\"color: #000000;\"> a.x;\n</span><span style=\"color: #008080;\">165</span>     <span style=\"color: #0000ff;\">return</span> cross(a, c, t) * cross(b, c, t) &lt; eps &amp;&amp;\n<span style=\"color: #008080;\">166</span>            DisPtoL(c, a, b) - c.r &lt; -<span style=\"color: #000000;\">eps;\n</span><span style=\"color: #008080;\">167</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">168</span> <span style=\"color: #0000ff;\">bool</span> JudgePiece(<span style=\"color: #0000ff;\">int</span> i, vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> ps)\n</span><span style=\"color: #008080;\">169</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">170</span>     <span style=\"color: #0000ff;\">int</span> j, k, cnt = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">171</span>     <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">1</span>; j &lt; ps.size(); ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">172</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">173</span>         <span style=\"color: #0000ff;\">if</span>(InCir(ap[ps[j]], c[i])) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">174</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(OnCir(ap[ps[j]], c[i])) ++<span style=\"color: #000000;\"> cnt;\n</span><span style=\"color: #008080;\">175</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">176</span>     <span style=\"color: #0000ff;\">if</span>(cnt &gt;= <span style=\"color: #800080;\">2</span>) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">177</span>     <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">1</span>; j &lt; ps.size(); ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">178</span>         <span style=\"color: #0000ff;\">for</span>(k = j + <span style=\"color: #800080;\">1</span>; k &lt; ps.size(); ++<span style=\"color: #000000;\"> k)\n</span><span style=\"color: #008080;\">179</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">180</span>             <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(SegIntersCircle(ap[ps[j]], ap[ps[k]], c[i]))\n</span><span style=\"color: #008080;\">181</span>                 <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">182</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">183</span>     <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">1</span>; j &lt; ps.size(); ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">184</span>         <span style=\"color: #0000ff;\">if</span>(cross(ap[ps[j - <span style=\"color: #800080;\">1</span>]], ap[ps[j]], c[i]) &lt; -eps) <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">185</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">186</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">187</span> <span style=\"color: #0000ff;\">void</span> FindPiece(<span style=\"color: #0000ff;\">int</span> s0, <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> s1)\n</span><span style=\"color: #008080;\">188</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">189</span>     vector&lt;<span style=\"color: #0000ff;\">int</span>&gt;<span style=\"color: #000000;\"> ps;\n</span><span style=\"color: #008080;\">190</span>     <span style=\"color: #0000ff;\">int</span> i, j, nex = s1, ori =<span style=\"color: #000000;\"> s0;\n</span><span style=\"color: #008080;\">191</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> s;\n</span><span style=\"color: #008080;\">192</span> <span style=\"color: #000000;\">    ps.push_back(s0);\n</span><span style=\"color: #008080;\">193</span> <span style=\"color: #000000;\">    ps.push_back(s1);\n</span><span style=\"color: #008080;\">194</span>     <span style=\"color: #0000ff;\">while</span>(nex !=<span style=\"color: #000000;\"> ori)\n</span><span style=\"color: #008080;\">195</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">196</span>         nex = -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">197</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; adjp[s1].size(); ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">198</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">199</span>             <span style=\"color: #0000ff;\">if</span>(EqualPoint(ap[adjp[s1][i]], ap[s0])) <span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">200</span>             <span style=\"color: #0000ff;\">if</span>(cross(ap[s0], ap[s1], ap[adjp[s1][i]]) &gt; -eps &amp;&amp;\n<span style=\"color: #008080;\">201</span>                     (nex == -<span style=\"color: #800080;\">1</span> || cross(ap[s1], ap[nex], ap[adjp[s1][i]]) &gt;<span style=\"color: #000000;\"> eps))\n</span><span style=\"color: #008080;\">202</span>                 nex =<span style=\"color: #000000;\"> adjp[s1][i];\n</span><span style=\"color: #008080;\">203</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">204</span>         <span style=\"color: #0000ff;\">if</span>(nex != -<span style=\"color: #800080;\">1</span> &amp;&amp; (!visp[nex] || nex ==<span style=\"color: #000000;\"> ori))\n</span><span style=\"color: #008080;\">205</span> <span style=\"color: #000000;\">            ps.push_back(nex);\n</span><span style=\"color: #008080;\">206</span>         <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">207</span>         s0 = s1, s1 =<span style=\"color: #000000;\"> nex;\n</span><span style=\"color: #008080;\">208</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">209</span>     s =<span style=\"color: #000000;\"> PolygonArea(ps);\n</span><span style=\"color: #008080;\">210</span>     <span style=\"color: #0000ff;\">if</span>(!dcmp(s)) <span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">211</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; m; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">212</span>         <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(JudgePiece(i, ps))\n</span><span style=\"color: #008080;\">213</span> <span style=\"color: #000000;\">            ans[i].push_back(s);\n</span><span style=\"color: #008080;\">214</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">215</span> \n<span style=\"color: #008080;\">216</span> <span style=\"color: #0000ff;\">bool</span> cmp(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> &amp;a, <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> &amp;<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\">217</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">218</span>     <span style=\"color: #0000ff;\">if</span>(dcmp(ap[a].x - ap[b].x) == <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\n</span><span style=\"color: #008080;\">219</span>         <span style=\"color: #0000ff;\">return</span> ap[a].y &lt;<span style=\"color: #000000;\"> ap[b].y;\n</span><span style=\"color: #008080;\">220</span>     <span style=\"color: #0000ff;\">return</span> ap[a].x &lt;<span style=\"color: #000000;\"> ap[b].x;\n</span><span style=\"color: #008080;\">221</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">222</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">223</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">224</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i, j, pnum;\n</span><span style=\"color: #008080;\">225</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> sx, sy, ex, ey;\n</span><span style=\"color: #008080;\">226</span>     <span style=\"color: #0000ff;\">while</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d%d%d%d</span><span style=\"color: #800000;\">\"</span>, &amp;n, &amp;m , &amp;L, &amp;W), n | m | L |<span style=\"color: #000000;\"> W)\n</span><span style=\"color: #008080;\">227</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">228</span> <span style=\"color: #000000;\">        l.clear();\n</span><span style=\"color: #008080;\">229</span>         n += <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">230</span> <span style=\"color: #000000;\">        M.clear();\n</span><span style=\"color: #008080;\">231</span> <span style=\"color: #000000;\">        ap.clear();\n</span><span style=\"color: #008080;\">232</span>         memset(visp, <span style=\"color: #800080;\">0</span>, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(visp));\n</span><span style=\"color: #008080;\">233</span>         l.push_back(SetLine(MakePoint(<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span>), MakePoint(L, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)));\n</span><span style=\"color: #008080;\">234</span>         l.push_back(SetLine(MakePoint(L, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">), MakePoint(L, W)));\n</span><span style=\"color: #008080;\">235</span>         l.push_back(SetLine(MakePoint(L, W), MakePoint(<span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, W)));\n</span><span style=\"color: #008080;\">236</span>         l.push_back(SetLine(MakePoint(<span style=\"color: #800080;\">0</span>, W), MakePoint(<span style=\"color: #800080;\">0</span>, <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)));\n</span><span style=\"color: #008080;\">237</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">4</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">238</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">239</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;sx, &amp;sy, &amp;ex, &amp;<span style=\"color: #000000;\">ey);\n</span><span style=\"color: #008080;\">240</span> <span style=\"color: #000000;\">            l.push_back(SetLine(MakePoint(sx, sy), MakePoint(ex, ey)));\n</span><span style=\"color: #008080;\">241</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">242</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; m; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">243</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;c[i].x, &amp;c[i].y, &amp;<span style=\"color: #000000;\">c[i].r), ans[i].clear();\n</span><span style=\"color: #008080;\">244</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i) lp[i].clear();\n</span><span style=\"color: #008080;\">245</span>         <span style=\"color: #0000ff;\">for</span>(i = pnum = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">246</span>             <span style=\"color: #0000ff;\">for</span>(j = i + <span style=\"color: #800080;\">1</span>; j &lt; n; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">247</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">248</span> <span style=\"color: #000000;\">                Point tmp;\n</span><span style=\"color: #008080;\">249</span>                 <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(CrossPoint(l[i], l[j], tmp))\n</span><span style=\"color: #008080;\">250</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">251</span>                     <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">M.count(tmp))\n</span><span style=\"color: #008080;\">252</span>                         adjp[pnum].clear(), M[tmp] = pnum ++<span style=\"color: #000000;\">, ap.push_back(tmp);\n</span><span style=\"color: #008080;\">253</span> <span style=\"color: #000000;\">                    lp[i].push_back(M[tmp]);\n</span><span style=\"color: #008080;\">254</span> <span style=\"color: #000000;\">                    lp[j].push_back(M[tmp]);\n</span><span style=\"color: #008080;\">255</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">256</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">257</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">258</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">259</span> <span style=\"color: #000000;\">            sort(lp[i].begin(), lp[i].end(), cmp);\n</span><span style=\"color: #008080;\">260</span>             <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">1</span>; j &lt; lp[i].size(); ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">261</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">262</span>                 <span style=\"color: #0000ff;\">if</span>(!EqualPoint(ap[lp[i][j]], ap[lp[i][j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]]))\n</span><span style=\"color: #008080;\">263</span> <span style=\"color: #000000;\">                {\n</span><span style=\"color: #008080;\">264</span>                     adjp[lp[i][j]].push_back(lp[i][j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]);\n</span><span style=\"color: #008080;\">265</span>                     adjp[lp[i][j - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">]].push_back(lp[i][j]);\n</span><span style=\"color: #008080;\">266</span> <span style=\"color: #000000;\">                }\n</span><span style=\"color: #008080;\">267</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">268</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">269</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; pnum; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">270</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">271</span>             <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">visp[i])\n</span><span style=\"color: #008080;\">272</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\">273</span>                 visp[i] = <span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">274</span>                 <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt; adjp[i].size(); ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">275</span>                     <span style=\"color: #0000ff;\">if</span>(!<span style=\"color: #000000;\">visp[adjp[i][j]])FindPiece(i, adjp[i][j]);\n</span><span style=\"color: #008080;\">276</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\">277</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">278</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; m; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">279</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\">280</span> <span style=\"color: #000000;\">            sort(ans[i].begin(), ans[i].end());\n</span><span style=\"color: #008080;\">281</span>             printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans[i].size());\n</span><span style=\"color: #008080;\">282</span>             <span style=\"color: #0000ff;\">for</span>(j = <span style=\"color: #800080;\">0</span>; j &lt; ans[i].size(); ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\">283</span>                 printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\"> %.2f</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, ans[i][j]);\n</span><span style=\"color: #008080;\">284</span>             printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">285</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\">286</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">287</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">288</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">289</span> }</pre>\n</div>\n<p>&nbsp;</p>\n<p><span>&nbsp;</span></p>\n<p>&nbsp;</p>\n<p><span>&nbsp;</span></p>"
			}, {
				"title": "HDU4116 Fruit Ninja (2011 Asia ChengDu Regional Contest)",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659128.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:42:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659128.html",
				"description": "<p>\u88ab\u8fd9\u9053\u9898\u73a9\u6b7b\u4e86\u8981\u3002\u3002\u3002</p>\n<p>\u5bf9\u6bcf\u4e2a\u5706\u679a\u4e3e\u5f97\u5230\u548c\u5176\u4ed6\u5706\u5207\u7ebf\u659c\u7387\uff0c\u4e24\u4e2a\u5207\u7ebf\u4e4b\u95f4\u7684\u659c\u7387\u8303\u56f4\u662f\u53ef\u4ee5\u7ecf\u8fc7\u7684\u3002\u5f97\u5230\u7684\u8bb8\u591a\u659c\u7387\u8303\u56f4\u53ef\u4ee5\u8f6c\u5316\u4e3a\u533a\u95f4\u8986\u76d6\uff0cnlogn\u6392\u5e8f\u5f97\u89e3\uff0c\u603b\u590d\u6742\u5ea6O(n^2logn)\u3002</p>\n<p>\u8981\u7279\u522b\u5904\u7406\u5706\u76f8\u4ea4\u3001\u5305\u542b\u7684\u60c5\u51b5\u3002</p>\n<p>\u5207\u7ebf\u7684\u659c\u7387\u8303\u56f4\uff0c\u662f\u6309&nbsp;-pi~pi&nbsp;\u7b97\u7684\uff0c\u7b97\u6655\u4e86\u5f88\u4e45\u3002\u3002</p>\n<p>\u7136\u540e\u5c31\u662f\u6050\u6016\u7684TLE\uff0c\u6700\u540e\u53d1\u73b0\u4ea4C++TLE\uff0c\u4ea4G++\u5c31\u8fc7\u4e86\uff0c\u989d\u6ef4\u4e2a\u795e\uff0c\u7d2f\u6b7b\u4e86\uff0c\u8c03\u4e00\u665a\u4e0a\u3002\u3002</p>\n<p>\u8fd8\u6709\uff0c\u8fd9\u9898\u7528sort\u6bd4\u7528qsort\u5feb\u4e865s\u3002\u3002\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\">  1</span> #include&lt;stdio.h&gt;\n<span style=\"color: #008080;\">  2</span> #include&lt;<span style=\"color: #0000ff;\">string</span>.h&gt;\n<span style=\"color: #008080;\">  3</span> #include&lt;stdlib.h&gt;\n<span style=\"color: #008080;\">  4</span> #include&lt;math.h&gt;\n<span style=\"color: #008080;\">  5</span> #include&lt;algorithm&gt;\n<span style=\"color: #008080;\">  6</span> #include&lt;iostream&gt;\n<span style=\"color: #008080;\">  7</span> <span style=\"color: #0000ff;\">using</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> std;\n</span><span style=\"color: #008080;\">  8</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">int</span> maxn = <span style=\"color: #800080;\">1</span> &lt;&lt; <span style=\"color: #800080;\">10</span> | <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">  9</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> pi = acos(-<span style=\"color: #800080;\">1.0</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 10</span> <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">double</span> eps = 1e-<span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 11</span> typedef <span style=\"color: #0000ff;\">struct</span>\n<span style=\"color: #008080;\"> 12</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 13</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> x, y, r;\n</span><span style=\"color: #008080;\"> 14</span> <span style=\"color: #000000;\">} Cir;\n</span><span style=\"color: #008080;\"> 15</span> typedef <span style=\"color: #0000ff;\">struct</span>\n<span style=\"color: #008080;\"> 16</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 17</span>     <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> site;\n</span><span style=\"color: #008080;\"> 18</span>     <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> se;\n</span><span style=\"color: #008080;\"> 19</span> <span style=\"color: #000000;\">} Seg;\n</span><span style=\"color: #008080;\"> 20</span> <span style=\"color: #000000;\">Cir ra[maxn];\n</span><span style=\"color: #008080;\"> 21</span> Seg s[maxn &lt;&lt; <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">];\n</span><span style=\"color: #008080;\"> 22</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> n, stp, ans;\n</span><span style=\"color: #008080;\"> 23</span> inline <span style=\"color: #0000ff;\">double</span> max(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 24</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 25</span>     <span style=\"color: #0000ff;\">return</span> a &gt; b ?<span style=\"color: #000000;\"> a : b;\n</span><span style=\"color: #008080;\"> 26</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 27</span> inline <span style=\"color: #0000ff;\">double</span> min(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 28</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 29</span>     <span style=\"color: #0000ff;\">return</span> a &lt; b ?<span style=\"color: #000000;\"> a : b;\n</span><span style=\"color: #008080;\"> 30</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 31</span> inline <span style=\"color: #0000ff;\">double</span> CalDis(<span style=\"color: #0000ff;\">double</span> a, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> b)\n</span><span style=\"color: #008080;\"> 32</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 33</span>     <span style=\"color: #0000ff;\">return</span> sqrt(a * a + b *<span style=\"color: #000000;\"> b);\n</span><span style=\"color: #008080;\"> 34</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 35</span> inline <span style=\"color: #0000ff;\">bool</span> IinJ(<span style=\"color: #0000ff;\">int</span> i, <span style=\"color: #0000ff;\">int</span> j, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> ijdis)\n</span><span style=\"color: #008080;\"> 36</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 37</span>     <span style=\"color: #0000ff;\">return</span> ra[i].r + ijdis &lt;=<span style=\"color: #000000;\"> ra[j].r;\n</span><span style=\"color: #008080;\"> 38</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 39</span> inline <span style=\"color: #0000ff;\">bool</span> IcutJ(<span style=\"color: #0000ff;\">int</span> i, <span style=\"color: #0000ff;\">int</span> j, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> ijdis)\n</span><span style=\"color: #008080;\"> 40</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 41</span>     <span style=\"color: #0000ff;\">return</span> ijdis &lt;= ra[i].r +<span style=\"color: #000000;\"> ra[j].r;\n</span><span style=\"color: #008080;\"> 42</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 43</span> <span style=\"color: #0000ff;\">void</span> AddSeg(<span style=\"color: #0000ff;\">double</span> start, <span style=\"color: #0000ff;\">double</span><span style=\"color: #000000;\"> end)\n</span><span style=\"color: #008080;\"> 44</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 45</span>     <span style=\"color: #0000ff;\">if</span>(start + pi &lt; -eps) start += <span style=\"color: #800080;\">2</span> *<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\"> 46</span>     <span style=\"color: #0000ff;\">if</span>(start - pi &gt; -eps) start -= <span style=\"color: #800080;\">2</span> *<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\"> 47</span>     <span style=\"color: #0000ff;\">if</span>(end + pi &lt; -eps) end += <span style=\"color: #800080;\">2</span> *<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\"> 48</span>     <span style=\"color: #0000ff;\">if</span>(end - pi &gt; -eps) end -= <span style=\"color: #800080;\">2</span> *<span style=\"color: #000000;\"> pi;\n</span><span style=\"color: #008080;\"> 49</span>     <span style=\"color: #0000ff;\">if</span>(start - end &gt; eps) AddSeg(start, pi - eps * <span style=\"color: #800080;\">2</span>), AddSeg(-<span style=\"color: #000000;\">pi, end);\n</span><span style=\"color: #008080;\"> 50</span>     <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\"> 51</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 52</span>         s[stp].site = start, s[stp].se = <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 53</span>         ++<span style=\"color: #000000;\"> stp;\n</span><span style=\"color: #008080;\"> 54</span>         s[stp].site = end, s[stp].se = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 55</span>         ++<span style=\"color: #000000;\"> stp;\n</span><span style=\"color: #008080;\"> 56</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 57</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 58</span> <span style=\"color: #0000ff;\">int</span> comp(<span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *a, <span style=\"color: #0000ff;\">const</span> <span style=\"color: #0000ff;\">void</span> *<span style=\"color: #000000;\">b)\n</span><span style=\"color: #008080;\"> 59</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 60</span>     <span style=\"color: #0000ff;\">if</span>(fabs((*(Seg *)a).site - (*(Seg *)b).site) &lt;<span style=\"color: #000000;\"> eps)\n</span><span style=\"color: #008080;\"> 61</span>         <span style=\"color: #0000ff;\">return</span> -((*(Seg *)a).se &amp;&amp; !(*(Seg *<span style=\"color: #000000;\">)b).se);\n</span><span style=\"color: #008080;\"> 62</span>     <span style=\"color: #0000ff;\">return</span> (*(Seg *)a).site &gt; (*(Seg *)b).site ? <span style=\"color: #800080;\">1</span> : -<span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 63</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\"> 64</span> <span style=\"color: #008000;\">/*</span>\n<span style=\"color: #008080;\"> 65</span> <span style=\"color: #008000;\">//sort\n</span><span style=\"color: #008080;\"> 66</span> <span style=\"color: #008000;\">bool comp(const Seg &amp;a, const Seg &amp;b)\n</span><span style=\"color: #008080;\"> 67</span> <span style=\"color: #008000;\">{\n</span><span style=\"color: #008080;\"> 68</span> <span style=\"color: #008000;\">      if(fabs(a.site - b.site) &lt; eps)\n</span><span style=\"color: #008080;\"> 69</span> <span style=\"color: #008000;\">            return a.se &amp;&amp; !b.se;\n</span><span style=\"color: #008080;\"> 70</span> <span style=\"color: #008000;\">      return a.site &lt; b.site;\n</span><span style=\"color: #008080;\"> 71</span> <span style=\"color: #008000;\">}\n</span><span style=\"color: #008080;\"> 72</span> <span style=\"color: #008000;\">*/</span>\n<span style=\"color: #008080;\"> 73</span> <span style=\"color: #0000ff;\">void</span> Cal(<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 74</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 75</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> sum, j;\n</span><span style=\"color: #008080;\"> 76</span>     <span style=\"color: #0000ff;\">for</span>(j = sum = stp = <span style=\"color: #800080;\">0</span>; j &lt; n; ++<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 77</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 78</span>         <span style=\"color: #0000ff;\">if</span>(i !=<span style=\"color: #000000;\"> j)\n</span><span style=\"color: #008080;\"> 79</span> <span style=\"color: #000000;\">        {\n</span><span style=\"color: #008080;\"> 80</span>             <span style=\"color: #0000ff;\">double</span> ijdis = CalDis(ra[i].x - ra[j].x, ra[i].y -<span style=\"color: #000000;\"> ra[j].y);\n</span><span style=\"color: #008080;\"> 81</span>             <span style=\"color: #0000ff;\">double</span> xlij = atan2(ra[i].y - ra[j].y, ra[i].x -<span style=\"color: #000000;\"> ra[j].x);\n</span><span style=\"color: #008080;\"> 82</span>             <span style=\"color: #0000ff;\">double</span> xlji = atan2(ra[j].y - ra[i].y, ra[j].x -<span style=\"color: #000000;\"> ra[i].x);\n</span><span style=\"color: #008080;\"> 83</span>             <span style=\"color: #0000ff;\">double</span> asipj = asin((ra[i].r + ra[j].r) /<span style=\"color: #000000;\"> ijdis);\n</span><span style=\"color: #008080;\"> 84</span>             <span style=\"color: #0000ff;\">double</span> asimj = asin((ra[i].r - ra[j].r) /<span style=\"color: #000000;\"> ijdis);\n</span><span style=\"color: #008080;\"> 85</span>             <span style=\"color: #0000ff;\">if</span>(IinJ(i, j, ijdis)) ++<span style=\"color: #000000;\"> sum;\n</span><span style=\"color: #008080;\"> 86</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(IinJ(j, i, ijdis));\n</span><span style=\"color: #008080;\"> 87</span>             <span style=\"color: #0000ff;\">else</span> <span style=\"color: #0000ff;\">if</span>(IcutJ(i, j, ijdis)) AddSeg(xlij + asimj, xlji -<span style=\"color: #000000;\"> asimj);\n</span><span style=\"color: #008080;\"> 88</span>             <span style=\"color: #0000ff;\">else</span>\n<span style=\"color: #008080;\"> 89</span> <span style=\"color: #000000;\">            {\n</span><span style=\"color: #008080;\"> 90</span>                 AddSeg(xlji - asipj, xlji -<span style=\"color: #000000;\"> asimj);\n</span><span style=\"color: #008080;\"> 91</span>                 AddSeg(xlij + asimj, xlij +<span style=\"color: #000000;\"> asipj);\n</span><span style=\"color: #008080;\"> 92</span> <span style=\"color: #000000;\">            }\n</span><span style=\"color: #008080;\"> 93</span> <span style=\"color: #000000;\">        }\n</span><span style=\"color: #008080;\"> 94</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\"> 95</span>     qsort(s, stp, <span style=\"color: #0000ff;\">sizeof</span><span style=\"color: #000000;\">(Seg), comp);\n</span><span style=\"color: #008080;\"> 96</span>     <span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">  sort(s, s + stp, comp);</span>\n<span style=\"color: #008080;\"> 97</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; stp; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 98</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 99</span>         <span style=\"color: #0000ff;\">if</span>(s[i].se) ++<span style=\"color: #000000;\"> sum;\n</span><span style=\"color: #008080;\">100</span>         <span style=\"color: #0000ff;\">else</span> --<span style=\"color: #000000;\"> sum;\n</span><span style=\"color: #008080;\">101</span>         <span style=\"color: #0000ff;\">if</span>(sum &gt; ans) ans =<span style=\"color: #000000;\"> sum;\n</span><span style=\"color: #008080;\">102</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">103</span>     <span style=\"color: #0000ff;\">if</span>(sum &gt; ans) ans =<span style=\"color: #000000;\"> sum;\n</span><span style=\"color: #008080;\">104</span> <span style=\"color: #000000;\">}\n</span><span style=\"color: #008080;\">105</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main()\n</span><span style=\"color: #008080;\">106</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\">107</span>     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> t, ca, i;\n</span><span style=\"color: #008080;\">108</span>     <span style=\"color: #0000ff;\">for</span>(scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;t), ca = <span style=\"color: #800080;\">1</span>; ca &lt;= t; ++<span style=\"color: #000000;\"> ca)\n</span><span style=\"color: #008080;\">109</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\">110</span>         scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d</span><span style=\"color: #800000;\">\"</span>, &amp;<span style=\"color: #000000;\">n);\n</span><span style=\"color: #008080;\">111</span>         <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\">112</span>             scanf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%lf%lf%lf</span><span style=\"color: #800000;\">\"</span>, &amp;ra[i].x, &amp;ra[i].y, &amp;<span style=\"color: #000000;\">ra[i].r);\n</span><span style=\"color: #008080;\">113</span>         <span style=\"color: #0000ff;\">for</span>(i = ans = <span style=\"color: #800080;\">0</span>; i &lt; n; ++<span style=\"color: #000000;\"> i) Cal(i);\n</span><span style=\"color: #008080;\">114</span>         printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Case #%d: %d\\n</span><span style=\"color: #800000;\">\"</span>, ca, ans + <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">115</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">116</span>     <span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\">117</span> }</pre>\n</div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<div>\n<div>&nbsp;</div>\n</div>"
			}, {
				"title": "2012CSU_ACM\u96c6\u8bad\u4e2d\u671f\u68c0\u6d4b \u7b80\u8981\u9898\u89e3",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659121.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:40:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659121.html",
				"description": "<p>A\uff1a\u6c42\u9006\u5143</p>\n<p>\u5413\u552c\u4eba\u7684\uff0c\u679a\u4e3e\u4e00\u4e0b\uff0c\u9632\u8d85long&nbsp;long\u5373\u53ef\u3002</p>\n<p>B\uff1a\u5904\u7406RankList</p>\n<p>\u8ba4\u771f\u6a21\u62df\u3002</p>\n<p>C\uff1a\u5f00\u673a</p>\n<p>\u8d2a\u5fc3\u82b1\u65f6\u95f4\u957f\u7684\u673a\u5668\u3002</p>\n<p>D\uff1a\u88c5\u7bb1\u95ee\u98982</p>\n<p>DFS\u4f1a\u6bd4\u8f83\u7e41\u7410\uff0c\u5176\u5b9e\u662f\u4e2a\u4e09\u7ef4\u7684\u5e76\u67e5\u96c6\uff0c\u8bb0\u5f55\u8282\u70b9\u4e0e\u7236\u8282\u70b9\u5750\u6807\u5dee\u3002</p>\n<p>E\uff1a\u5355\u884c\u9053</p>\n<p>\u6b63\u5411\u5efa0\u8fb9\uff0c\u53cd\u5411\u5efa1\u8fb9\uff0c\u505a\u6700\u77ed\u8def\u3002</p>\n<p>F\uff1a\u91cd\u542f</p>\n<p>\u533a\u95f4DP\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u6b21\u91cd\u542f\u7684\u673a\u5668\u4e00\u5b9a\u662f\u5f53\u524d\u4e24\u7aef\u673a\u5668\u7684\u5176\u4e2d\u4e00\u4e2a\u3002</p>\n<p>G\uff1a\u7ef4\u62a4\u5e8f\u5217</p>\n<p>\u7ebf\u6bb5\u6811\u3002\u8bb0\u5f55\u51680\u533a\u95f4\uff0c\u53ef\u9632\u6b62\u66f4\u65b0\u5230\u5e95\u5c42\u3002</p>\n<p>H\uff1a\u8df3\u8df3</p>\n<p>BFS\uff0c\u9047\u5230\u53ef\u8df3\u6570\u5b57\uff0c\u5c06\u6240\u6709\u76f8\u540c\u6570\u5b57\u5165\u961f\u3002</p>"
			}, {
				"title": "\u5173\u4e8eACM\uff0c2010\u5f00\u59cb\u7684\u4e00\u4e9b\u6545\u4e8b",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659120.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:39:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659120.html",
				"description": "<p><strong><span>2010</span><span>\u90a3\u4e9b\u4e8b</span></strong></p>\n<p><span>2010</span><span>\u5e74\u662f\u4e2d\u5357</span><span>ACM</span><span>\u6709\u53f2\u4ee5\u6765\u6700\u8f89\u714c\u7684\u4e00\u5e74\uff0c\u7701\u8d5b\u7684\u51a0\u519b\u961f\uff0c\u5dee\u4e00\u9053\u9898</span><span>Final</span><span>\u7684\u798f\u5dde\u8d5b\u533a\uff0c\u4f34\u968f\u7740</span><span>07</span><span>\u7ea7\u4e00\u4ee3\u5927\u795e\u5d1b\u8d77\u4e0e\u6d88\u5931\uff0c\u548c\u6211\u4eec</span><span>08</span><span>\u7ea7\u8fd9\u4e00\u4ee3\u9ed8\u9ed8\u65e0\u95fb\u7684\u6210\u957f\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u5927\u4e00\u6ca1\u4eba\u544a\u8bc9\u6211</span><span>ACM</span><span>\u662f\u4ec0\u4e48\uff0c\u5927\u4e8c\u53c2\u52a0\u6821\u8d5b</span><span>0</span><span>\u9898\u6536\u573a\uff0c\u8fd8\u628a\u7ec4\u961f\u6765\u5e2e\u5fd9\u7ffb\u8bd1\u7684\u5973\u751f\u6025\u54ed\u4e86\u3002</span><span>2010</span><span>\u6691\u671f\u96c6\u8bad\uff0c\u4e5f\u7b97\u662f\u6709\u5c39</span><span>zw</span><span>\u5927\u54e5\u7684\u5e2e\u5fd9\u624d\u7b97\u662f\u8fdb\u4e86\u96c6\u8bad\u961f\u3002\u90a3\u4e2a\u65f6\u5019\u4e5f\u6ca1\u4eba\u544a\u8bc9\u6211\u8be5\u600e\u4e48\u5165\u95e8\uff0c\u4ec0\u4e48\u662f</span><span>EOF</span><span>\uff0c\u4ec0\u4e48\u662f</span><span>__int64</span><span>\u3002\u6216\u8bb8\u5f53\u65f6\u8981\u662f\u80fd\u767e\u5ea6\u5230\u5218\u6c5d\u4f73\u5927\u795e\u7684\u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\uff08\u767d\u4e66\uff09\uff0c\u5386\u53f2\u4e5f\u4f1a\u4e0d\u4e00\u6837\u5427\u3002\u505a\u4e86\u4e00\u4e2a\u6708\u5751\u7239\u7684\u300a\u7a0b\u5e8f\u8bbe\u8ba1\u5bfc\u5f15\u53ca\u5728\u7ebf\u5b9e\u8df5\u300b\uff0c\u96c6\u8bad\u7ed3\u675f\u4e86\u8fd8\u4e0d\u6653\u5f97\u4e8c\u53c9\u6811\u662f\u4ec0\u4e48\u3002\u81ea\u52a8\u5316\u4eba\u7684\u7ea0\u7ed3\u554a\uff0c\u6ca1\u6709\u6570\u636e\u7ed3\u6784\u8bfe\u4e5f\u6ca1\u6709\u7b97\u6cd5\u8bfe\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u7701\u8d5b\u6ca1\u6709\u673a\u4f1a\uff0c\u533a\u57df\u8d5b\u6ca1\u6709\u673a\u4f1a\uff0c</span><span>08</span><span>\u7ea7\u4eba\u624d\u6d4e\u6d4e\uff0c\u6392\u4e0d\u4e0a\u6211\u3002\u7701\u8d5b\u592a\u665a\uff0c\u7f57\u6559\u4e3b\uff0c\u5c39\u5927\u54e5\u90fd\u6ca1\u6709\u8d76\u4e0a\u4fdd\u7814\u65f6\u95f4\uff0c\u5d14\u5927\u54e5\u53bb\u534e\u79d1\uff0c\u9ec4\u5927\u54e5\u53bb\u534e\u5357\u7406\u5de5\uff0c\u4f55\u5927\u54e5\u9000\u5f79\uff0c\u5b59\u8001\u5927\u548c\u59da\u8001\u5927\u8fc7\u4e86\u5e74\u9f84&hellip;&hellip;\u4e2d\u5357</span><span>ACM</span><span>\u5d1b\u8d77\u7684\u4e00\u4ee3\u540c\u4e00\u65f6\u95f4\u6d88\u5931\uff0c\u800c\u53c8\u4e00\u4e2a\u4ee4\u4eba\u60ca\u5947\uff0c\u4e14\u4f7f\u6211\u4e0d\u514d\u6709\u70b9\u6124\u6168\u7684\u662f\uff0c</span><span>08</span><span>\u7ea7\u5728</span><span>2010</span><span>\u5f97\u5230\u53c2\u52a0\u7701\u8d5b\u533a\u8d5b\u953b\u70bc\u673a\u4f1a\u7684\u597d\u51e0\u4f4d\uff0c\u4e5f\u79bb\u5f00\u4e86\u6821\u961f\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u4e0d\u80fd\u8bf4</span><span>08</span><span>\u7ea7\u662f\u4e2d\u5357</span><span>ACM</span><span>\u57ae\u6389\u7684\u4e00\u4ee3\uff0c\u56e0\u4e3a\u8fd8\u6709\u5f88\u591a\u9ad8\u624b\uff0c\u4f46</span><span>08</span><span>\u7ea7\u771f\u7684\u662f\u57ae\u6389\u7684\u4e00\u4ee3\uff0c\u56e0\u4e3a\u53ea\u5269\u4e0b\u4e86\u6211\u4eec\u5c11\u6570\u51e0\u4e2a\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><strong><span>\u6211\u4e0e\u534f\u4f1a</span></strong></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u62ff\u5230</span><span>ACM</span><span>\u534f\u4f1a\u5370\u7ae0\u7684\u65f6\u5019\uff0c\u624d\u77e5\u9053\u534f\u4f1a\u5df2\u7ecf\u540d\u5b58\u5b9e\u4ea1\u4e86\u3002\u5c31\u8fd9\u6837\uff0c</span><span>2011</span><span>\u5e74\uff0c\u80a9\u8d1f\u8d77\u4e86\u65b0\u624b\u4e0e\u8001\u4eba\u7684\u53cc\u91cd\u7ea0\u7ed3\u8eab\u4efd\uff0c\u53d1\u5c55\u534f\u4f1a\uff0c\u5e26\u65b0\u4eba\u3002\u65b0\u65f6\u671f\u7684</span><span>ACM</span><span>\u5de5\u4f5c\u843d\u5728\u4e86</span><span>08</span><span>\u7ea7\u5269\u4e0b\u7684\u51e0\u4e2a\u4eba\u8eab\u4e0a\uff0c\u800c\u6211\u8fd8\u6ca1\u53c2\u52a0\u8fc7\u7701\u8d5b\u6216\u533a\u57df\u8d5b\uff0c\u751a\u81f3\u6e58\u6f6d\u5e02\u8d5b\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>10</span><span>\u5e74\u5e95\u8fd8\u6709\u6253\u7b97\u8003</span><span>G</span><span>\u51fa\u56fd\u7684\uff0c\u547d\u8fd0\u5f04\u4eba\uff0c\u6070\u9022\u8eab\u4efd\u8bc1\u8fc7\u671f\u88ab\u6321\u5728\u8003\u573a\u4e4b\u5916\u3002\u6700\u540e\u4e00\u6b21\u8001</span><span>GRE</span><span>\uff0c\u534a\u5e74\u4e00\u6b21\u7684</span><span>GRE</span><span>\u3002\u6700\u7ec8\u51b3\u5b9a\u641e</span><span>ACM</span><span>\u5427\uff0c\u7701\u8d5b\u62ff\u4e2a\u4e00\u7b49\u5956\u4fdd\u4e86\u7814\u8fd8\u80fd\u518d\u594b\u6597\u4e00\u5e74\uff0c\u4e0d\u80fd\u8ba9\u4e2d\u5357\u7684</span><span>ACM</span><span>\u5728\u6211\u4eec\u8fd9\u4e00\u4ee3\u57ae\u6389\uff0c\u4ed6\u4eec\u8d70\u4e86\uff0c\u6211\u7559\u4e0b\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u548c\u6bcf\u5e74\u96c6\u8bad\u4e00\u6837\uff0c</span><span>2011</span><span>\u7684\u96c6\u8bad\u4f9d\u7136\u4eba\u624d\u8f88\u51fa\uff0c\u4f46\u662f</span><span>11</span><span>\u5e74\u7684\u6bd4\u8d5b\uff0c\u8fd8\u4e0d\u5bb9\u4e50\u89c2\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u4f9d\u7136\u547d\u8fd0\u5f04\u4eba\uff0c</span><span>11</span><span>\u5e74\u662f\u4e2d\u5357</span><span>ACM</span><span>\u4f4e\u8ff7\u7684\u4e00\u5e74\uff0c\u7701\u8d5b\u53ea\u6709\u4e00\u4e2a\u4e00\u7b49\u5956\uff0c\u533a\u57df\u8d5b\u65e0\u91d1\u65e0\u94f6\uff0c\u6211\u4e5f\u8981\u53bb\u8003\u7814\u4e86\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><strong><span>\u8003\u7814</span></strong></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u8003\u54ea\u91cc\uff1f\u4e24\u4e2a\u591a\u6708\u7684\u65f6\u95f4\u3002\u4ece\u5927\u8fde\u8d5b\u56de\u5bb6\u4e86\u4e00\u8d9f\uff0c\u5b89\u9759\u4e86\u51e0\u5929\u3002\u8003\u7814\u662f\u4e2a\u964c\u751f\u7684\u4e1c\u897f\uff0c\u90a3\u4e00\u523b\u6211\u8fd8\u4e0d\u77e5\u9053\u8003\u7814\u7684\u82f1\u8bed\u4e0d\u8003\u542c\u529b\u3002\u56de\u60f3\u8d77\u9ad8\u4e2d\u65f6\u4ee3\u7684\u68a6\u60f3&mdash;&mdash;\u4e0a\u6d77\u4ea4\u5927\u3002\u8981\u4e0d\u8981\u8bd5\u8bd5\uff1f\u90a3\u51e0\u5929\u8fd8\u548c\u658c\u4ed4\u804a\u4e86\u4e00\u4e9b\uff0c\u4ed6\u535a\u5ba2\u7684\u90a3\u53e5&ldquo;\u6211\u8981\u628a\u4e2d\u5357</span><span>ACM</span><span>\u5e26\u8fdb\u4e16\u754c\u603b\u51b3\u8d5b&rdquo;\u6b63\u662f\u6211\u4e00\u5e74\u524d\u7684\u68a6\u3002</span><span>11</span><span>\u5e74\u8d5b\u540e\uff0c</span><span>08</span><span>\u7ea7\u53ea\u5269\u4e0b\u6211\u4e86\uff0c\u6211\u4eec\u8981\u50cf</span><span>07</span><span>\u7ea7\u90a3\u6837\u8d70\u5f97\u5e72\u51c0\u4e48\uff1f\u534a\u5e74\u591a\u6765\u7684\u52aa\u529b\u4f7f</span><span>ACM</span><span>\u534f\u4f1a\u6062\u590d\u4e86\u751f\u673a\uff0c\u65e0\u8bba\u662f\u5e73\u65f6\u7684\u5ba3\u4f20\u8fd8\u662f\u6691\u5047\u7684\u96c6\u8bad\uff0c\u6211\u90fd\u52aa\u529b\u8ba9\u65b0\u7684\u961f\u5458\u4e0d\u518d\u6709\u6211\u5f53\u521d\u7684\u5404\u79cd\u9057\u61be\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u6700\u540e\u6211\u8fd8\u662f\u62a5\u8003\u4e86\u672c\u6821\uff0c\u53ea\u662f\u6362\u4e86\u4e13\u4e1a&mdash;&mdash;\u8003\u8ba1\u7b97\u673a\u3002\u592a\u591a\u7684\u7406\u667a\u601d\u8003\u548c\u611f\u6027\u60c5\u611f\uff0c\u6700\u540e\u53ea\u5269\u4e0b\u4e09\u4e2a\u5b57&mdash;&mdash;\u820d\u4e0d\u5f97\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u4e00\u8fb9\u5907\u8003\uff0c\u4e00\u8fb9\u4f9d\u7136\u7ec4\u7ec7\u534f\u4f1a\u529e\u5ba3\u8bb2\uff0c\u529e\u6708\u8d5b\uff0c&nbsp;\u8981\u628a\u6708\u8d5b\u529e\u8d77\u6765\uff0c\u8981\u628a\u6708\u8d5b\u529e\u6210\u4e2d\u5357\u7684\u4f20\u7edf\uff0c\u8981\u8ba9\u6bcf\u4e00\u5c4a\u5b66\u751f\u4ece\u5927\u4e00\u5c31\u77e5\u9053</span><span>ACM</span><span>\uff0c\u559c\u4e0d\u559c\u6b22\u6ca1\u5173\u7cfb\uff0c\u4e0d\u8981\u56db\u5e74\u8ba1\u79d1\u4e0b\u6765\u8fd8\u4e0d\u77e5\u9053\u8fd9\u4e2a\u53ef\u80fd\u8ba9\u81ea\u5df1\u6fc0\u60c5\u6f8e\u6e43\u51e0\u5e74\uff0c\u8bb0\u5fc6\u4e00\u751f\u7684\u4e8b\u7269\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u5fc3\u4e2d\u6709\u5f88\u591a\u6028\u6124\uff0c\u5982\u679c\u4fdd\u7814\uff0c\u8fd9\u534a\u5e74\u5c31\u53ef\u4ee5\u5237\u9898\uff0c\u90a3\u660e\u5e74\u4f1a\u662f\u600e\u6837\u7684\u7ed3\u679c\uff1f\u540c\u6837\u7684\u5206\u6570\uff0c\u5728\u8ba1\u79d1\u80fd\u4fdd\uff0c\u5728\u81ea\u52a8\u5316\u5c31\u4e0d\u80fd\u4fdd\u3002\u4e0d\u8fc7\u547d\u8fd0\u5982\u6b64\uff0c\u6ca1\u592a\u591a\u53ef\u8bf4\u7684\u3002\u738b\u9053\u8bba\u575b\u56db\u4e2a\u8ba1\u7b97\u673a\u8003\u7814\u8f85\u5bfc\u4e66\uff0c\u770b\u7740\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u77e5\u8bc6\uff0c\u611f\u53d7\u53ea\u6709\u56db\u4e2a\u5b57&mdash;&mdash;\u76f8\u89c1\u6068\u665a\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u65e0\u8bba\u524d\u8def\u5982\u4f55\uff0c\u4ece\u6b64\u9009\u62e9\u6211\u7231\u7684\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>2012</span><span>\u5e74</span><span>3</span><span>\u6708\uff0c\u521d\u8bd5\u6210\u7ee9\u516c\u5e03\u3002\u7ecf\u5386\u4e86\u8ba1\u7b97\u673a\u8003\u7814\u7edf\u8003\u6709\u53f2\u4ee5\u6765\u521d\u8bd5\u6700\u96be\u4e00\u5e74\uff0c\u4e2d\u5357\u590d\u8bd5\u6700\u4e25\u4e00\u5e74\uff0c\u6211\u71ac\u8fc7\u6765\u4e86\u3002\u770b\u5230\u4e86\u4e0a\u4ea4\u3001\u6e05\u534e\u3001\u6d59\u5927\u7684\u590d\u8bd5\u7ebf\uff0c\u81ea\u5df1\u7684\u6210\u7ee9\u4e5f\u90fd\u8fc7\u4e86\u3002\u4e0d\u8fc7\u5fc3\u91cc\u5f88\u5e73\u9759\uff0c\u8fd9\u4e2a\u9009\u62e9\uff0c\u4e0d\u540e\u6094\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><strong><span>BMW</span></strong></p>\n<p><span>&nbsp;</span></p>\n<p><span>BMW</span><span>\u7ec4\u961f\u4e86\uff0c\u8fd8\u4e00\u8d77\u51fa\u9898\u641e\u4e86\u4e2a\u7eaa\u5ff5\u8d5b\u3002\u6211\u4eec\u4e0d\u662f\u4f20\u8a00\u4e2d\u7684\u5927\u795e\uff0c\u53ea\u662f\u5728</span><span>2011</span><span>\u4e00\u8d77\u6210\u957f\u7684\u4e00\u4e2a\u8001\u4eba\u548c\u4e24\u4e2a\u65b0\u4eba\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>BMW</span><span>\u4e0d\u662f\u5b9d\u9a6c\uff0c\u53ea\u662f\u559c\u6b22\u7684\u4e00\u4e2a\u52a8\u753b\u7247\u53eb\u300a</span><span>WALL-E</span><span>\u300b&nbsp;\u7684\u4e09\u4e2a\u53ef\u7231\u89d2\u8272\uff0c\u7535\u710a\u5de5</span><span>Burn-E</span><span>\uff0c\u6e05\u6d01\u5de5</span><span>M-O</span><span>\uff0c\u548c</span><span>Wall-E</span><span>\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u53ef\u4ee5\u80af\u5b9a\u7684\u8bf4\uff0c</span><span>08</span><span>\u7ea7\u662f\u4e2d\u5357</span><span>ACM</span><span>\u6700\u5f31\u7684\u4e00\u4ee3\uff0c\u6ca1\u6709\u4e4b\u4e00\u3002</span><span>2012</span><span>\u65b0\u6765\u7684\u7ade\u8d5b\u8f85\u5bfc\u5458\u7ecf\u9a8c\u5e76\u4e0d\u4e30\u5bcc\uff0c\u52a0\u4e4b\u5404\u5927\u8d5b\u4e8b\u5d1b\u8d77\uff0c\u843d\u5728</span><span>08</span><span>\u4e00\u4ee3\u8eab\u4e0a\u7684\u4e2d\u5357</span><span>ACM</span><span>\u6821\u8d5b\u4e0d\u53ef\u907f\u514d\u7684\u6709\u4e9b\u60e8\u6de1\u3002</span><span>XTU</span><span>\u6ca1\u6709\u6765\u4e3b\u529b\uff0c</span><span>HNU</span><span>\u5e72\u8106\u4e0d\u6765\uff0c\u658c\u4ed4\u548c\u4f1f\u6c11\u4e5f\u4fbf\u8f7b\u677e\u593a\u51a0\u3002\u8fd9\u91cc\u611f\u8c22\u4e00\u4e0b\u9ec4\u5927\u54e5\u548c\u5d14\u5927\u54e5\u641e\u8d77\u6765\u7684</span><span>CSUOJ</span><span>\uff0c\u4e0d\u7136\u8fd9\u51e0\u4e2a\u6708\u6765\u7684\u6708\u8d5b\u548c\u4eca\u5e74\u7684\u6821\u8d5b\uff0c\u6211\u8fd9\u4e2a\u8001\u65b0\u4eba\u771f\u4e0d\u77e5\u9053\u600e\u4e48\u641e\u3002\u5fd9\u524d\u5fd9\u540e\u51fa\u9898\u914d\u73af\u5883\u7ec4\u7ec7\u62a5\u540d\u4fe1\u606f\u4e00\u628a\u6293\uff0c\u4ece\u7ec4\u7ec7\u9886\u5bfc\u5230\u83b7\u5956\u9009\u624b\u90fd\u6ca1\u6709\u5730\u65b9\u53ef\u4ee5\u7559\u4e0b\u81ea\u5df1\u7684\u540d\u5b57\uff0c\u5012\u662f\u6709\u70b9\u5c0f\u9057\u61be\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>3</span><span>\u6708\u5fd9\u8003\u7814\u590d\u8bd5\uff0c</span><span>4</span><span>\u6708\u521d\u5fd9\u6821\u8d5b\uff0c</span><span>4</span><span>\u6708\u4e2d\u5fd9\u6bd5\u8bbe\u8c03\u7814\u62a5\u544a\uff0c\u6539\u4e86\u4e00\u7a3f\u53c8\u4e00\u7a3f\u3002\u5bd2\u5047\u4e4b\u540e\u53c8\u662f\u4fe9\u6708\u6ca1\u5237\u9898\uff0c\u6821\u8d5b\u90a3\u5929\u504f\u504f\u662f\u534e\u4e2d\u8d5b\u7684\u7f51\u7edc\u8d5b\uff0c\u4e3a\u4e86\u540d\u989d\u4e00\u4e2a\u4eba\u8dd1\u56de\u5bdd\u5ba4\u6c34\u4e86\u51e0\u9898\uff0c\u7b97\u662f\u52c9\u5f3a\u6709\u4e86\u53c2\u8d5b\u8d44\u683c\u3002\u786c\u7740\u5934\u76ae\u5c31\u53bb\u4e86\u6b66\u5927\uff0c\u7ea0\u7ed3\u5230\u6700\u540e\u4e00\u5c0f\u65f6\u8fde\u7206\u4e24\u9898\u7b97\u662f\u53d6\u4e86\u4e2a\u4e09\u7b49\u5956\u3002\u8fd8\u6ca1\u6b47\u53e3\u6c14\u5c31\u8981\u53bb\u91d1\u534e\uff0c\u773c\u770b\u5168\u573a\u8fc7\u4e86\u4e0d\u5c11\u4eba\u7684</span><span>C</span><span>\u3001</span><span>E</span><span>\u4e24\u9898\uff0c\u4ece\u5934\u4ea4\u5230\u5c3e\u5c31\u662f\u4e0d\u89c1\u4e00\u4e2a</span><span>YES</span><span>\uff0c\u6700\u540e</span><span>3</span><span>\u9898\u62ff\u94dc\uff08\u5230\u73b0\u5728\u6211\u90fd\u4e0d\u786e\u5b9a\uff0c\u53ea\u662f\u5fd7\u613f\u8005\u544a\u8bc9\u6211\u662f\u94dc\uff0c\u56e0\u4e3a\u8d5b\u540e\u53bb\u7f51\u5427\u4e86&hellip;&hellip;\uff09\u3002\u5173\u4e8e\u91d1\u534e\uff0c\u6700\u8ba9\u6211\u4e0d\u723d\u4e00\u4ef6\u4e8b\u662f\u706b\u8f66\u7ad9\u5b89\u68c0\u628a\u6211\u4e8c\u767e\u591a\u7684\u745e\u58eb\u519b\u5200\u7ed9\u6536\u4e86\u3002\u8bdd\u8bf4\u8fd9\u4e0d\u662f\u7ba1\u5236\u5200\u5177\u5427\uff0c\u8fd9\u6837\u6536\u65e0\u5f02\u4e8e\u62a2\u52ab\u5427\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><strong><span>\u4e00\u4e9b\u611f\u6168</span></strong></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u56de\u6765\u53c8\u8981\u5fd9\u6bd5\u8bbe\u4e86\u3002\u4e2d\u5357\u8fd9\u5b66\u672f\u73af\u5883\u5bf9</span><span>ACM</span><span>\u771f\u6ca1\u6709\u7eff\u706f\u7684\uff0c\u5c39\u5927\u54e5\u80fd\u9003\u8bfe\u5237\u8fd9\u4e48\u591a\u9898\uff0c\u771f\u4e0d\u5bb9\u6613\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>10~12</span><span>\u4e2d\u5357</span><span>ACM</span><span>\u53f2\u662f\u8270\u8f9b\u7684\u6697\u6de1\u7684\uff0c\u6211\u89c1\u8bc1\u4e86\u4e2d\u5357</span><span>ACM</span><span>\u7684\u4f4e\u8c37\uff0c\u4e5f\u7b49\u5f85\u89c1\u8bc1\u5979\u7684\u5d1b\u8d77\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u611f\u8c22</span><span>ACM</span><span>\u534f\u4f1a\u7684\u5e72\u4e8b\u4eec\u4e3a\u5171\u540c\u7684\u7406\u60f3\u4ed8\u51fa\u7684\u8bb8\u591a\u3002\u65b0\u4e00\u4ee3\u7684\u961f\u5458\u662f\u6709\u6fc0\u60c5\u7684\u4e00\u4ee3\uff0c\u6709\u68a6\u60f3\u7684\u4e00\u4ee3\uff0c\u5e0c\u671b\u4f60\u4eec\u4f1a\u4e3a\u8fd9\u4e2a\u68a6\u60f3\u594b\u6597\u4e0b\u53bb\uff0c\u800c\u4e14\u4e0d\u8981\u5fd8\u4e86\u81ea\u5df1\u7684\u4f7f\u547d\u4e0d\u53ea\u662f\u81ea\u5df1\uff0c\u8fd8\u6709\u540e\u6765\u4eba\u3002</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>\u8fd8\u6709\u4e0d\u5f97\u4e0d\u8bf4\u7684\u6559\u7ec3\u9648\u8001\u5e08\uff0c\u4e3a</span><span>ACM</span><span>\u505a\u4e86\u5f88\u591a\u5f88\u591a\uff0c\u65e0\u9700\u591a\u8bf4\uff0c\u4e86\u89e3\u7684\u4eba\u90fd\u77e5\u9053\uff0c\u6709\u9648\u8001\u5e08\u8fd9\u6837\u7684\u8001\u5e08\uff0c\u662f\u4e2d\u5357\u4e4b\u5e78\uff01</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>BMW</span><span>\u5c06\u5982\u4f55\uff1f\u4e2d\u5357</span><span>ACM</span><span>\u5c06\u5982\u4f55\uff1f\u7ad9\u5728\u4e2d\u5357</span><span>ACM</span><span>\u7684\u6700\u4f4e\u8c37\u4ef0\u671b\uff0c\u6211\u575a\u4fe1\u6211\u4eec\u7684\u68a6\u60f3\u7ec8\u5c06\u98de\u7fd4\uff01</span></p>\n<p><span>&nbsp;</span></p>\n<p><span>&nbsp;</span></p>"
			}, {
				"title": "HDUOJ1043Eight \u516b\u6570\u7801\u95ee\u9898\u53ef\u4ee5\u6784\u9020\u89e3",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659116.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:37:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659116.html",
				"description": "<p>POJ\u6734\u7d20\u641c\u7d22\u80fd\u8fc7\u7684Eight\uff0c\u5230HDU\u7684\u53d8\u6001\u6570\u636e\u5c31\u8fc7\u4e0d\u53bb\u4e86\uff0c\u7136\u800c\u65e0\u8bba\u53cc\u5e7f\u8fd8\u662fA*\u90fd\u65e0\u6cd5\u5b9e\u73b0statistic\u91cc0ms\u7684\u795e\u8ff9\u3002Discuss\u91cc\u770b\u5230\u4e86\u7f57\u6559\u4e3b\u7684\u4e00\u4e2a\u56de\u5e16&mdash;&mdash;\u6784\u9020\u89e3\uff01\u4e8e\u662f\u4e13\u95e8\u5411\u7f57\u6559\u4e3b\u8bf7\u6559\u4e86\u4e00\u4e0b\uff0c\u7adf\u7136\u6ca1\u770b\u61c2\u4ed6\u7684\u56de\u7b54\u3002</p>\n<p>\u8d70\u4eb2\u621a\u548c\u8868\u5f1f\u62ff\u7eb8\u7247\u73a9\u4e86\u597d\u4e00\u4f1a\u513f\uff0c\u53d1\u73b0\u4e86\u4e00\u70b9\u86db\u4e1d\u9a6c\u8ff9\u3002<br />&nbsp;</p>\n<p>\u6784\u9020\u7684\u65b9\u6cd5\u4e0d\u6b62\u4e00\u79cd\uff0c\u658c\u4ed4\u7684\u5c31\u548c\u6211\u7684\u4e0d\u4e00\u6837\uff0c\u4e0d\u8fc7\u539f\u7406\u662f\u76f8\u540c\u7684\u3002\u76f4\u63a5\u516b\u4e2a\u6570\u5206\u5f00\u8bf4\u5427\uff1a</p>\n<p>\u9996\u5148\u7ed9\u516b\u4e2a\u4f4d\u7f6e\u6807\u53f7\uff0c\u65b9\u4fbf\u63cf\u8ff0</p>\n<p>'1'\uff1a\u5f88\u5bb9\u6613\u5f52\u4f4d\u3002</p>\n<p>'2'\uff1a\u4e0d\u79fb\u52a8'1'\u7684\u60c5\u51b5\u4e0b\u4e5f\u5f88\u5bb9\u6613\u5f52\u4f4d\u3002</p>\n<p>'3'\uff1a\u9002\u5f53\u8c03\u6574\uff0c\u4fdd\u8bc1\u4f4d\u7f6e4\u4e0d\u662f'3'\u4e5f\u4e0d\u662f'x'\uff0c\u5c06'1&rsquo;\u3001'2'\u9006\u65f6\u9488\u65cb\u8f6c\u52304\u30011\u4f4d\u7f6e\uff0c\u7136\u540e\u5728\u4e0d\u79fb\u52a8'1'\u3001'2'\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u628a'3'\u79fb\u52a8\u5230\u4f4d\u7f6e2\uff0c\u6b64\u65f6'1'\u3001'2'\u3001'3'\u521a\u597d\u57284\u30011\u30012\u6784\u6210\u987a\u65f6\u9488\uff0c\u518d\u5c06'1'\u3001'2'\u3001'3'\u987a\u65f6\u9488\u8f6c\u56de\u4f4d\u7f6e1\u30012\u30013\uff0c\u5219'1'\u3001'2'\u3001'3'\u5b9a\u4f4d\u3002</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/441540/2012082721045743.jpg\" alt=\"\" /></p>\n<p>'4'\u3001'5'\u3001'6'\u7684\u5b9a\u4f4d\u65b9\u6cd5\u548c'1'\u3001'2'\u3001'3'\u76f8\u540c\u539f\u7406\uff0c\u53ea\u662f\u64cd\u4f5c\u4e0a\u7565\u6709\u4e0d\u540c\uff0c\u8fd9\u65f6\u5019\u6bd4\u524d\u9762\u5bb9\u6613\u8bb8\u591a\u3002</p>\n<p>'4'\uff1a\u76f4\u63a5\u5b9a\u4f4d\u3002</p>\n<p>'5'\uff1a\u76f4\u63a5\u5b9a\u4f4d\u3002</p>\n<p>'6'\uff1a\u8f6c'4'\u3001'5'\u5230\u4f4d\u7f6e7\u30014\uff0c\u628a'6&lsquo;\u79fb\u52a8\u52305\uff0c\u987a\u65f6\u9488\u4e00\u6b21'4'\u3001'5'\u3001'6'\u5b9a\u4f4d\u3002</p>\n<p>\u6b64\u65f6'7'\u3001'8'\u663e\u7136\u90fd\u5728\u7b2c\u4e09\u884c\uff0c\u5982\u679c'x'\u4e0d\u57289\uff0c\u79fb\u52a8\u4e00\u4e0b\u5373\u53ef\u3002</p>\n<p>\u987a\u4fbf\u4e5f\u53ef\u4ee5\u5224\u65ad\u6709\u65e0\u89e3\uff0c\u5982\u679c\u6700\u7ec8'7'\u5728\u4f4d\u7f6e8\uff0c\u5219\u65e0\u89e3\uff0c\u5426\u5219\u6709\u89e3\uff08\u53ef\u6839\u636e\u9006\u5e8f\u6570\u63a8\u8bc1\uff09\u3002</p>\n<p>\u5b9e\u73b0\u7684\u65b9\u6cd5\u4e5f\u6709\u4e00\u5b9a\u6280\u5de7\u6027\uff0c\u903b\u8f91\u4e0d\u540c\u5b9e\u73b0\u7684\u6548\u7387\u548c\u4ee3\u7801\u7684\u957f\u5ea6\u4e5f\u4f1a\u6709\u5f88\u5927\u5dee\u522b\uff0c\u4e00\u4e2a\u601d\u8def\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5199\u597d\u51e0\u4e2a\u56fa\u5b9a\u7684\u65cb\u8f6c\u51fd\u6570\uff0c\u76f4\u63a5\u8c03\u7528\uff0c\u9898\u76ee\u6ca1\u6709\u8981\u6c42\u89e3\u7684\u957f\u77ed\uff0c\u6240\u4ee5\u591a\u8f6c\u51e0\u5708\u65e0\u6240\u8c13\u3002</p>\n<p>&nbsp;\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\uff0c\u7b97\u662f\u4e2a\u601d\u7ef4\u6e38\u620f\uff0c\u6ca1\u6709\u4ec0\u4e48\u7b97\u6cd5\u53ef\u8a00\u3002</p>\n<p>\u8bd5\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\u658c\u4ed4\u8fd8\u53d1\u73b0ZOJ\u7684Static\u53ef\u4ee5\u5237\u699c\u7684\uff0c\u5982\u679c\u4ee3\u7801\u6548\u7387\u5728\u524d\u9762\uff0c\u80fd\u628a\u90a3\u4e00\u9875\u5168\u5237\u6210\u81ea\u5df1\u7684&hellip;&hellip;\u7b97\u4e0d\u7b97bug\u5462\u3002\u3002\u3002</p>\n<p>&nbsp;</p>\n<p>\u7d22\u6027\u505a\u4e86\u4e2a\u63a7\u5236\u53f0\u7684\u516b\u6570\u7801\u6e38\u620f\uff0c\u6709\u5174\u8da3\u7684\u670b\u53cb\u53ef\u4ee5<span style=\"color: #0000ff;\"><a title=\"\u516b\u6570\u7801\u5c0f\u6e38\u620f\" href=\"http://pan.baidu.com/share/link?shareid=9099&amp;uk=1008041073\"><span style=\"color: #0000ff;\">\u4e0b\u8f7d</span></a></span>\u6765\u73a9\u73a9\u3002</p>"
			}, {
				"title": "CSU_BMW\u6b63\u5f0f\u7ec4\u961f\u7eaa\u5ff5\u8d5b\u51fa\u9898+\u90e8\u5206\u89e3\u9898\u62a5\u544a",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659117.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:37:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659117.html",
				"description": "<p>\u5fd9\u7684\u8981\u6b7b\u4e86\uff0c\u8981\u7ed9\u4e09\u6708\u6708\u8d5b\u8c03\u8bd5\u670d\u52a1\u5668\uff0c\u51fa\u9898\uff0c\u8fd8\u8981\u7b79\u529e\u4e0b\u4e2a\u6708\u7684\u6821\u8d5b\uff0c\u8fd8\u6709\u8003\u7814\u590d\u8bd5\uff0c\u8fd8\u6709\u6bd5\u4e1a\u8bbe\u8ba1&hellip;&hellip;\u8fd9\u4fe9\u5b69\u5b50\u5f97\u77e5\u8003\u7814\u6210\u7ee9\u516c\u5e03\uff0c\u54b1\u7684\u5206\u6570\u5e94\u8be5\u7b97\u8fc7\u4e86\u521d\u8bd5\u4e86\uff0c\u7adf\u7136\u60f3\u5230\u6765\u529e\u4e00\u573a\u7eaa\u5ff5\u8d5b\uff0c\u5012\u662f\u9887\u4e3a\u611f\u52a8\u3002\u3002\u3002</p>\n<p>&nbsp;</p>\n<p>\u4e8b\u60c5\u592a\u591a\uff0c\u53ea\u51fa\u4e86\u4e24\u4e2a\u6c34\u9898\uff0c\u6c34\u4e86\u4e24\u4e2a\u7684\u670b\u53cb\u522b\u5fd8\u4e86\u611f\u8c22\u6211~~</p>\n<p>A\uff1a\u641e\u4e24\u4e2a\u53cc\u7aef\u961f\u5217\uff0c\u4e00\u4e2a\u662f\u6700\u5927\u6570\u5355\u8c03\u961f\u5217\uff0c\u4e00\u4e2a\u662f\u6700\u5c0f\u6570\u5355\u8c03\u961f\u5217\uff0c\u4e00\u904d\u626b\u8fc7\u53bb\uff0c\u968f\u65f6\u628a\u7b54\u6848\u66f4\u65b0\u4e3a\u4e24\u4e2a\u961f\u5217\u8f83\u77ed\u90a3\u4e2a\uff08\u5f53\u8f83\u77ed\u90a3\u4e2a\u6bd4\u7b54\u6848\u957f\u7684\u65f6\u5019\uff09</p>\n<p>B\uff1a\u8fd8\u597d\u6d4b\u8bd5\u7684\u65f6\u5019\u5199\u4e86\u4e2an^2logn\u7684\u4ee3\u7801\u6c34\u4e86\u8fc7\u53bb\uff0c\u6240\u4ee5\u52a0\u5f3a\u4e86\u6570\u636e\u3002\u5bf9X\u5750\u6807\u6392\u5e8f\uff0c\u679a\u4e3eY\u5750\u6807\u7684\u4f4e\u7aef\uff0cn^2\u626b\u63cf\u3002</p>\n<p>C\uff1a\u628a\u8fd9\u4e32\u6570\u5b57\u7684\u8fc7\u7a0b\u5012\u8fc7\u6765\u770b\uff0c\u53cc\u7aefDP\u3002</p>\n<p>D\uff1a\u8fd9\u9898\u5c31\u662f\u5751\u7239\u7684\uff0c\u53bb\u770b\u658c\u4ed4\u7684\u9898\u89e3\u5427\u3002</p>\n<p>EFG\u6ca1\u770b\uff0c\u53c2\u8003M-O\u548cBurn-E\u7684\u9898\u89e3\u3002</p>\n<p>H\uff1aprintf\u7684\u53cc\u5f15\u53f7\u91cc\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5c31\u662f\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u5b9a\u4e49\u597d\u7684\u5b57\u7b26\u4e32\u53d8\u91cf\u4ee3\u66ff\uff0c\u90a3\u4e48~~</p>\n<p>char buf[100] = \"%d\";printf(buf, 1);\u597d\u73a9\u5427\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\">(gets(buf))\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; buf[i] != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">'</span>; ++<span style=\"color: #000000;\"> i);\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">for</span>(j = strlen(buf); buf[j] != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">'</span>; --<span style=\"color: #000000;\"> j);\n</span><span style=\"color: #008080;\"> 5</span>     strncpy(prin, buf + i + <span style=\"color: #800080;\">1</span>, j - i - <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\"> 6</span>     prin[j - i - <span style=\"color: #800080;\">1</span>] = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>     <span style=\"color: #0000ff;\">for</span>(; buf[j] != <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">,</span><span style=\"color: #800000;\">'</span>; ++<span style=\"color: #000000;\"> j);\n</span><span style=\"color: #008080;\"> 8</span>     sscanf(buf + j + <span style=\"color: #800080;\">1</span>, <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d,%d,%d</span><span style=\"color: #800000;\">\"</span>, &amp;a, &amp;b, &amp;<span style=\"color: #000000;\">c);\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">    printf(prin, a, b, c);\n</span><span style=\"color: #008080;\">10</span>     printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\n</span><span style=\"color: #008080;\">11</span> }</pre>\n</div>\n<p>\u4e0d\u8fc7\u76f4\u63a5\u4ea4\u4e0a\u9762\u4ee3\u7801\u4f1aWA\u7684\uff0c\u6709\u4ec0\u4e48\u548c\u601d\u8def\u65e0\u5173\u7684trick\u5c31\u4e0d\u8bb2\u4e86~~~<img src=\"http://images.cnitblog.com/blog/441540/201408/261947148131864.gif\" alt=\"\" />\u3002</p>\n<p>&nbsp;</p>\n<p>I\uff1a\u7edf\u8ba1\u4e09\u79cd\u5b57\u6bcd\u7684\u4e2a\u6570\uff0c\u8f93\u51fa\u4e2a\u6570\u6700\u5c11\u7684\u90a3\u4e2a\u5c31\u53ef\u4ee5\u4e86\u3002</p>\n<div class=\"cnblogs_code\">\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\">(gets(buf))\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #000000;\">{\n</span><span style=\"color: #008080;\"> 3</span>     b = m = w = <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 4</span>     <span style=\"color: #0000ff;\">for</span>(i = <span style=\"color: #800080;\">0</span>; buf[i]; ++<span style=\"color: #000000;\"> i)\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">    {\n</span><span style=\"color: #008080;\"> 6</span>         b += buf[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">b</span><span style=\"color: #800000;\">'</span> || buf[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">B</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 7</span>         m += buf[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">m</span><span style=\"color: #800000;\">'</span> || buf[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">M</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 8</span>         w += buf[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">w</span><span style=\"color: #800000;\">'</span> || buf[i] == <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">W</span><span style=\"color: #800000;\">'</span><span style=\"color: #000000;\">;\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">    }\n</span><span style=\"color: #008080;\">10</span>     printf(<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%d\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, min(b, m, w));\n</span><span style=\"color: #008080;\">11</span> }</pre>\n</div>\n<p>&nbsp;</p>\n<p>\u5176\u4ed6\u9898\u8be6\u7ec6\u89e3\u9898\u62a5\u544a\uff1a</p>\n<p><a href=\"http://rrurl.cn/pOE3dR\" target=\"_blank\"><span>Staginner\u89e3\u9898\u62a5\u544a</span></a></p>\n<p><span><a href=\"http://rrurl.cn/5Adl0z\" target=\"_blank\"><span>Swimming\u89e3\u9898\u62a5\u544a</span></a></span></p>\n<p><a href=\"http://acm.csu.edu.cn/OnlineJudge/problemset.php?search=CSU_BMW%E6%AD%A3%E5%BC%8F%E7%BB%84%E9%98%9F%E7%BA%AA%E5%BF%B5%E8%B5%9B\" target=\"_blank\"><span>\u9898\u76ee\u94fe\u63a5</span></a></p>"
			}, {
				"title": "Hello World",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659115.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:36:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659115.html",
				"description": "<p>#include&lt;stdio.h&gt;</p>\n<p>int main()</p>\n<p>{</p>\n<p>&nbsp;&nbsp; &nbsp;printf(\"Hello world!\\n\");</p>\n<p>}</p>\n<p>\u4efb\u4f55\u4f1f\u5927\uff0c\u90fd\u6709\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u5f00\u59cb\u3002</p>"
			}, {
				"title": "\u79bb\u5f00\u767e\u5ea6\u7a7a\u95f4",
				"link": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659114.html",
				"dc:creator": "CSGrandeur",
				"author": "CSGrandeur",
				"pubDate": "Mon, 27 Aug 2012 12:35:00 GMT",
				"guid": "http://www.cnblogs.com/CSGrandeur/archive/2012/08/27/2659114.html",
				"description": "<p>\u767e\u5ea6\u7a7a\u95f4\u5f88\u591a\u4e0d\u597d\u7528\u7684\u5730\u65b9\u4e5f\u5fcd\u4e86\uff0c\u4eca\u5929\u53d1\u73b0\u6628\u5929\u53d1\u7684\u9898\u89e3\u7adf\u7136\u83ab\u540d\u5176\u5999\u6d88\u5931\u4e86\uff0c\u8fd9\u4e2a\u771f\u7684\u5fcd\u4e0d\u4e86\u4e86\u3002</p>\n<p>\u642c\u6765\u535a\u5ba2\u56ed\uff0c\u4e4b\u524d\u535a\u6587\u4e5f\u4e0d\u591a\uff0c\u90fd\u642c\u8fc7\u6765\u5427\u3002</p>"
			}]
		}
	}
}